{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/chiangmai/source/favicon.jpg","path":"favicon.jpg","modified":1,"renderable":1},{"_id":"themes/chiangmai/source/logo.png","path":"logo.png","modified":1,"renderable":1},{"_id":"source/images/4.png","path":"images/4.png","modified":1,"renderable":0},{"_id":"source/images/7.png","path":"images/7.png","modified":1,"renderable":0},{"_id":"source/images/6.png","path":"images/6.png","modified":1,"renderable":0},{"_id":"source/images/8.png","path":"images/8.png","modified":1,"renderable":0},{"_id":"source/images/9.png","path":"images/9.png","modified":1,"renderable":0},{"_id":"source/images/discord.svg","path":"images/discord.svg","modified":1,"renderable":0},{"_id":"source/images/powershell_windows_menu.png","path":"images/powershell_windows_menu.png","modified":1,"renderable":0},{"_id":"source/images/powershell_run.png","path":"images/powershell_run.png","modified":1,"renderable":0},{"_id":"source/images/w-10.png","path":"images/w-10.png","modified":1,"renderable":0},{"_id":"source/images/w-1.png","path":"images/w-1.png","modified":1,"renderable":0},{"_id":"source/images/w-11.png","path":"images/w-11.png","modified":1,"renderable":0},{"_id":"source/images/w-13.png","path":"images/w-13.png","modified":1,"renderable":0},{"_id":"source/images/w-15.png","path":"images/w-15.png","modified":1,"renderable":0},{"_id":"source/images/w-12.png","path":"images/w-12.png","modified":1,"renderable":0},{"_id":"source/images/w-14.png","path":"images/w-14.png","modified":1,"renderable":0},{"_id":"source/images/w-16.png","path":"images/w-16.png","modified":1,"renderable":0},{"_id":"source/images/w-2.png","path":"images/w-2.png","modified":1,"renderable":0},{"_id":"source/images/w-3.png","path":"images/w-3.png","modified":1,"renderable":0},{"_id":"source/images/w-6.png","path":"images/w-6.png","modified":1,"renderable":0},{"_id":"source/images/w-5.png","path":"images/w-5.png","modified":1,"renderable":0},{"_id":"source/images/w-7.png","path":"images/w-7.png","modified":1,"renderable":0},{"_id":"source/images/w-4.png","path":"images/w-4.png","modified":1,"renderable":0},{"_id":"source/images/w-9.png","path":"images/w-9.png","modified":1,"renderable":0},{"_id":"source/images/w-8.png","path":"images/w-8.png","modified":1,"renderable":0},{"_id":"source/images/2.png","path":"images/2.png","modified":1,"renderable":0},{"_id":"themes/chiangmai/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/chiangmai/source/image/profile.jpg","path":"image/profile.jpg","modified":1,"renderable":1},{"_id":"themes/chiangmai/source/scss/chiangmai.scss","path":"scss/chiangmai.scss","modified":1,"renderable":1},{"_id":"source/images/10.png","path":"images/10.png","modified":1,"renderable":0},{"_id":"source/images/5.png","path":"images/5.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/11.png","path":"images/super_easy_shadowsocks_tutorial/11.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/12.png","path":"images/super_easy_shadowsocks_tutorial/12.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/13.png","path":"images/super_easy_shadowsocks_tutorial/13.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/14.png","path":"images/super_easy_shadowsocks_tutorial/14.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/17.png","path":"images/super_easy_shadowsocks_tutorial/17.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/16.png","path":"images/super_easy_shadowsocks_tutorial/16.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/15.png","path":"images/super_easy_shadowsocks_tutorial/15.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/18.png","path":"images/super_easy_shadowsocks_tutorial/18.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/19.png","path":"images/super_easy_shadowsocks_tutorial/19.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/20.png","path":"images/super_easy_shadowsocks_tutorial/20.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/21.png","path":"images/super_easy_shadowsocks_tutorial/21.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/5.png","path":"images/super_easy_shadowsocks_tutorial/5.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/6.png","path":"images/super_easy_shadowsocks_tutorial/6.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/4.png","path":"images/super_easy_shadowsocks_tutorial/4.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/22.png","path":"images/super_easy_shadowsocks_tutorial/22.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/9.png","path":"images/super_easy_shadowsocks_tutorial/9.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/7.png","path":"images/super_easy_shadowsocks_tutorial/7.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/8.png","path":"images/super_easy_shadowsocks_tutorial/8.png","modified":1,"renderable":0},{"_id":"themes/chiangmai/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/images/3.png","path":"images/3.png","modified":1,"renderable":0},{"_id":"themes/chiangmai/source/css/chiangmai.css","path":"css/chiangmai.css","modified":1,"renderable":1},{"_id":"source/images/goodbye.png","path":"images/goodbye.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/1.png","path":"images/super_easy_shadowsocks_tutorial/1.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/10.png","path":"images/super_easy_shadowsocks_tutorial/10.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/2.png","path":"images/super_easy_shadowsocks_tutorial/2.png","modified":1,"renderable":0},{"_id":"source/images/super_easy_shadowsocks_tutorial/3.png","path":"images/super_easy_shadowsocks_tutorial/3.png","modified":1,"renderable":0},{"_id":"source/images/1.png","path":"images/1.png","modified":1,"renderable":0},{"_id":"source/images/aws_kr.png","path":"images/aws_kr.png","modified":1,"renderable":0},{"_id":"source/images/hostus_hk.png","path":"images/hostus_hk.png","modified":1,"renderable":0},{"_id":"source/images/vpsserver_jp.png","path":"images/vpsserver_jp.png","modified":1,"renderable":0},{"_id":"source/images/do_singapore.png","path":"images/do_singapore.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"beea970340f0abd7418b74edb9436a1aa571e1df","modified":1582726340597},{"_id":"themes/chiangmai/.gitignore","hash":"cacc86f1628a8ae3cbc8602cfc12cae037a75535","modified":1582647877754},{"_id":"themes/chiangmai/.DS_Store","hash":"23325e01006890dacc9680bea32464d1c8ec216b","modified":1582726840922},{"_id":"themes/chiangmai/LICENSE","hash":"c08bb75edfa0963c512a69917580e19304fe98ca","modified":1582647877754},{"_id":"themes/chiangmai/README.md","hash":"03a0f59aa8a3311cb233e47ad7534a6ede2dd986","modified":1582647877754},{"_id":"themes/chiangmai/_config.yml","hash":"07d3162023f17624f120b210b24df47bbebf7f29","modified":1582726468587},{"_id":"themes/chiangmai/gulpfile.js","hash":"8e89587c3bc5e1d59af914f0d6835bc0a9661083","modified":1582647877755},{"_id":"themes/chiangmai/package.json","hash":"71bfdfff2f1a34e600fd7e611fe58ff46c8adf68","modified":1582647877760},{"_id":"themes/chiangmai/yarn.lock","hash":"0335ded4aecba06bdd383905064e59eb512e1b17","modified":1582647877767},{"_id":"themes/chiangmai/yarn-error.log","hash":"61c07547c69541658f55e805e892dc4fb31e688d","modified":1582648376920},{"_id":"source/categories/index.md","hash":"33f6102f3f3b820fe412a38aa4fc8c5ee506c2a7","modified":1548085927526},{"_id":"source/categories/index-1.md","hash":"025d14244b432c57c44301efafe9639ee33cc4f6","modified":1548085927526},{"_id":"source/_posts/Android-2分钟创建一个好看的关于页面.md","hash":"28f5ffc6031c10161819f337cb75cb21f144cdc9","modified":1548085927522},{"_id":"source/_posts/Android复习篇-四大组件之Activity.md","hash":"0e22b03c0502fe95d1ed748755c60911374da21c","modified":1548085927523},{"_id":"source/_posts/Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能.md","hash":"59ccaddb86f721913e58af3069fce80eaa744d6e","modified":1548085927523},{"_id":"source/_posts/Android-手机刷第三方ROM教程，旧手机重生之术.md","hash":"fcf6e4776cdd042573f4b71c851834baaa4be56d","modified":1548085927522},{"_id":"source/_posts/Android-Oreo-Android-8-0-尝鲜刷机教程-奥利奥.md","hash":"4d084e4f915b68b8dbc2e30ced17b7604ac888d9","modified":1548085927522},{"_id":"source/_posts/Android开发笔记.md","hash":"8230ab34c9f3c16e778be575f6ecaaff9e58a2bb","modified":1548085927523},{"_id":"source/_posts/Android流行第三方库教程 - 第一篇 ButterKnife.md","hash":"e54eaf7ffb4f9a9ac765c7b28ca55637beb8cd2e","modified":1548085927523},{"_id":"source/_posts/Android流行第三方库教程 - 第二篇 EventBus.md","hash":"8c9c0af098fcbfba32d89d05f8c20c5f67e426e0","modified":1548085927523},{"_id":"source/_posts/Git-SSH-Key-生成步骤.md","hash":"52e924be5289a8ead672e501e580bb5677be408a","modified":1548085927524},{"_id":"source/_posts/Hexo-Github-pages-创建一个属于自己的博客.md","hash":"43062a50daf315ca42aaf16240fbba0dc7c6afdc","modified":1548085927524},{"_id":"source/_posts/GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices).md","hash":"bad18e9bf79b858721b149b38fce5997d552a490","modified":1548085927523},{"_id":"source/_posts/LineageOS下载地址-个人整理.md","hash":"7ba4bf2181adcc361b075ca7cc12bc19ab4cf51d","modified":1548085927524},{"_id":"source/_posts/THANKS-GOOGLE.md","hash":"61edb5b95aedbb016da5efb66841537e8934e4e1","modified":1548085927524},{"_id":"source/_posts/在Android中创建类似Instagram的渐变背景.md","hash":"af4cc265f51cb910fb10f00deb38233a2e046f2e","modified":1548085927524},{"_id":"source/_posts/如何启用Shadowsocks的多端口.md","hash":"1f2fde3835a5267ac88abaeb440fbd1298a58949","modified":1563702972038},{"_id":"source/_posts/用Kotlin开发，Android Studio配置Kotlin篇.md","hash":"f4b7de56d2eccab2c1b9011d30822b09d4f275a5","modified":1548085927524},{"_id":"source/_posts/纪录博客域名更换.md","hash":"8eded8805c6f17eca0ca969abdc87181cea2d413","modified":1548085927525},{"_id":"source/_posts/给小白的Shadowsocks翻墙教程(一键脚本).md","hash":"6e6f32fc98678cd712b622a829173634937f9f8a","modified":1563702972039},{"_id":"source/_posts/给小白的超简单shadowsocks翻墙教程(outline).md","hash":"3fa5dae4bdba824d7da8feae6ea906084d5b9954","modified":1563702972040},{"_id":"source/_posts/自建ssr服务器教程.md","hash":"6c71117dc84c4fe1d6a7927d9aac26d25bf1f606","modified":1548085927525},{"_id":"source/_posts/记今天-收到来自amazon的offer.md","hash":"b51fef533f9e87e4353925a254e523bba3e9a5c2","modified":1548085927525},{"_id":"source/_posts/给编程初学者的免费RESTful API测试接口.md","hash":"3635f0da73641a89e1462992c784a8c6e7a4f7a7","modified":1565534797305},{"_id":"source/_posts/记录一下自己微信小游戏跳一跳被清零.md","hash":"415df6208acd3ff60b818bfd34de6d61b6fe85fb","modified":1548085927525},{"_id":"source/tags/index-1.md","hash":"039f79882cff0b4508117cd007649625131d3471","modified":1548085927526},{"_id":"source/tags/index.md","hash":"0c0c24d0ebf0371c7b7c01aca25136d9bfb77b2d","modified":1548085927526},{"_id":"themes/chiangmai/languages/ko.yml","hash":"a1f29fe2c9cc1ebaa6279b853ad86967cd2ba9d5","modified":1582647877756},{"_id":"themes/chiangmai/languages/en.yml","hash":"602fd8c3a7e8eb82df9b3a44b6ca722948cc9531","modified":1582647877755},{"_id":"themes/chiangmai/layout/archive.pug","hash":"cda8dac825f1c1bbd6cf1ce25a113c2e1406e728","modified":1582647877756},{"_id":"themes/chiangmai/layout/.DS_Store","hash":"4290185a7c9a46ea86d8a4fe54b159b6dc3922bb","modified":1582726495450},{"_id":"themes/chiangmai/layout/index.pug","hash":"ddbb52f0311f6a16e0a4c2f3fa3961303fa3121c","modified":1582647877756},{"_id":"themes/chiangmai/layout/post.pug","hash":"200498460af0c3f94d27c1791acc2a4c8e88f5a5","modified":1582647877760},{"_id":"themes/chiangmai/source/.DS_Store","hash":"70c93f80b798bb872b9435cb64899837d51d669d","modified":1582726846829},{"_id":"themes/chiangmai/source/favicon.jpg","hash":"0b6c1d22a04ba6ca18afdb2d1ed386d19b487867","modified":1582726310849},{"_id":"themes/chiangmai/package-lock.json","hash":"c3bd67b9538267c64cc7ae42bb6d06f0a51173ee","modified":1582648413607},{"_id":"themes/chiangmai/source/logo.png","hash":"51ef264939fa8451607edb0ea7006e57ec9d839d","modified":1582651978618},{"_id":"source/about/index.md","hash":"81dd80476e8f43ead8ed8db5d5011ddabf502fb6","modified":1576595811864},{"_id":"source/images/4.png","hash":"9562ac544be1416307e2f9baec005cbf63fa338c","modified":1563702972051},{"_id":"source/images/7.png","hash":"cf2fd8ccacca8711aab1f20a47aee1ed588f0028","modified":1563702972054},{"_id":"source/images/6.png","hash":"501ff19b19f68cbee448c31a29e14f3780de3669","modified":1563702972053},{"_id":"source/images/8.png","hash":"4a704988f02f415263c0e8c6180d041c384e9f58","modified":1563702972055},{"_id":"source/images/9.png","hash":"882c3b3e6c285cf63ca0e596d003730059d335c5","modified":1563702972056},{"_id":"source/images/discord.svg","hash":"b3b149c6d92e08f5efaa04f4331ac719f7a48f03","modified":1563702972061},{"_id":"source/images/powershell_windows_menu.png","hash":"e218efa8eb3f6916fe85fd64c3df8994a29d51b3","modified":1563702972082},{"_id":"source/images/powershell_run.png","hash":"15cd905d27cd37052ff27f1223cc8d38529ef8b1","modified":1563702972080},{"_id":"source/images/w-10.png","hash":"0c027ba200cb062d1edb9aa0a636761f324c5a98","modified":1563702972133},{"_id":"source/images/w-1.png","hash":"79083d03512bb1b827dc2e6a2f671ede3b85816c","modified":1563702972132},{"_id":"source/images/w-11.png","hash":"f5e9b999438e0930dc3ca7570676e356c1d50c35","modified":1563702972135},{"_id":"source/images/w-13.png","hash":"87d658b32dc9f146077fd424a94440678e36f722","modified":1563702972138},{"_id":"source/images/w-15.png","hash":"10cbf7a40bcaece732673b4d756d9397c8ef8b05","modified":1563702972140},{"_id":"source/images/w-12.png","hash":"2960a161ed22a7a3bcdfb39a67702e7a64a76cc4","modified":1563702972136},{"_id":"source/images/w-14.png","hash":"7ee7d24b1e5f942a9ca986b3e25f8fb61854be3d","modified":1563702972139},{"_id":"source/images/w-16.png","hash":"e4a672948149953682b964e28fbec2a61cd8b85d","modified":1563702972141},{"_id":"source/images/w-2.png","hash":"6d20e9a2c84a5e4a9b2feb1dfd19eff2ae50d932","modified":1563702972145},{"_id":"source/images/w-3.png","hash":"9b92d4148a34092924348a3b34dae636b1d51b6b","modified":1563702972147},{"_id":"source/images/w-6.png","hash":"0bde4d23d7f45916fcf26042ffe8a215a939f52f","modified":1563702972149},{"_id":"source/images/w-5.png","hash":"ee113309dbf3aafb6746768649161bfadeb0c9a9","modified":1563702972149},{"_id":"source/images/w-7.png","hash":"688a74350f6f2093e52c01ac71ff2e152454b424","modified":1563702972150},{"_id":"source/images/w-4.png","hash":"1932575041cbac92a44a4cddc5e75e85ba375e1a","modified":1563702972148},{"_id":"source/images/w-9.png","hash":"5f78466a845c85da1d5dc61830b3c7e0a25de455","modified":1563702972151},{"_id":"source/images/w-8.png","hash":"469a371aad974b6b185691fba9ae54b32ef9f4fc","modified":1563702972151},{"_id":"source/images/2.png","hash":"781e70a75392fe5200e4ccf22f779109404377f3","modified":1563702972047},{"_id":"themes/chiangmai/layout/mixins/adsense.pug","hash":"a4b120afcdd321cd3f732a8b84f99f65650f5a25","modified":1582647877757},{"_id":"themes/chiangmai/layout/mixins/main.pug","hash":"f4c6dbbf664c755dd9c740bce53d16b87460a02e","modified":1582647877757},{"_id":"themes/chiangmai/layout/mixins/paginator.pug","hash":"2a7d6fae4dacc7a470b3fc9261dab91bc948a6a5","modified":1582647877757},{"_id":"themes/chiangmai/layout/mixins/post.pug","hash":"e2329bef6e51dc876dc436105bef37b697e36c38","modified":1582647877758},{"_id":"themes/chiangmai/layout/partial/comment.pug","hash":"e77dc07d00ca84dd02771f308c432bd4391abe63","modified":1582647877758},{"_id":"themes/chiangmai/layout/partial/head.pug","hash":"fcc4b1d93a5a4d8bc1f9c9a9a9812d30bfaff12e","modified":1582647877759},{"_id":"themes/chiangmai/layout/partial/copyright.pug","hash":"c46d292b13efd6efdadad15dc416b0326cdd7502","modified":1582652992665},{"_id":"themes/chiangmai/layout/partial/layout.pug","hash":"a34c9a59c87344eef16573d3b99b49603f95437a","modified":1582647877759},{"_id":"themes/chiangmai/layout/partial/layout_post.pug","hash":"1324c716f3a6935986448ea38a49c51ac11de843","modified":1582647877759},{"_id":"themes/chiangmai/layout/partial/scripts.pug","hash":"c99e5c4ad6ba35cea4a2aba2fabb50277902db8c","modified":1582647877760},{"_id":"themes/chiangmai/source/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582726633849},{"_id":"themes/chiangmai/layout/partial/nav.pug","hash":"0cf24c116f4753eb93c64b2b6adf4b60d9282d28","modified":1582647877759},{"_id":"themes/chiangmai/source/image/profile.jpg","hash":"d9cd4c7c91d3f07995a80eb7f88d49b66e3dfbe5","modified":1582652713111},{"_id":"themes/chiangmai/source/scss/chiangmai.scss","hash":"8dbbb78901f2ae1cb1d5879a476b5df158e5a34f","modified":1582647877766},{"_id":"source/images/10.png","hash":"bf1c73b74df90fd8df2a71ba578cf7c35cadbdc1","modified":1563702972045},{"_id":"source/images/5.png","hash":"8f87a8442b0d8785e47bad5047c7a54904223b2c","modified":1563702972052},{"_id":"source/images/super_easy_shadowsocks_tutorial/11.png","hash":"85f72f3f9b5d73ec68f3167dbb6c0e472c4deea0","modified":1563702972089},{"_id":"source/images/super_easy_shadowsocks_tutorial/12.png","hash":"a37fa9b5b86fd64901d896cabe30be1df514c4cd","modified":1563702972090},{"_id":"source/images/super_easy_shadowsocks_tutorial/13.png","hash":"4a66240e054d03a161db708c69e62ab89d25af7c","modified":1563702972092},{"_id":"source/images/super_easy_shadowsocks_tutorial/14.png","hash":"60a214938a404e126d1447e7f8e0684c6835e029","modified":1563702972093},{"_id":"source/images/super_easy_shadowsocks_tutorial/17.png","hash":"ae36cc1c4158ea3ec6885c90c1bb99ae21cac5a8","modified":1563702972097},{"_id":"source/images/super_easy_shadowsocks_tutorial/16.png","hash":"415d5e7ef072524cf960529206dd9341deb1e513","modified":1563702972097},{"_id":"source/images/super_easy_shadowsocks_tutorial/15.png","hash":"413ad28d90e5a831cf9ea0da8a64e3b447c5b703","modified":1563702972096},{"_id":"source/images/super_easy_shadowsocks_tutorial/18.png","hash":"515c2d04770c44b7905e2696edb59bba25699f40","modified":1563702972099},{"_id":"source/images/super_easy_shadowsocks_tutorial/19.png","hash":"221346a4f20d7e9b34b66e94d16e3bd2beea29c6","modified":1563702972100},{"_id":"source/images/super_easy_shadowsocks_tutorial/20.png","hash":"0b8f2138845b33604e66aec5813c4d1314bf48f2","modified":1563702972102},{"_id":"source/images/super_easy_shadowsocks_tutorial/21.png","hash":"615dcbf0544c9444599acf130ea79b5dcce7bb2f","modified":1563702972103},{"_id":"source/images/super_easy_shadowsocks_tutorial/5.png","hash":"50f8b6d03c7675b052a8cb4fc7c7e609d53620f4","modified":1563702972111},{"_id":"source/images/super_easy_shadowsocks_tutorial/6.png","hash":"fd71d3066db38318e23a88d584db18cabb07f5bb","modified":1563702972115},{"_id":"source/images/super_easy_shadowsocks_tutorial/4.png","hash":"b4ac4871b93176a9de3d9bbb5e707cc9ccdc9931","modified":1563702972109},{"_id":"source/images/super_easy_shadowsocks_tutorial/22.png","hash":"c568b069033763c4fe5634c20307fb3bb31bc838","modified":1563702972104},{"_id":"source/images/super_easy_shadowsocks_tutorial/9.png","hash":"3b9d37f491ec7987dc72fccb3703efe7f8202526","modified":1563702972118},{"_id":"source/images/super_easy_shadowsocks_tutorial/7.png","hash":"58d25adf99b518e8c4d45914b8c15bab38ebf807","modified":1563702972116},{"_id":"source/images/super_easy_shadowsocks_tutorial/8.png","hash":"ab4c294dd18f832d87881fca5915037b09594d87","modified":1563702972117},{"_id":"themes/chiangmai/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582726594683},{"_id":"source/images/3.png","hash":"1957ff376163ac7acc1ff9dfc73726cd97a03df6","modified":1563702972050},{"_id":"themes/chiangmai/source/css/chiangmai.css","hash":"b18ea321d993f19de50d9a7209642c5e73bcf388","modified":1582726794101},{"_id":"source/images/goodbye.png","hash":"954e14d07dc233550892a4d6efd5737d8169654d","modified":1563702972068},{"_id":"source/images/super_easy_shadowsocks_tutorial/1.png","hash":"d525e72c89b66b49b612752d6e7d4ad270542a59","modified":1563702972084},{"_id":"source/images/super_easy_shadowsocks_tutorial/10.png","hash":"e48c991f1427c96cc0fd39f619fde6e993cd8ca0","modified":1563702972087},{"_id":"source/images/super_easy_shadowsocks_tutorial/2.png","hash":"48370cfa74054c9a5dbd30ecf727da8083874a51","modified":1563702972101},{"_id":"source/images/super_easy_shadowsocks_tutorial/3.png","hash":"d85b26048dfc9537e2b639b96bcc3e3ebc0e2f15","modified":1563702972106},{"_id":"themes/chiangmai/source/scss/_partial/archive.scss","hash":"edf43ec5df8e80b63bbb1a5d2ef7e5fc10750a34","modified":1582647877763},{"_id":"themes/chiangmai/source/scss/_partial/footer.scss","hash":"e993006beca76cdd77faa163461141080119b52a","modified":1582647877764},{"_id":"themes/chiangmai/source/scss/_partial/header.scss","hash":"9a397602cb4643b33c8d803e622fb726eb894638","modified":1582647877764},{"_id":"themes/chiangmai/source/scss/_partial/base.scss","hash":"974572d5cb3d761f1185896bc746137f288b3135","modified":1582647877764},{"_id":"themes/chiangmai/source/scss/_partial/mq.scss","hash":"bd3a2330a5af38165700aa4189b60f2456f0ea1e","modified":1582647877765},{"_id":"themes/chiangmai/source/scss/_partial/home.scss","hash":"387afc60857139f39d34216c104060fad7f1a7e1","modified":1582647877764},{"_id":"themes/chiangmai/source/scss/_partial/normalize.scss","hash":"fd0b27bed6f103ea95b08f698ea663ff576dbcf1","modified":1582647877765},{"_id":"themes/chiangmai/source/scss/_partial/post.scss","hash":"d6823c77a3db92f5a33e634a16f43b4182aba97c","modified":1582647877765},{"_id":"source/images/1.png","hash":"2bf856da13e5f898aa54d7aa1fb06a0b3b44736b","modified":1563702972043},{"_id":"source/images/aws_kr.png","hash":"aa630d7c300529bd4edcf1832950a6438cfad338","modified":1563702972061},{"_id":"source/images/hostus_hk.png","hash":"4b2ca286b209c40ffd84db057de2d06f3d21de4f","modified":1563702972078},{"_id":"source/images/vpsserver_jp.png","hash":"c73068c1c512c40ba983c29e95aebb6eae213113","modified":1563702972131},{"_id":"source/images/do_singapore.png","hash":"bf5750424505e9fa5a35f246188240c4a995e783","modified":1563702972066},{"_id":"public/atom.xml","hash":"290ab6ecef4c6823cbe3f4a8547240d23b4fcdba","modified":1582726899330},{"_id":"public/sitemap.xml","hash":"68ab0d6664e2f9b34b713b5fb81ee17dc62d91ee","modified":1582726899330},{"_id":"public/categories/index-1.html","hash":"1f93a3e33076e0a26ac601ff56dd96838136bdde","modified":1582726899330},{"_id":"public/categories/index.html","hash":"56f4e0abc09b2a0d2a7b904df1a9d510a416eb41","modified":1582726899330},{"_id":"public/tags/index.html","hash":"9ed9bf4f8323d10c491aab959331e0676e358b9f","modified":1582726899330},{"_id":"public/tags/index-1.html","hash":"f3b2fb3d27750fb8ef38fe1fc490419e0de8b0ea","modified":1582726899330},{"_id":"public/about/index.html","hash":"a03b48d3a11c6748e57e7ebd56a688cadf688e4c","modified":1582726899330},{"_id":"public/2018/06/17/Android复习篇-四大组件之Activity/index.html","hash":"046bb2156ab2d5646ab417298c43d6f7d0529010","modified":1582726899330},{"_id":"public/2018/06/16/Android流行第三方库教程 - 第二篇 EventBus/index.html","hash":"57f76498d463011e02c692f098d5d7822b3246ee","modified":1582726899330},{"_id":"public/2018/03/29/纪录博客域名更换/index.html","hash":"14c680152acfbb5c17f5f039a50682443b013bcc","modified":1582726899330},{"_id":"public/2018/01/14/GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices)/index.html","hash":"49115ffd7a8e91cf1f59b5c7eda3b1d0a9bf75d9","modified":1582726899330},{"_id":"public/2018/01/02/记录一下自己微信小游戏跳一跳被清零/index.html","hash":"4d6481619c6d60b989746fc25d8f8db149f86348","modified":1582726899330},{"_id":"public/2017/12/07/Android开发笔记/index.html","hash":"16a3bb689b012b612e494cdcc99b8333cc23cf07","modified":1582726899330},{"_id":"public/2017/09/17/Android-Oreo-Android-8-0-尝鲜刷机教程-奥利奥/index.html","hash":"89368dc233c4063eb133c505e9dccd41ce01ded4","modified":1582726899330},{"_id":"public/2017/08/13/用Kotlin开发，Android Studio配置Kotlin篇/index.html","hash":"5515e72b67b96ade4464ea59e626180512250abe","modified":1582726899330},{"_id":"public/2017/07/11/Git-SSH-Key-生成步骤/index.html","hash":"bb47cfb495ef273529450d0e6b8ba66a18885a5d","modified":1582726899330},{"_id":"public/2017/06/15/THANKS-GOOGLE/index.html","hash":"2d5444871ca66a53c90fb445521539fd0ce360a6","modified":1582726899330},{"_id":"public/2017/05/24/记今天-收到来自amazon的offer/index.html","hash":"fca03397afc9eaf4bdba20cdc675818db963d1ab","modified":1582726899330},{"_id":"public/2017/05/05/LineageOS下载地址-个人整理/index.html","hash":"f82288351abf078627c433ffdeb7ff7f3dc579ec","modified":1582726899330},{"_id":"public/2017/05/05/Android-手机刷第三方ROM教程，旧手机重生之术/index.html","hash":"6f2df6e900f3690dfb96f2c305bad1f50b5fabdb","modified":1582726899330},{"_id":"public/archives/index.html","hash":"fca2f3ad757a95352c5e15d21ec49053fdf09131","modified":1582726899330},{"_id":"public/archives/page/2/index.html","hash":"14df112cdfa6e1221308a0c9ca084f7143093fba","modified":1582726899330},{"_id":"public/archives/page/3/index.html","hash":"8a0ddb43e96cd05b7b0cfc684d9015a87480d762","modified":1582726899330},{"_id":"public/archives/2017/index.html","hash":"8cb90d529912e0a45e53a0a14e2f48fbc04b8345","modified":1582726899330},{"_id":"public/archives/2017/page/2/index.html","hash":"2800870a1fb56d9fa9df828651d2b2d47c448c02","modified":1582726899330},{"_id":"public/archives/2017/04/index.html","hash":"8f34b7f9efd96bd7596dce80e4cb6c91fd55efe4","modified":1582726899330},{"_id":"public/archives/2017/05/index.html","hash":"a61a413c1ff7e9fe0152cc3cae79b95e023eec2e","modified":1582726899330},{"_id":"public/archives/2017/06/index.html","hash":"d54d069b239e9e2013008c9c80b4d84f64bb6599","modified":1582726899330},{"_id":"public/archives/2017/07/index.html","hash":"38f5982e1f3588735710ef0b892f018b95edc1bd","modified":1582726899330},{"_id":"public/archives/2017/08/index.html","hash":"9d695669056865e0cabbe2153389eb70f5ffe9f3","modified":1582726899330},{"_id":"public/archives/2017/09/index.html","hash":"fee3497ed2a9cc61511cf1ed2feddb01eed4ee32","modified":1582726899330},{"_id":"public/archives/2017/11/index.html","hash":"fbfdf8f33fcdd60a8ac99aacab961a23b0e6e1b1","modified":1582726899330},{"_id":"public/archives/2017/12/index.html","hash":"e9219c9a31e4cde3abc4d7a8cd9d1451b841f552","modified":1582726899330},{"_id":"public/archives/2018/index.html","hash":"fff434f7c05088520522811fc9f6a19b1847ebe7","modified":1582726899330},{"_id":"public/archives/2018/01/index.html","hash":"c50a44f164f04079315b14a5df672f91f686a012","modified":1582726899330},{"_id":"public/archives/2018/03/index.html","hash":"8e10aebb4e1c25ff1675f1c81c829782bff381bd","modified":1582726899330},{"_id":"public/archives/2018/06/index.html","hash":"f2d5e78ef0bb1cb837cd5e1a1c02bc0b96efd878","modified":1582726899330},{"_id":"public/archives/2019/index.html","hash":"3fb0fb14b5f9d93eb62103b41a89392af94e2305","modified":1582726899330},{"_id":"public/archives/2019/05/index.html","hash":"79837b010a25c52200fc34ebaf41aa8c66387f87","modified":1582726899330},{"_id":"public/archives/2019/06/index.html","hash":"515f07a9f4cae897a3b34670858a7b585c8fee10","modified":1582726899330},{"_id":"public/archives/2019/08/index.html","hash":"dd7a36f3f51c1f7c8331073776315595ac022e9d","modified":1582726899330},{"_id":"public/categories/Android/index.html","hash":"6620634772fb65df6f07d24612f448d6740d63e0","modified":1582726899330},{"_id":"public/categories/刷机/index.html","hash":"96c3d79f2c7c3bb4e848fe87a8395df55b1bd8f6","modified":1582726899330},{"_id":"public/categories/笔记/index.html","hash":"38f5982e1f3588735710ef0b892f018b95edc1bd","modified":1582726899330},{"_id":"public/categories/博客/index.html","hash":"8f34b7f9efd96bd7596dce80e4cb6c91fd55efe4","modified":1582726899330},{"_id":"public/categories/开发/index.html","hash":"0a8eb826ca2b50dad24e362e75332802fbdd2ec8","modified":1582726899330},{"_id":"public/categories/LineageOS/index.html","hash":"556bae5ce6b3a25a0393ef1f96359bfec755a3d2","modified":1582726899330},{"_id":"public/categories/note/index.html","hash":"bc3121a765309f11d9f6d4a1cf6798aa66754bc2","modified":1582726899330},{"_id":"public/categories/翻墙/index.html","hash":"beedfadd8bac54a9c2ce7b08a9e328536bebbf8f","modified":1582726899330},{"_id":"public/categories/Kotlin/index.html","hash":"0e32a2316700747706b6ee8c1bee1433e23b72a6","modified":1582726899330},{"_id":"public/categories/测试/index.html","hash":"dd7a36f3f51c1f7c8331073776315595ac022e9d","modified":1582726899330},{"_id":"public/categories/日常/index.html","hash":"8a37da61e8adbb8ef61cb7529899a58ba24b11b1","modified":1582726899330},{"_id":"public/index.html","hash":"e8432d17baef87083c737f61f36ad415fd13b1df","modified":1582726899330},{"_id":"public/page/2/index.html","hash":"fe6a61aef10516019687221ce71fda3417120213","modified":1582726899330},{"_id":"public/page/3/index.html","hash":"d9f19cf5eec764c44a761331499307fa74b0cd84","modified":1582726899330},{"_id":"public/tags/Android/index.html","hash":"1114ccce8a5c7d805aecbb6c94649fe4dd1da419","modified":1582726899330},{"_id":"public/tags/about-page/index.html","hash":"5c629c2d9e25322375e792be6f9eabb4142ffb98","modified":1582726899330},{"_id":"public/tags/刷机/index.html","hash":"8e911e72501dc3e67f24ac820183c7c2d32dac2b","modified":1582726899330},{"_id":"public/tags/第三方ROM/index.html","hash":"8e911e72501dc3e67f24ac820183c7c2d32dac2b","modified":1582726899330},{"_id":"public/tags/Matisse/index.html","hash":"3961891abddc650e9fe118fc934274f1a16db0a3","modified":1582726899330},{"_id":"public/tags/Git/index.html","hash":"46a2bf5a9fdde950084d9f866f71e72fcf5cd739","modified":1582726899330},{"_id":"public/tags/Hexo/index.html","hash":"5520dda43cf1eed14cf11c2a1e54a43440612023","modified":1582726899330},{"_id":"public/tags/Github/index.html","hash":"5520dda43cf1eed14cf11c2a1e54a43440612023","modified":1582726899330},{"_id":"public/tags/博客/index.html","hash":"5520dda43cf1eed14cf11c2a1e54a43440612023","modified":1582726899330},{"_id":"public/tags/GenyMotion/index.html","hash":"87a2c1667a4be6788bb02a966fdb3b6e2cd8b561","modified":1582726899330},{"_id":"public/tags/下载地址/index.html","hash":"65aa7e4d304e3fc39e6b414d99dc0561bb98dd1a","modified":1582726899330},{"_id":"public/tags/LineageOS/index.html","hash":"65aa7e4d304e3fc39e6b414d99dc0561bb98dd1a","modified":1582726899330},{"_id":"public/tags/google/index.html","hash":"6e6768937620b6e67828d1dcd7008240604fb4e7","modified":1582726899330},{"_id":"public/tags/shadowsocks/index.html","hash":"60f218e60192bfdf5c2f984dea7b1758689e73e8","modified":1582726899330},{"_id":"public/tags/outline/index.html","hash":"29baa051c42dce8c4c15b5725c36261b6c86303e","modified":1582726899330},{"_id":"public/tags/翻墙/index.html","hash":"60f218e60192bfdf5c2f984dea7b1758689e73e8","modified":1582726899330},{"_id":"public/tags/Kotlin/index.html","hash":"59b8e987c657281fa7c6425d57839bf101956e2a","modified":1582726899330},{"_id":"public/tags/ssr服务器/index.html","hash":"d6cf8f68226c6146ca69135b7de92656bd3664f1","modified":1582726899330},{"_id":"public/tags/note/index.html","hash":"a4a6963370aa66fd3cad9a2a3bbac99734fce9e6","modified":1582726899330},{"_id":"public/tags/offer/index.html","hash":"a4a6963370aa66fd3cad9a2a3bbac99734fce9e6","modified":1582726899330},{"_id":"public/tags/restful/index.html","hash":"10f0ad817131f960b1c1bc9412f8065cf3a2b59b","modified":1582726899330},{"_id":"public/tags/api/index.html","hash":"10f0ad817131f960b1c1bc9412f8065cf3a2b59b","modified":1582726899330},{"_id":"public/tags/免费/index.html","hash":"10f0ad817131f960b1c1bc9412f8065cf3a2b59b","modified":1582726899330},{"_id":"public/tags/测试/index.html","hash":"10f0ad817131f960b1c1bc9412f8065cf3a2b59b","modified":1582726899330},{"_id":"public/tags/微信/index.html","hash":"1503a8f81862f8fdfb314aba34a30d2676faf323","modified":1582726899330},{"_id":"public/tags/小游戏/index.html","hash":"1503a8f81862f8fdfb314aba34a30d2676faf323","modified":1582726899330},{"_id":"public/tags/跳一跳/index.html","hash":"1503a8f81862f8fdfb314aba34a30d2676faf323","modified":1582726899330},{"_id":"public/2019/08/11/给编程初学者的免费RESTful API测试接口/index.html","hash":"85ab5fb923c9205035d8487a46a0aa4c459367e6","modified":1582726899330},{"_id":"public/2019/06/01/如何启用Shadowsocks的多端口/index.html","hash":"859e1eb653e9fd47287b0c768c9e79d1e1a611d8","modified":1582726899330},{"_id":"public/2019/05/22/给小白的超简单shadowsocks翻墙教程(outline)/index.html","hash":"bc6e1ddd06f61e735a6360a4bda66a454b6244dc","modified":1582726899330},{"_id":"public/2019/05/21/给小白的Shadowsocks翻墙教程(一键脚本)/index.html","hash":"d28c5fae7830ef0126e496b70833a86876f28548","modified":1582726899330},{"_id":"public/2018/06/15/Android流行第三方库教程 - 第一篇 ButterKnife/index.html","hash":"1d486324f705e4494c74482c7fe601a90725e27e","modified":1582726899330},{"_id":"public/2017/12/07/在Android中创建类似Instagram的渐变背景/index.html","hash":"941e5474bee8d046e53338f5504994633d3d4b77","modified":1582726899330},{"_id":"public/2017/11/04/自建ssr服务器教程/index.html","hash":"0c538317b46616a2fd930fddc6579ce44bc6ca3c","modified":1582726899330},{"_id":"public/2017/08/25/Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能/index.html","hash":"ad28a33cbaa80989087ffa5b222faae61f8be1ee","modified":1582726899330},{"_id":"public/2017/05/02/Android-2分钟创建一个好看的关于页面/index.html","hash":"117bfca35ed352ca88089f04820e5a52e111362c","modified":1582726899330},{"_id":"public/2017/04/29/Hexo-Github-pages-创建一个属于自己的博客/index.html","hash":"c814b28c06b51c0a8f02be7f290038e7200ca8db","modified":1582726899330},{"_id":"public/favicon.jpg","hash":"0b6c1d22a04ba6ca18afdb2d1ed386d19b487867","modified":1582726899330},{"_id":"public/logo.png","hash":"51ef264939fa8451607edb0ea7006e57ec9d839d","modified":1582726899330},{"_id":"public/images/7.png","hash":"cf2fd8ccacca8711aab1f20a47aee1ed588f0028","modified":1582726899330},{"_id":"public/images/powershell_run.png","hash":"15cd905d27cd37052ff27f1223cc8d38529ef8b1","modified":1582726899330},{"_id":"public/images/powershell_windows_menu.png","hash":"e218efa8eb3f6916fe85fd64c3df8994a29d51b3","modified":1582726899330},{"_id":"public/images/w-10.png","hash":"0c027ba200cb062d1edb9aa0a636761f324c5a98","modified":1582726899330},{"_id":"public/images/w-11.png","hash":"f5e9b999438e0930dc3ca7570676e356c1d50c35","modified":1582726899330},{"_id":"public/images/w-13.png","hash":"87d658b32dc9f146077fd424a94440678e36f722","modified":1582726899330},{"_id":"public/images/w-15.png","hash":"10cbf7a40bcaece732673b4d756d9397c8ef8b05","modified":1582726899330},{"_id":"public/images/w-14.png","hash":"7ee7d24b1e5f942a9ca986b3e25f8fb61854be3d","modified":1582726899330},{"_id":"public/images/w-16.png","hash":"e4a672948149953682b964e28fbec2a61cd8b85d","modified":1582726899330},{"_id":"public/images/w-3.png","hash":"9b92d4148a34092924348a3b34dae636b1d51b6b","modified":1582726899330},{"_id":"public/images/w-2.png","hash":"6d20e9a2c84a5e4a9b2feb1dfd19eff2ae50d932","modified":1582726899330},{"_id":"public/images/w-6.png","hash":"0bde4d23d7f45916fcf26042ffe8a215a939f52f","modified":1582726899330},{"_id":"public/images/w-5.png","hash":"ee113309dbf3aafb6746768649161bfadeb0c9a9","modified":1582726899330},{"_id":"public/images/w-7.png","hash":"688a74350f6f2093e52c01ac71ff2e152454b424","modified":1582726899330},{"_id":"public/images/w-4.png","hash":"1932575041cbac92a44a4cddc5e75e85ba375e1a","modified":1582726899330},{"_id":"public/images/w-8.png","hash":"469a371aad974b6b185691fba9ae54b32ef9f4fc","modified":1582726899330},{"_id":"public/images/w-9.png","hash":"5f78466a845c85da1d5dc61830b3c7e0a25de455","modified":1582726899330},{"_id":"public/image/profile.jpg","hash":"d9cd4c7c91d3f07995a80eb7f88d49b66e3dfbe5","modified":1582726899330},{"_id":"public/scss/chiangmai.scss","hash":"8dbbb78901f2ae1cb1d5879a476b5df158e5a34f","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/11.png","hash":"85f72f3f9b5d73ec68f3167dbb6c0e472c4deea0","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/12.png","hash":"a37fa9b5b86fd64901d896cabe30be1df514c4cd","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/13.png","hash":"4a66240e054d03a161db708c69e62ab89d25af7c","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/14.png","hash":"60a214938a404e126d1447e7f8e0684c6835e029","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/17.png","hash":"ae36cc1c4158ea3ec6885c90c1bb99ae21cac5a8","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/16.png","hash":"415d5e7ef072524cf960529206dd9341deb1e513","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/15.png","hash":"413ad28d90e5a831cf9ea0da8a64e3b447c5b703","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/19.png","hash":"221346a4f20d7e9b34b66e94d16e3bd2beea29c6","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/18.png","hash":"515c2d04770c44b7905e2696edb59bba25699f40","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/20.png","hash":"0b8f2138845b33604e66aec5813c4d1314bf48f2","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/21.png","hash":"615dcbf0544c9444599acf130ea79b5dcce7bb2f","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/5.png","hash":"50f8b6d03c7675b052a8cb4fc7c7e609d53620f4","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/6.png","hash":"fd71d3066db38318e23a88d584db18cabb07f5bb","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/4.png","hash":"b4ac4871b93176a9de3d9bbb5e707cc9ccdc9931","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/22.png","hash":"c568b069033763c4fe5634c20307fb3bb31bc838","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/9.png","hash":"3b9d37f491ec7987dc72fccb3703efe7f8202526","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/7.png","hash":"58d25adf99b518e8c4d45914b8c15bab38ebf807","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/8.png","hash":"ab4c294dd18f832d87881fca5915037b09594d87","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/1.png","hash":"d525e72c89b66b49b612752d6e7d4ad270542a59","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/2.png","hash":"48370cfa74054c9a5dbd30ecf727da8083874a51","modified":1582726899330},{"_id":"public/images/4.png","hash":"9562ac544be1416307e2f9baec005cbf63fa338c","modified":1582726899330},{"_id":"public/images/6.png","hash":"501ff19b19f68cbee448c31a29e14f3780de3669","modified":1582726899330},{"_id":"public/images/8.png","hash":"4a704988f02f415263c0e8c6180d041c384e9f58","modified":1582726899330},{"_id":"public/images/discord.svg","hash":"b3b149c6d92e08f5efaa04f4331ac719f7a48f03","modified":1582726899330},{"_id":"public/images/9.png","hash":"882c3b3e6c285cf63ca0e596d003730059d335c5","modified":1582726899330},{"_id":"public/images/w-1.png","hash":"79083d03512bb1b827dc2e6a2f671ede3b85816c","modified":1582726899330},{"_id":"public/images/w-12.png","hash":"2960a161ed22a7a3bcdfb39a67702e7a64a76cc4","modified":1582726899330},{"_id":"public/images/2.png","hash":"781e70a75392fe5200e4ccf22f779109404377f3","modified":1582726899330},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/10.png","hash":"e48c991f1427c96cc0fd39f619fde6e993cd8ca0","modified":1582726899330},{"_id":"public/images/super_easy_shadowsocks_tutorial/3.png","hash":"d85b26048dfc9537e2b639b96bcc3e3ebc0e2f15","modified":1582726899330},{"_id":"public/css/chiangmai.css","hash":"b18ea321d993f19de50d9a7209642c5e73bcf388","modified":1582726899330},{"_id":"public/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1582726899330},{"_id":"public/images/10.png","hash":"bf1c73b74df90fd8df2a71ba578cf7c35cadbdc1","modified":1582726899330},{"_id":"public/images/5.png","hash":"8f87a8442b0d8785e47bad5047c7a54904223b2c","modified":1582726899330},{"_id":"public/images/3.png","hash":"1957ff376163ac7acc1ff9dfc73726cd97a03df6","modified":1582726899330},{"_id":"public/images/goodbye.png","hash":"954e14d07dc233550892a4d6efd5737d8169654d","modified":1582726899330},{"_id":"public/images/1.png","hash":"2bf856da13e5f898aa54d7aa1fb06a0b3b44736b","modified":1582726899330},{"_id":"public/images/aws_kr.png","hash":"aa630d7c300529bd4edcf1832950a6438cfad338","modified":1582726899330},{"_id":"public/images/do_singapore.png","hash":"bf5750424505e9fa5a35f246188240c4a995e783","modified":1582726899330},{"_id":"public/images/vpsserver_jp.png","hash":"c73068c1c512c40ba983c29e95aebb6eae213113","modified":1582726899330},{"_id":"public/images/hostus_hk.png","hash":"4b2ca286b209c40ffd84db057de2d06f3d21de4f","modified":1582726899330}],"Category":[{"name":"Android","_id":"ck73eqc5d0004l0oncfglhpu9"},{"name":"刷机","_id":"ck73eqc5k000bl0onf87dgkrz"},{"name":"笔记","_id":"ck73eqc5s000nl0on12nb4w9m"},{"name":"博客","_id":"ck73eqc5w000wl0ondxvd6vx8"},{"name":"开发","_id":"ck73eqc610011l0onfua9bjaf"},{"name":"LineageOS","_id":"ck73eqc630018l0ondvfybg5x"},{"name":"note","_id":"ck73eqc66001el0on6bsl1udl"},{"name":"翻墙","_id":"ck73eqc6a001ml0onh4032swt"},{"name":"Kotlin","_id":"ck73eqc6d001sl0ong2i97ua5"},{"name":"测试","_id":"ck73eqc6g0025l0oneq78bo5g"},{"name":"日常","_id":"ck73eqc6h002bl0on236429wt"}],"Data":[],"Page":[{"title":"categories","date":"2018-01-01T07:05:37.000Z","_content":"","source":"categories/index-1.md","raw":"---\ntitle: categories\ndate: 2018-01-01 15:05:37\n---\n","updated":"2019-01-21T15:52:07.526Z","path":"categories/index-1.html","comments":1,"layout":"page","_id":"ck73eqc5a0001l0on36v4frn3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-05-02T07:43:31.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-05-02 15:43:31\ntype: \"categories\"\nlayout: categories\ncomments: false\n---\n","updated":"2019-01-21T15:52:07.526Z","path":"categories/index.html","_id":"ck73eqc5c0003l0on7ex1celc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-29T06:03:24.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-29 14:03:24\ntype: \"tags\"\nlayout: tags\ncomments: false\n---\n","updated":"2019-01-21T15:52:07.526Z","path":"tags/index.html","_id":"ck73eqc5g0007l0onbvlz3wbq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-01-01T07:04:45.000Z","_content":"","source":"tags/index-1.md","raw":"---\ntitle: tags\ndate: 2018-01-01 15:04:45\n---\n","updated":"2019-01-21T15:52:07.526Z","path":"tags/index-1.html","comments":1,"layout":"page","_id":"ck73eqc5i0009l0on6xg35z4s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2019-06-01T07:00:36.000Z","type":"about","_content":"\n\n### 关于我\n个人介绍：一个喜爱喝茶🍵，咖啡☕和吃巧克力🍫，具有故事情节的男人，尤爱有故事的物件\n\n擅长：Android  前端 Java后端\n\n在学校学的技能： Adobe大部分软件和Maya 3D的基本操作，写一些简单的网页\n\n喜好：日漫，各种奇奇怪怪的东西\n\n语言能力：英语(CET6 462)\n\n家乡：中国 广东 江门\n\n现在在 深圳\n\n学历：本科 普通二本学校\n\nLinkedin:https://www.linkedin.com/in/zhaoweihao/?locale=en_US\n\nGithub:https://github.com/zhaoweih\n\n简历(🀄️):https://resource.zhaoweihao.dev/resume/resume_cn.pdf\n\nResume(English):https://resource.zhaoweihao.dev/resume/resume_en.pdf\n\n### 如何找我\n邮箱📮:zhaoweihao.dev@gmail.com\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2019-06-01 15:00:36\ntype: \"about\"\n---\n\n\n### 关于我\n个人介绍：一个喜爱喝茶🍵，咖啡☕和吃巧克力🍫，具有故事情节的男人，尤爱有故事的物件\n\n擅长：Android  前端 Java后端\n\n在学校学的技能： Adobe大部分软件和Maya 3D的基本操作，写一些简单的网页\n\n喜好：日漫，各种奇奇怪怪的东西\n\n语言能力：英语(CET6 462)\n\n家乡：中国 广东 江门\n\n现在在 深圳\n\n学历：本科 普通二本学校\n\nLinkedin:https://www.linkedin.com/in/zhaoweihao/?locale=en_US\n\nGithub:https://github.com/zhaoweih\n\n简历(🀄️):https://resource.zhaoweihao.dev/resume/resume_cn.pdf\n\nResume(English):https://resource.zhaoweihao.dev/resume/resume_en.pdf\n\n### 如何找我\n邮箱📮:zhaoweihao.dev@gmail.com\n","updated":"2019-12-17T15:16:51.864Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck73eqcbz003ml0on0q8k3e78","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>个人介绍：一个喜爱喝茶🍵，咖啡☕和吃巧克力🍫，具有故事情节的男人，尤爱有故事的物件</p>\n<p>擅长：Android  前端 Java后端</p>\n<p>在学校学的技能： Adobe大部分软件和Maya 3D的基本操作，写一些简单的网页</p>\n<p>喜好：日漫，各种奇奇怪怪的东西</p>\n<p>语言能力：英语(CET6 462)</p>\n<p>家乡：中国 广东 江门</p>\n<p>现在在 深圳</p>\n<p>学历：本科 普通二本学校</p>\n<p>Linkedin:<a href=\"https://www.linkedin.com/in/zhaoweihao/?locale=en_US\" target=\"_blank\" rel=\"noopener\">https://www.linkedin.com/in/zhaoweihao/?locale=en_US</a></p>\n<p>Github:<a href=\"https://github.com/zhaoweih\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih</a></p>\n<p>简历(🀄️):<a href=\"https://resource.zhaoweihao.dev/resume/resume_cn.pdf\" target=\"_blank\" rel=\"noopener\">https://resource.zhaoweihao.dev/resume/resume_cn.pdf</a></p>\n<p>Resume(English):<a href=\"https://resource.zhaoweihao.dev/resume/resume_en.pdf\" target=\"_blank\" rel=\"noopener\">https://resource.zhaoweihao.dev/resume/resume_en.pdf</a></p>\n<h3 id=\"如何找我\"><a href=\"#如何找我\" class=\"headerlink\" title=\"如何找我\"></a>如何找我</h3><p>邮箱📮:<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>个人介绍：一个喜爱喝茶🍵，咖啡☕和吃巧克力🍫，具有故事情节的男人，尤爱有故事的物件</p>\n<p>擅长：Android  前端 Java后端</p>\n<p>在学校学的技能： Adobe大部分软件和Maya 3D的基本操作，写一些简单的网页</p>\n<p>喜好：日漫，各种奇奇怪怪的东西</p>\n<p>语言能力：英语(CET6 462)</p>\n<p>家乡：中国 广东 江门</p>\n<p>现在在 深圳</p>\n<p>学历：本科 普通二本学校</p>\n<p>Linkedin:<a href=\"https://www.linkedin.com/in/zhaoweihao/?locale=en_US\" target=\"_blank\" rel=\"noopener\">https://www.linkedin.com/in/zhaoweihao/?locale=en_US</a></p>\n<p>Github:<a href=\"https://github.com/zhaoweih\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih</a></p>\n<p>简历(🀄️):<a href=\"https://resource.zhaoweihao.dev/resume/resume_cn.pdf\" target=\"_blank\" rel=\"noopener\">https://resource.zhaoweihao.dev/resume/resume_cn.pdf</a></p>\n<p>Resume(English):<a href=\"https://resource.zhaoweihao.dev/resume/resume_en.pdf\" target=\"_blank\" rel=\"noopener\">https://resource.zhaoweihao.dev/resume/resume_en.pdf</a></p>\n<h3 id=\"如何找我\"><a href=\"#如何找我\" class=\"headerlink\" title=\"如何找我\"></a>如何找我</h3><p>邮箱📮:<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n"}],"Post":[{"title":"Android:2分钟创建一个好看的关于页面","date":"2017-05-02T12:44:32.000Z","_content":"# 写在前面\n\n通常关于页面是我们开发的时候最容易忽视的页面，一般我都是留在最后才去设计关于页面，但是虽然关于页面并不起眼但是也不能忽视它的作用，所以我就在想能不能在很短时间内创建一个蛮好看的关于页面呢，我在Github找到了这个开源库，介绍里号称可以在两分钟内创建一个好看的关于页面。\n\n- Github原地址：https://github.com/medyo/android-about-page\n\n![](http://op4e089f0.bkt.clouddn.com/cover.png)\n\n# 用法\n\n这个开源库的用法也很简单\n\n首先在app/build.gradle文件中声明这个库的依赖：\n```\ndependencies {\n    compile 'com.github.medyo:android-about-page:1.2'\n}\n```\n\n然后再修改关于（例如是MainActivity）页面的代码：\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        View aboutPage = new AboutPage(this)\n                .isRTL(false)\n                .setImage(R.drawable.girl)//图片\n                .setDescription(\"道理我都懂，可我就是不听啊\")//介绍\n                .addItem(new Element().setTitle(\"Version 1.0\"))\n                .addGroup(\"与我联系\")\n                .addEmail(\"zhaoweihaochn@foxmail.com\")//邮箱\n                .addWebsite(\"http://zhaoweihao.me\")//网站\n                .addPlayStore(\"com.example.abouttest\")//应用商店\n                .addGitHub(\"zhaoweihaoChina\")//github\n                .create();\n\n        setContentView(aboutPage);\n    }\n}\n        \n```\n\n运行到模拟器\n\n![](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170502QQ%E5%9B%BE%E7%89%8720170502213648.png)\n\n这样一个比较好看的关于页面就创建完毕了\n\n这个开源库让我们建立关于页面的速度快了不是一点\n\n# 更多\n\n我们一般不会这样添加一个关于页面，因为现在要用到Toolbar而不是默认的Actionbar\n\n先修改values/style 换成NoActionBar主题\n```\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ......\n    </style>\n\n</resources>\n\n```\n\n所以我们先在app/res/layout里面新建一个about_layout.xml\n\n```\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?attr/actionBarSize\"\n        android:background=\"?attr/colorPrimary\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n        ></android.support.v7.widget.Toolbar>\n\n    </android.support.design.widget.AppBarLayout>\n    \n    <RelativeLayout\n        android:id=\"@+id/relativeLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n        >\n        \n        \n    </RelativeLayout>\n\n</android.support.design.widget.CoordinatorLayout>\n\n\n```\n\n\n然后在包下创建AboutActivity\n\n```\n\npackage com.example.abouttest;\n\nimport android.os.Bundle;\n......\n\n/**\n * Created by Administrator on 2017/5/2.\n */\n\npublic class AboutActivity extends AppCompatActivity{\n\n    private RelativeLayout relativeLayout;\n    \n    private Toolbar toolbar;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.about_layout);\n        \n        initViews();\n\n        View aboutPage = new AboutPage(this)\n                .isRTL(false)\n                .setImage(R.drawable.girl)//图片\n                .setDescription(\"道理我都懂，可我就是不听啊\")//介绍\n                .addItem(new Element().setTitle(\"Version 1.0\"))\n                .addGroup(\"与我联系\")\n                .addEmail(\"zhaoweihaochn@foxmail.com\")//邮箱\n                .addWebsite(\"http://zhaoweihao.me\")//网站\n                .addPlayStore(\"com.example.abouttest\")//应用商店\n                .addGitHub(\"zhaoweihaoChina\")//github\n                .create();\n\n        relativeLayout.addView(aboutPage);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()){\n            case android.R.id.home:\n                finish();\n                break;\n            default:\n\n        }\n        return true;\n    }\n    \n    private void initViews(){\n        relativeLayout= (RelativeLayout) findViewById(R.id.relativeLayout);\n        toolbar= (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n    }\n\n\n}\n\n\n\n```\n\n最后别忘了在AndroidManifest.xml中声明AboutActivity\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.abouttest\">\n\n    <application\n       ......\n        <activity android:name=\".AboutActivity\"\n        android:label=\"关于\"\n        >\n        </activity>\n    </application>\n\n</manifest>\n\n```\n\n运行到手机，查看\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_2017-05-02-22-13-03-092_com.example.ab.png)\n\n\n虽然效果看上去和上面没有区别，但是我们的aboutpage是在relativelayout里面的，ActionBar也改为Toolbar\n\n# 添加自定义Element\n\n以APP版本为例子 :\n```\nElement versionElement = new Element();\nversionElement.setTitle(\"Version 6.2\");\naddItem(versionElement)\n\n```\n当前可用的Element类型\n```\nsetTitle(String)\t//设置element的标题\nsetIconTint(Int)\t//设置element的颜色\nsetIconDrawable(Int)\t//设置element的图标\nsetValue(String)\t//Set Element value like Facebook ID\nsetIntent(Intent)\t//Set intent to be called on onClickListener\nsetGravity(Gravity)\t//Set a Gravity for the element\nsetOnClickListener(View.OnClickListener)\t//如果Intent不是你想要的，可以在这里重写\n```\n\n\n# 写在最后\n\n如果你阅读本文后受益匪浅，可以不妨请我喝杯咖啡[微信扫描下发二维码向我转账]\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)\n\n# 联系方式\n- 邮箱:zhaoweihaochn@foxmail.com\n- 博客:[zhaoweihao.me](http://zhaoweihao.me)\n- Github:https://github.com/zhaoweihaoChina\n\n\n","source":"_posts/Android-2分钟创建一个好看的关于页面.md","raw":"---\ntitle: 'Android:2分钟创建一个好看的关于页面'\ndate: 2017-05-02 20:44:32\ntags: [Android,about-page]\ncategories: Android\n---\n# 写在前面\n\n通常关于页面是我们开发的时候最容易忽视的页面，一般我都是留在最后才去设计关于页面，但是虽然关于页面并不起眼但是也不能忽视它的作用，所以我就在想能不能在很短时间内创建一个蛮好看的关于页面呢，我在Github找到了这个开源库，介绍里号称可以在两分钟内创建一个好看的关于页面。\n\n- Github原地址：https://github.com/medyo/android-about-page\n\n![](http://op4e089f0.bkt.clouddn.com/cover.png)\n\n# 用法\n\n这个开源库的用法也很简单\n\n首先在app/build.gradle文件中声明这个库的依赖：\n```\ndependencies {\n    compile 'com.github.medyo:android-about-page:1.2'\n}\n```\n\n然后再修改关于（例如是MainActivity）页面的代码：\n```\npublic class MainActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        View aboutPage = new AboutPage(this)\n                .isRTL(false)\n                .setImage(R.drawable.girl)//图片\n                .setDescription(\"道理我都懂，可我就是不听啊\")//介绍\n                .addItem(new Element().setTitle(\"Version 1.0\"))\n                .addGroup(\"与我联系\")\n                .addEmail(\"zhaoweihaochn@foxmail.com\")//邮箱\n                .addWebsite(\"http://zhaoweihao.me\")//网站\n                .addPlayStore(\"com.example.abouttest\")//应用商店\n                .addGitHub(\"zhaoweihaoChina\")//github\n                .create();\n\n        setContentView(aboutPage);\n    }\n}\n        \n```\n\n运行到模拟器\n\n![](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170502QQ%E5%9B%BE%E7%89%8720170502213648.png)\n\n这样一个比较好看的关于页面就创建完毕了\n\n这个开源库让我们建立关于页面的速度快了不是一点\n\n# 更多\n\n我们一般不会这样添加一个关于页面，因为现在要用到Toolbar而不是默认的Actionbar\n\n先修改values/style 换成NoActionBar主题\n```\n<resources>\n\n    <!-- Base application theme. -->\n    <style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\">\n       ......\n    </style>\n\n</resources>\n\n```\n\n所以我们先在app/res/layout里面新建一个about_layout.xml\n\n```\n\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.support.design.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:orientation=\"vertical\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\">\n    \n    <android.support.design.widget.AppBarLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\">\n\n    <android.support.v7.widget.Toolbar\n        android:id=\"@+id/toolbar\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"?attr/actionBarSize\"\n        android:background=\"?attr/colorPrimary\"\n        android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"\n        app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"\n        ></android.support.v7.widget.Toolbar>\n\n    </android.support.design.widget.AppBarLayout>\n    \n    <RelativeLayout\n        android:id=\"@+id/relativeLayout\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"\n        >\n        \n        \n    </RelativeLayout>\n\n</android.support.design.widget.CoordinatorLayout>\n\n\n```\n\n\n然后在包下创建AboutActivity\n\n```\n\npackage com.example.abouttest;\n\nimport android.os.Bundle;\n......\n\n/**\n * Created by Administrator on 2017/5/2.\n */\n\npublic class AboutActivity extends AppCompatActivity{\n\n    private RelativeLayout relativeLayout;\n    \n    private Toolbar toolbar;\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.about_layout);\n        \n        initViews();\n\n        View aboutPage = new AboutPage(this)\n                .isRTL(false)\n                .setImage(R.drawable.girl)//图片\n                .setDescription(\"道理我都懂，可我就是不听啊\")//介绍\n                .addItem(new Element().setTitle(\"Version 1.0\"))\n                .addGroup(\"与我联系\")\n                .addEmail(\"zhaoweihaochn@foxmail.com\")//邮箱\n                .addWebsite(\"http://zhaoweihao.me\")//网站\n                .addPlayStore(\"com.example.abouttest\")//应用商店\n                .addGitHub(\"zhaoweihaoChina\")//github\n                .create();\n\n        relativeLayout.addView(aboutPage);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()){\n            case android.R.id.home:\n                finish();\n                break;\n            default:\n\n        }\n        return true;\n    }\n    \n    private void initViews(){\n        relativeLayout= (RelativeLayout) findViewById(R.id.relativeLayout);\n        toolbar= (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        ActionBar actionBar=getSupportActionBar();\n        if(actionBar!=null){\n            actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n    }\n\n\n}\n\n\n\n```\n\n最后别忘了在AndroidManifest.xml中声明AboutActivity\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.abouttest\">\n\n    <application\n       ......\n        <activity android:name=\".AboutActivity\"\n        android:label=\"关于\"\n        >\n        </activity>\n    </application>\n\n</manifest>\n\n```\n\n运行到手机，查看\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_2017-05-02-22-13-03-092_com.example.ab.png)\n\n\n虽然效果看上去和上面没有区别，但是我们的aboutpage是在relativelayout里面的，ActionBar也改为Toolbar\n\n# 添加自定义Element\n\n以APP版本为例子 :\n```\nElement versionElement = new Element();\nversionElement.setTitle(\"Version 6.2\");\naddItem(versionElement)\n\n```\n当前可用的Element类型\n```\nsetTitle(String)\t//设置element的标题\nsetIconTint(Int)\t//设置element的颜色\nsetIconDrawable(Int)\t//设置element的图标\nsetValue(String)\t//Set Element value like Facebook ID\nsetIntent(Intent)\t//Set intent to be called on onClickListener\nsetGravity(Gravity)\t//Set a Gravity for the element\nsetOnClickListener(View.OnClickListener)\t//如果Intent不是你想要的，可以在这里重写\n```\n\n\n# 写在最后\n\n如果你阅读本文后受益匪浅，可以不妨请我喝杯咖啡[微信扫描下发二维码向我转账]\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)\n\n# 联系方式\n- 邮箱:zhaoweihaochn@foxmail.com\n- 博客:[zhaoweihao.me](http://zhaoweihao.me)\n- Github:https://github.com/zhaoweihaoChina\n\n\n","slug":"Android-2分钟创建一个好看的关于页面","published":1,"updated":"2019-01-21T15:52:07.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc550000l0on76e27y83","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>通常关于页面是我们开发的时候最容易忽视的页面，一般我都是留在最后才去设计关于页面，但是虽然关于页面并不起眼但是也不能忽视它的作用，所以我就在想能不能在很短时间内创建一个蛮好看的关于页面呢，我在Github找到了这个开源库，介绍里号称可以在两分钟内创建一个好看的关于页面。</p>\n<ul>\n<li>Github原地址：<a href=\"https://github.com/medyo/android-about-page\" target=\"_blank\" rel=\"noopener\">https://github.com/medyo/android-about-page</a></li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/cover.png\" alt=\"\"></p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>这个开源库的用法也很简单</p>\n<p>首先在app/build.gradle文件中声明这个库的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile &#39;com.github.medyo:android-about-page:1.2&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再修改关于（例如是MainActivity）页面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        View aboutPage &#x3D; new AboutPage(this)</span><br><span class=\"line\">                .isRTL(false)</span><br><span class=\"line\">                .setImage(R.drawable.girl)&#x2F;&#x2F;图片</span><br><span class=\"line\">                .setDescription(&quot;道理我都懂，可我就是不听啊&quot;)&#x2F;&#x2F;介绍</span><br><span class=\"line\">                .addItem(new Element().setTitle(&quot;Version 1.0&quot;))</span><br><span class=\"line\">                .addGroup(&quot;与我联系&quot;)</span><br><span class=\"line\">                .addEmail(&quot;zhaoweihaochn@foxmail.com&quot;)&#x2F;&#x2F;邮箱</span><br><span class=\"line\">                .addWebsite(&quot;http:&#x2F;&#x2F;zhaoweihao.me&quot;)&#x2F;&#x2F;网站</span><br><span class=\"line\">                .addPlayStore(&quot;com.example.abouttest&quot;)&#x2F;&#x2F;应用商店</span><br><span class=\"line\">                .addGitHub(&quot;zhaoweihaoChina&quot;)&#x2F;&#x2F;github</span><br><span class=\"line\">                .create();</span><br><span class=\"line\"></span><br><span class=\"line\">        setContentView(aboutPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行到模拟器</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170502QQ%E5%9B%BE%E7%89%8720170502213648.png\" alt=\"\"></p>\n<p>这样一个比较好看的关于页面就创建完毕了</p>\n<p>这个开源库让我们建立关于页面的速度快了不是一点</p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>我们一般不会这样添加一个关于页面，因为现在要用到Toolbar而不是默认的Actionbar</p>\n<p>先修改values/style 换成NoActionBar主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">    &lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ......</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n\n<p>所以我们先在app/res/layout里面新建一个about_layout.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;android.support.design.widget.CoordinatorLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;android.support.design.widget.AppBarLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">        android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class=\"line\">        app:popupTheme&#x3D;&quot;@style&#x2F;ThemeOverlay.AppCompat.Light&quot;</span><br><span class=\"line\">        &gt;&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;android.support.design.widget.AppBarLayout&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;RelativeLayout</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;relativeLayout&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>然后在包下创建AboutActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.example.abouttest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Created by Administrator on 2017&#x2F;5&#x2F;2.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">public class AboutActivity extends AppCompatActivity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RelativeLayout relativeLayout;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Toolbar toolbar;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.about_layout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        initViews();</span><br><span class=\"line\"></span><br><span class=\"line\">        View aboutPage &#x3D; new AboutPage(this)</span><br><span class=\"line\">                .isRTL(false)</span><br><span class=\"line\">                .setImage(R.drawable.girl)&#x2F;&#x2F;图片</span><br><span class=\"line\">                .setDescription(&quot;道理我都懂，可我就是不听啊&quot;)&#x2F;&#x2F;介绍</span><br><span class=\"line\">                .addItem(new Element().setTitle(&quot;Version 1.0&quot;))</span><br><span class=\"line\">                .addGroup(&quot;与我联系&quot;)</span><br><span class=\"line\">                .addEmail(&quot;zhaoweihaochn@foxmail.com&quot;)&#x2F;&#x2F;邮箱</span><br><span class=\"line\">                .addWebsite(&quot;http:&#x2F;&#x2F;zhaoweihao.me&quot;)&#x2F;&#x2F;网站</span><br><span class=\"line\">                .addPlayStore(&quot;com.example.abouttest&quot;)&#x2F;&#x2F;应用商店</span><br><span class=\"line\">                .addGitHub(&quot;zhaoweihaoChina&quot;)&#x2F;&#x2F;github</span><br><span class=\"line\">                .create();</span><br><span class=\"line\"></span><br><span class=\"line\">        relativeLayout.addView(aboutPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class=\"line\">        switch (item.getItemId())&#123;</span><br><span class=\"line\">            case android.R.id.home:</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void initViews()&#123;</span><br><span class=\"line\">        relativeLayout&#x3D; (RelativeLayout) findViewById(R.id.relativeLayout);</span><br><span class=\"line\">        toolbar&#x3D; (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        ActionBar actionBar&#x3D;getSupportActionBar();</span><br><span class=\"line\">        if(actionBar!&#x3D;null)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后别忘了在AndroidManifest.xml中声明AboutActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;com.example.abouttest&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">       ......</span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.AboutActivity&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;关于&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行到手机，查看</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_2017-05-02-22-13-03-092_com.example.ab.png\" alt=\"\"></p>\n<p>虽然效果看上去和上面没有区别，但是我们的aboutpage是在relativelayout里面的，ActionBar也改为Toolbar</p>\n<h1 id=\"添加自定义Element\"><a href=\"#添加自定义Element\" class=\"headerlink\" title=\"添加自定义Element\"></a>添加自定义Element</h1><p>以APP版本为例子 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element versionElement &#x3D; new Element();</span><br><span class=\"line\">versionElement.setTitle(&quot;Version 6.2&quot;);</span><br><span class=\"line\">addItem(versionElement)</span><br></pre></td></tr></table></figure>\n<p>当前可用的Element类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTitle(String)\t&#x2F;&#x2F;设置element的标题</span><br><span class=\"line\">setIconTint(Int)\t&#x2F;&#x2F;设置element的颜色</span><br><span class=\"line\">setIconDrawable(Int)\t&#x2F;&#x2F;设置element的图标</span><br><span class=\"line\">setValue(String)\t&#x2F;&#x2F;Set Element value like Facebook ID</span><br><span class=\"line\">setIntent(Intent)\t&#x2F;&#x2F;Set intent to be called on onClickListener</span><br><span class=\"line\">setGravity(Gravity)\t&#x2F;&#x2F;Set a Gravity for the element</span><br><span class=\"line\">setOnClickListener(View.OnClickListener)\t&#x2F;&#x2F;如果Intent不是你想要的，可以在这里重写</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>如果你阅读本文后受益匪浅，可以不妨请我喝杯咖啡[微信扫描下发二维码向我转账]</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>邮箱:<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></li>\n<li>博客:<a href=\"http://zhaoweihao.me\" target=\"_blank\" rel=\"noopener\">zhaoweihao.me</a></li>\n<li>Github:<a href=\"https://github.com/zhaoweihaoChina\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><p>通常关于页面是我们开发的时候最容易忽视的页面，一般我都是留在最后才去设计关于页面，但是虽然关于页面并不起眼但是也不能忽视它的作用，所以我就在想能不能在很短时间内创建一个蛮好看的关于页面呢，我在Github找到了这个开源库，介绍里号称可以在两分钟内创建一个好看的关于页面。</p>\n<ul>\n<li>Github原地址：<a href=\"https://github.com/medyo/android-about-page\" target=\"_blank\" rel=\"noopener\">https://github.com/medyo/android-about-page</a></li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/cover.png\" alt=\"\"></p>\n<h1 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h1><p>这个开源库的用法也很简单</p>\n<p>首先在app/build.gradle文件中声明这个库的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile &#39;com.github.medyo:android-about-page:1.2&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后再修改关于（例如是MainActivity）页面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MainActivity extends AppCompatActivity &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        View aboutPage &#x3D; new AboutPage(this)</span><br><span class=\"line\">                .isRTL(false)</span><br><span class=\"line\">                .setImage(R.drawable.girl)&#x2F;&#x2F;图片</span><br><span class=\"line\">                .setDescription(&quot;道理我都懂，可我就是不听啊&quot;)&#x2F;&#x2F;介绍</span><br><span class=\"line\">                .addItem(new Element().setTitle(&quot;Version 1.0&quot;))</span><br><span class=\"line\">                .addGroup(&quot;与我联系&quot;)</span><br><span class=\"line\">                .addEmail(&quot;zhaoweihaochn@foxmail.com&quot;)&#x2F;&#x2F;邮箱</span><br><span class=\"line\">                .addWebsite(&quot;http:&#x2F;&#x2F;zhaoweihao.me&quot;)&#x2F;&#x2F;网站</span><br><span class=\"line\">                .addPlayStore(&quot;com.example.abouttest&quot;)&#x2F;&#x2F;应用商店</span><br><span class=\"line\">                .addGitHub(&quot;zhaoweihaoChina&quot;)&#x2F;&#x2F;github</span><br><span class=\"line\">                .create();</span><br><span class=\"line\"></span><br><span class=\"line\">        setContentView(aboutPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行到模拟器</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170502QQ%E5%9B%BE%E7%89%8720170502213648.png\" alt=\"\"></p>\n<p>这样一个比较好看的关于页面就创建完毕了</p>\n<p>这个开源库让我们建立关于页面的速度快了不是一点</p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p>我们一般不会这样添加一个关于页面，因为现在要用到Toolbar而不是默认的Actionbar</p>\n<p>先修改values/style 换成NoActionBar主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;resources&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!-- Base application theme. --&gt;</span><br><span class=\"line\">    &lt;style name&#x3D;&quot;AppTheme&quot; parent&#x3D;&quot;Theme.AppCompat.Light.NoActionBar&quot;&gt;</span><br><span class=\"line\">       ......</span><br><span class=\"line\">    &lt;&#x2F;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;resources&gt;</span><br></pre></td></tr></table></figure>\n\n<p>所以我们先在app/res/layout里面新建一个about_layout.xml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;android.support.design.widget.CoordinatorLayout xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    xmlns:app&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res-auto&quot;</span><br><span class=\"line\">    android:orientation&#x3D;&quot;vertical&quot;</span><br><span class=\"line\">    android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">    android:layout_height&#x3D;&quot;match_parent&quot;&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;android.support.design.widget.AppBarLayout</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;wrap_content&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;android.support.v7.widget.Toolbar</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;toolbar&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;?attr&#x2F;actionBarSize&quot;</span><br><span class=\"line\">        android:background&#x3D;&quot;?attr&#x2F;colorPrimary&quot;</span><br><span class=\"line\">        android:theme&#x3D;&quot;@style&#x2F;ThemeOverlay.AppCompat.Dark.ActionBar&quot;</span><br><span class=\"line\">        app:popupTheme&#x3D;&quot;@style&#x2F;ThemeOverlay.AppCompat.Light&quot;</span><br><span class=\"line\">        &gt;&lt;&#x2F;android.support.v7.widget.Toolbar&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;&#x2F;android.support.design.widget.AppBarLayout&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;RelativeLayout</span><br><span class=\"line\">        android:id&#x3D;&quot;@+id&#x2F;relativeLayout&quot;</span><br><span class=\"line\">        android:layout_width&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        android:layout_height&#x3D;&quot;match_parent&quot;</span><br><span class=\"line\">        app:layout_behavior&#x3D;&quot;@string&#x2F;appbar_scrolling_view_behavior&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &lt;&#x2F;RelativeLayout&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;android.support.design.widget.CoordinatorLayout&gt;</span><br></pre></td></tr></table></figure>\n\n\n<p>然后在包下创建AboutActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">package com.example.abouttest;</span><br><span class=\"line\"></span><br><span class=\"line\">import android.os.Bundle;</span><br><span class=\"line\">......</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;**</span><br><span class=\"line\"> * Created by Administrator on 2017&#x2F;5&#x2F;2.</span><br><span class=\"line\"> *&#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\">public class AboutActivity extends AppCompatActivity&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private RelativeLayout relativeLayout;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private Toolbar toolbar;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">        super.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.about_layout);</span><br><span class=\"line\">        </span><br><span class=\"line\">        initViews();</span><br><span class=\"line\"></span><br><span class=\"line\">        View aboutPage &#x3D; new AboutPage(this)</span><br><span class=\"line\">                .isRTL(false)</span><br><span class=\"line\">                .setImage(R.drawable.girl)&#x2F;&#x2F;图片</span><br><span class=\"line\">                .setDescription(&quot;道理我都懂，可我就是不听啊&quot;)&#x2F;&#x2F;介绍</span><br><span class=\"line\">                .addItem(new Element().setTitle(&quot;Version 1.0&quot;))</span><br><span class=\"line\">                .addGroup(&quot;与我联系&quot;)</span><br><span class=\"line\">                .addEmail(&quot;zhaoweihaochn@foxmail.com&quot;)&#x2F;&#x2F;邮箱</span><br><span class=\"line\">                .addWebsite(&quot;http:&#x2F;&#x2F;zhaoweihao.me&quot;)&#x2F;&#x2F;网站</span><br><span class=\"line\">                .addPlayStore(&quot;com.example.abouttest&quot;)&#x2F;&#x2F;应用商店</span><br><span class=\"line\">                .addGitHub(&quot;zhaoweihaoChina&quot;)&#x2F;&#x2F;github</span><br><span class=\"line\">                .create();</span><br><span class=\"line\"></span><br><span class=\"line\">        relativeLayout.addView(aboutPage);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public boolean onOptionsItemSelected(MenuItem item) &#123;</span><br><span class=\"line\">        switch (item.getItemId())&#123;</span><br><span class=\"line\">            case android.R.id.home:</span><br><span class=\"line\">                finish();</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            default:</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    private void initViews()&#123;</span><br><span class=\"line\">        relativeLayout&#x3D; (RelativeLayout) findViewById(R.id.relativeLayout);</span><br><span class=\"line\">        toolbar&#x3D; (Toolbar) findViewById(R.id.toolbar);</span><br><span class=\"line\">        setSupportActionBar(toolbar);</span><br><span class=\"line\">        ActionBar actionBar&#x3D;getSupportActionBar();</span><br><span class=\"line\">        if(actionBar!&#x3D;null)&#123;</span><br><span class=\"line\">            actionBar.setDisplayHomeAsUpEnabled(true);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后别忘了在AndroidManifest.xml中声明AboutActivity</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class=\"line\">&lt;manifest xmlns:android&#x3D;&quot;http:&#x2F;&#x2F;schemas.android.com&#x2F;apk&#x2F;res&#x2F;android&quot;</span><br><span class=\"line\">    package&#x3D;&quot;com.example.abouttest&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;application</span><br><span class=\"line\">       ......</span><br><span class=\"line\">        &lt;activity android:name&#x3D;&quot;.AboutActivity&quot;</span><br><span class=\"line\">        android:label&#x3D;&quot;关于&quot;</span><br><span class=\"line\">        &gt;</span><br><span class=\"line\">        &lt;&#x2F;activity&gt;</span><br><span class=\"line\">    &lt;&#x2F;application&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;&#x2F;manifest&gt;</span><br></pre></td></tr></table></figure>\n\n<p>运行到手机，查看</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_2017-05-02-22-13-03-092_com.example.ab.png\" alt=\"\"></p>\n<p>虽然效果看上去和上面没有区别，但是我们的aboutpage是在relativelayout里面的，ActionBar也改为Toolbar</p>\n<h1 id=\"添加自定义Element\"><a href=\"#添加自定义Element\" class=\"headerlink\" title=\"添加自定义Element\"></a>添加自定义Element</h1><p>以APP版本为例子 :</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Element versionElement &#x3D; new Element();</span><br><span class=\"line\">versionElement.setTitle(&quot;Version 6.2&quot;);</span><br><span class=\"line\">addItem(versionElement)</span><br></pre></td></tr></table></figure>\n<p>当前可用的Element类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTitle(String)\t&#x2F;&#x2F;设置element的标题</span><br><span class=\"line\">setIconTint(Int)\t&#x2F;&#x2F;设置element的颜色</span><br><span class=\"line\">setIconDrawable(Int)\t&#x2F;&#x2F;设置element的图标</span><br><span class=\"line\">setValue(String)\t&#x2F;&#x2F;Set Element value like Facebook ID</span><br><span class=\"line\">setIntent(Intent)\t&#x2F;&#x2F;Set intent to be called on onClickListener</span><br><span class=\"line\">setGravity(Gravity)\t&#x2F;&#x2F;Set a Gravity for the element</span><br><span class=\"line\">setOnClickListener(View.OnClickListener)\t&#x2F;&#x2F;如果Intent不是你想要的，可以在这里重写</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>如果你阅读本文后受益匪浅，可以不妨请我喝杯咖啡[微信扫描下发二维码向我转账]</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>邮箱:<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></li>\n<li>博客:<a href=\"http://zhaoweihao.me\" target=\"_blank\" rel=\"noopener\">zhaoweihao.me</a></li>\n<li>Github:<a href=\"https://github.com/zhaoweihaoChina\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina</a></li>\n</ul>\n"},{"title":"Android:手机刷第三方ROM教程，旧手机重生之术","date":"2017-05-05T02:00:00.000Z","_content":"`与我联系`\n```\n-  Email:zhaoweihaochn@gmail.com\n-  Blog:zhaoweihao.me\n```\n# 前言\n\n我是一个大二学生，我有一台米4陪伴了我快两年了，我是从MIUI6到MIUI8过来的，看着MIUI一直的越来越差，广告越来越多，而且后台占用很多，空间也被自带软件占用了好多，可是自带软件又不能卸载，所以我就下定决心拯救一下我这台垂危的米4，经过昨天一下午的折腾把手机刷了lineageOS系统，Android7.1.2，然后想着把自己刷机的经验总结一下，因为我看网上一个完整的教程比较少，我都是零零散散地搜索和收集的\n`注：如果大家对我的文章有误解请Email我修改`\n\n## 更新(2017/08/31)\n由于发现之前的版本有误导的地方，所以修改一下\n\n## 方法\n\n我这个文章主要介绍刷入第三方rec刷机的，如果需要一键刷机的可以移步到刷机精灵，虽然刷机精灵可以一键刷机，但是刷完后的系统有好多刷机精灵安装的APP，还不能删除，我是接受不了的，当然，如果你可以接受也是可以的\n# 关于LineageOS\n\n我在网上搜索第三方ROM时很多人推荐LineageOS，我一开始不知道这个是什么东西，经过搜索才知道是前CM团队成员开发的，之前一直久仰CM团队大名，于是我就毅然决然地动手了，但是LineageOS的官网要翻墙，所以我特地为大家整理了下载地址，留在下方\n## 附上LineageOS的截图\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101314.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101211.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101322.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101345.jpg)\n\n## 安装后\n\n安装后的系统十分纯净，自带的软件不超过17个，都是必要的应用，例如音乐，时钟，日历，浏览器，计算器之类的，而且lineageOS的自带应用都是根据Material design设计的，非常美观\n\n# 需要下载的东西\n\nTWRP recovery:http://pan.baidu.com/s/1hrPlhsw\nLineageOS下载地址`需要翻墙`:https://download.lineageos.org/\n我整理的LineageOS下载地址`不用翻墙`:[LineageOS下载地址-个人整理](http://zhaoweihao.me/2017/05/05/LineageOS%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/)\n找到适配自己机器的ROM，复制下载地址到迅雷即可下载\n`注：如果百度云地址失效，请Email我更新`\n\n# 请事先备份好要备份的数据\n\n# 开始\n\n## 下载TWRP\n上文下载好的TWRP recovery解压好放着\n进入下载地址：https://twrp.me/Devices/\n找到自己机型的版本，在介绍页面找到Download Links，选择Primary(Americas)\n\n![01.png](http://op4e089f0.bkt.clouddn.com/2017083101.png)\n选择最新版本img文件下载\n\n![02.png](http://op4e089f0.bkt.clouddn.com/2017083102.png)\n\n将下载的img文件改名为recovery.img并放入上面解压好的TWRP recovery文件夹里,替换掉原来的recovery.img\n\n![03.png](http://op4e089f0.bkt.clouddn.com/2017083103.png)\n\n## 刷入第三方recovery\n\n刷入第三方rec的方法很简单，首先手机关机，按住电源键+音量下键打开fastboot模式，将手机连接到电脑,在TWRP解压后的目录下按shift+右键\n\n![](http://op4e089f0.bkt.clouddn.com/1.jpg)\n\n选择在此处打开命令窗口，输入下面命令    \n\n    fastboot flash recovery recovery.img\n\n![](http://op4e089f0.bkt.clouddn.com/2.png)\n\n过一会CMD会有finished提示就证明成功了\n长按开机键等待手机重启即可\n如果长按开机键后直接进入系统，可以关机后按住电源键+音量上键即可进入rec\n\n- 问题\n  如果出现waiting devices，请检查驱动\n  如果不能刷入，请自行寻找适合自己机型的第三方rec，替换掉TWRP目录下的recovery.img再执行一次命令就可以了\n\n## 刷入第三方ROM\n\n`注：rec界面为英文`\n\n- 第一次进入REC可能会问是否允许修改，选择允许修改（右滑）\n\n下面进入最紧张最关键的步骤了，刷入lineageOS系统。首先上一步进入rec后连接电脑，将下载好的lineageOS的zip安装包放入手机download目录（放进你能找到的目录就可以了，注意不要放入系统目录，建议新建文件夹存放），然后rec里面点击Wipe，右滑确定双清，清理好后返回rec主界面，选择Install，然后在目录里寻找到你存放的zip安装包，右滑确定安装，然后等待安装完成重启就可以了（安装完rec会提示是否安装root，请根据需要自行选择）\n\n# 最后\n\n按照上面的步骤安装完成后重启会进入系统设置画面，设置好后就可以看到崭新的界面了，系统用起来非常流畅。\n\n## 关于lineageos更新\n- OTA升级\n  官方升级和普通手机系统一样 在**设置-关于手机-LineageOS更新**（需翻墙），下载好后会重启更新\n  **问题：**\n  有部分人会出现重启后在recovery不启动更新也不进入系统，这是由于TWRP版本太旧的缘故，将TWRP版本更新到3.0.3以上最新版本即可启动更新\n  [原文地址](https://www.reddit.com/r/LineageOS/comments/5riech/how_fix_twrp_recovery_boot_loop_after_lineageos/)\n\n![04.png](http://op4e089f0.bkt.clouddn.com/2017083104.png)\n\n- 卡刷升级\n  在https://download.lineageos.org/ 下载最新适合自己机型的lineageos，和上面刷ROM的步骤一样，除了不用双清（lineageos升级lineageos不用双清，如果要刷第三方系统ROM需要双清）\n\n## 优化\n\n其实Android系统在外国的流畅度可以堪比ios的，如果问国内为什么运行如此的慢，追踪他的原因就是各位毒瘤应用，具体是哪个应用就不点名了，Android开发界都了解的，具体可以看这个文章：[安卓 & 卡顿 & APP](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650662746&idx=1&sn=524e035c866762ae60bc65bafea98283&chksm=87d13a05b0a6b313cb740aabe29224b79ed5328148d1fb780d622cf49daee0526f6e380b966d&mpshare=1&scene=23&srcid=05057zswWCKtb9BiKdT2111v#rd)，好了言归正传，既然毒瘤应用我们不得不用，那就得进行优化了。\n\n- 优化用到的应用：[绿色守护](http://www.wandoujia.com/apps/com.oasisfeng.greenify)\n\n绿色守护可以在没有root的情况下监测加入列表的应用，并让它们休眠，如果root之后功能更为强大，我们要做的就是将平常不需要在后台保持的应用加入到列表，并让它们都休眠，可达到省电而且系统还流畅的目的\n\n## 推荐\n\n- 第三方应用市场：[豌豆荚](https://www.wandoujia.com/)\n  刷了系统后系统内没有自带的应用市场，我们需要下载第三方应用市场，在对比了各个第三方应用市场后我选择了豌豆荚，因为它广告比较少，界面比较美观\n\n## 捐赠\n\n这篇博客我是总结自己刷机经验的，如果对大家有帮助，大家可以请我这个大学穷学生吃点零食，不要求多，1块五毛也行，你的支持是我最大的鼓励！谢谢！\n\n微信支付码：\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)\n\n\n\n","source":"_posts/Android-手机刷第三方ROM教程，旧手机重生之术.md","raw":"---\ntitle: 'Android:手机刷第三方ROM教程，旧手机重生之术'\ndate: 2017-05-05 10:00:00\ntags: [Android,刷机,第三方ROM]\ncategories: 刷机\n---\n`与我联系`\n```\n-  Email:zhaoweihaochn@gmail.com\n-  Blog:zhaoweihao.me\n```\n# 前言\n\n我是一个大二学生，我有一台米4陪伴了我快两年了，我是从MIUI6到MIUI8过来的，看着MIUI一直的越来越差，广告越来越多，而且后台占用很多，空间也被自带软件占用了好多，可是自带软件又不能卸载，所以我就下定决心拯救一下我这台垂危的米4，经过昨天一下午的折腾把手机刷了lineageOS系统，Android7.1.2，然后想着把自己刷机的经验总结一下，因为我看网上一个完整的教程比较少，我都是零零散散地搜索和收集的\n`注：如果大家对我的文章有误解请Email我修改`\n\n## 更新(2017/08/31)\n由于发现之前的版本有误导的地方，所以修改一下\n\n## 方法\n\n我这个文章主要介绍刷入第三方rec刷机的，如果需要一键刷机的可以移步到刷机精灵，虽然刷机精灵可以一键刷机，但是刷完后的系统有好多刷机精灵安装的APP，还不能删除，我是接受不了的，当然，如果你可以接受也是可以的\n# 关于LineageOS\n\n我在网上搜索第三方ROM时很多人推荐LineageOS，我一开始不知道这个是什么东西，经过搜索才知道是前CM团队成员开发的，之前一直久仰CM团队大名，于是我就毅然决然地动手了，但是LineageOS的官网要翻墙，所以我特地为大家整理了下载地址，留在下方\n## 附上LineageOS的截图\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101314.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101211.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101322.jpg)\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101345.jpg)\n\n## 安装后\n\n安装后的系统十分纯净，自带的软件不超过17个，都是必要的应用，例如音乐，时钟，日历，浏览器，计算器之类的，而且lineageOS的自带应用都是根据Material design设计的，非常美观\n\n# 需要下载的东西\n\nTWRP recovery:http://pan.baidu.com/s/1hrPlhsw\nLineageOS下载地址`需要翻墙`:https://download.lineageos.org/\n我整理的LineageOS下载地址`不用翻墙`:[LineageOS下载地址-个人整理](http://zhaoweihao.me/2017/05/05/LineageOS%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/)\n找到适配自己机器的ROM，复制下载地址到迅雷即可下载\n`注：如果百度云地址失效，请Email我更新`\n\n# 请事先备份好要备份的数据\n\n# 开始\n\n## 下载TWRP\n上文下载好的TWRP recovery解压好放着\n进入下载地址：https://twrp.me/Devices/\n找到自己机型的版本，在介绍页面找到Download Links，选择Primary(Americas)\n\n![01.png](http://op4e089f0.bkt.clouddn.com/2017083101.png)\n选择最新版本img文件下载\n\n![02.png](http://op4e089f0.bkt.clouddn.com/2017083102.png)\n\n将下载的img文件改名为recovery.img并放入上面解压好的TWRP recovery文件夹里,替换掉原来的recovery.img\n\n![03.png](http://op4e089f0.bkt.clouddn.com/2017083103.png)\n\n## 刷入第三方recovery\n\n刷入第三方rec的方法很简单，首先手机关机，按住电源键+音量下键打开fastboot模式，将手机连接到电脑,在TWRP解压后的目录下按shift+右键\n\n![](http://op4e089f0.bkt.clouddn.com/1.jpg)\n\n选择在此处打开命令窗口，输入下面命令    \n\n    fastboot flash recovery recovery.img\n\n![](http://op4e089f0.bkt.clouddn.com/2.png)\n\n过一会CMD会有finished提示就证明成功了\n长按开机键等待手机重启即可\n如果长按开机键后直接进入系统，可以关机后按住电源键+音量上键即可进入rec\n\n- 问题\n  如果出现waiting devices，请检查驱动\n  如果不能刷入，请自行寻找适合自己机型的第三方rec，替换掉TWRP目录下的recovery.img再执行一次命令就可以了\n\n## 刷入第三方ROM\n\n`注：rec界面为英文`\n\n- 第一次进入REC可能会问是否允许修改，选择允许修改（右滑）\n\n下面进入最紧张最关键的步骤了，刷入lineageOS系统。首先上一步进入rec后连接电脑，将下载好的lineageOS的zip安装包放入手机download目录（放进你能找到的目录就可以了，注意不要放入系统目录，建议新建文件夹存放），然后rec里面点击Wipe，右滑确定双清，清理好后返回rec主界面，选择Install，然后在目录里寻找到你存放的zip安装包，右滑确定安装，然后等待安装完成重启就可以了（安装完rec会提示是否安装root，请根据需要自行选择）\n\n# 最后\n\n按照上面的步骤安装完成后重启会进入系统设置画面，设置好后就可以看到崭新的界面了，系统用起来非常流畅。\n\n## 关于lineageos更新\n- OTA升级\n  官方升级和普通手机系统一样 在**设置-关于手机-LineageOS更新**（需翻墙），下载好后会重启更新\n  **问题：**\n  有部分人会出现重启后在recovery不启动更新也不进入系统，这是由于TWRP版本太旧的缘故，将TWRP版本更新到3.0.3以上最新版本即可启动更新\n  [原文地址](https://www.reddit.com/r/LineageOS/comments/5riech/how_fix_twrp_recovery_boot_loop_after_lineageos/)\n\n![04.png](http://op4e089f0.bkt.clouddn.com/2017083104.png)\n\n- 卡刷升级\n  在https://download.lineageos.org/ 下载最新适合自己机型的lineageos，和上面刷ROM的步骤一样，除了不用双清（lineageos升级lineageos不用双清，如果要刷第三方系统ROM需要双清）\n\n## 优化\n\n其实Android系统在外国的流畅度可以堪比ios的，如果问国内为什么运行如此的慢，追踪他的原因就是各位毒瘤应用，具体是哪个应用就不点名了，Android开发界都了解的，具体可以看这个文章：[安卓 & 卡顿 & APP](http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650662746&idx=1&sn=524e035c866762ae60bc65bafea98283&chksm=87d13a05b0a6b313cb740aabe29224b79ed5328148d1fb780d622cf49daee0526f6e380b966d&mpshare=1&scene=23&srcid=05057zswWCKtb9BiKdT2111v#rd)，好了言归正传，既然毒瘤应用我们不得不用，那就得进行优化了。\n\n- 优化用到的应用：[绿色守护](http://www.wandoujia.com/apps/com.oasisfeng.greenify)\n\n绿色守护可以在没有root的情况下监测加入列表的应用，并让它们休眠，如果root之后功能更为强大，我们要做的就是将平常不需要在后台保持的应用加入到列表，并让它们都休眠，可达到省电而且系统还流畅的目的\n\n## 推荐\n\n- 第三方应用市场：[豌豆荚](https://www.wandoujia.com/)\n  刷了系统后系统内没有自带的应用市场，我们需要下载第三方应用市场，在对比了各个第三方应用市场后我选择了豌豆荚，因为它广告比较少，界面比较美观\n\n## 捐赠\n\n这篇博客我是总结自己刷机经验的，如果对大家有帮助，大家可以请我这个大学穷学生吃点零食，不要求多，1块五毛也行，你的支持是我最大的鼓励！谢谢！\n\n微信支付码：\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)\n\n\n\n","slug":"Android-手机刷第三方ROM教程，旧手机重生之术","published":1,"updated":"2019-01-21T15:52:07.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5b0002l0on1lvo86aj","content":"<p><code>与我联系</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-  Email:zhaoweihaochn@gmail.com</span><br><span class=\"line\">-  Blog:zhaoweihao.me</span><br></pre></td></tr></table></figure>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是一个大二学生，我有一台米4陪伴了我快两年了，我是从MIUI6到MIUI8过来的，看着MIUI一直的越来越差，广告越来越多，而且后台占用很多，空间也被自带软件占用了好多，可是自带软件又不能卸载，所以我就下定决心拯救一下我这台垂危的米4，经过昨天一下午的折腾把手机刷了lineageOS系统，Android7.1.2，然后想着把自己刷机的经验总结一下，因为我看网上一个完整的教程比较少，我都是零零散散地搜索和收集的<br><code>注：如果大家对我的文章有误解请Email我修改</code></p>\n<h2 id=\"更新-2017-08-31\"><a href=\"#更新-2017-08-31\" class=\"headerlink\" title=\"更新(2017/08/31)\"></a>更新(2017/08/31)</h2><p>由于发现之前的版本有误导的地方，所以修改一下</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>我这个文章主要介绍刷入第三方rec刷机的，如果需要一键刷机的可以移步到刷机精灵，虽然刷机精灵可以一键刷机，但是刷完后的系统有好多刷机精灵安装的APP，还不能删除，我是接受不了的，当然，如果你可以接受也是可以的</p>\n<h1 id=\"关于LineageOS\"><a href=\"#关于LineageOS\" class=\"headerlink\" title=\"关于LineageOS\"></a>关于LineageOS</h1><p>我在网上搜索第三方ROM时很多人推荐LineageOS，我一开始不知道这个是什么东西，经过搜索才知道是前CM团队成员开发的，之前一直久仰CM团队大名，于是我就毅然决然地动手了，但是LineageOS的官网要翻墙，所以我特地为大家整理了下载地址，留在下方</p>\n<h2 id=\"附上LineageOS的截图\"><a href=\"#附上LineageOS的截图\" class=\"headerlink\" title=\"附上LineageOS的截图\"></a>附上LineageOS的截图</h2><p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101314.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101211.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101322.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101345.jpg\" alt=\"\"></p>\n<h2 id=\"安装后\"><a href=\"#安装后\" class=\"headerlink\" title=\"安装后\"></a>安装后</h2><p>安装后的系统十分纯净，自带的软件不超过17个，都是必要的应用，例如音乐，时钟，日历，浏览器，计算器之类的，而且lineageOS的自带应用都是根据Material design设计的，非常美观</p>\n<h1 id=\"需要下载的东西\"><a href=\"#需要下载的东西\" class=\"headerlink\" title=\"需要下载的东西\"></a>需要下载的东西</h1><p>TWRP recovery:<a href=\"http://pan.baidu.com/s/1hrPlhsw\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hrPlhsw</a><br>LineageOS下载地址<code>需要翻墙</code>:<a href=\"https://download.lineageos.org/\" target=\"_blank\" rel=\"noopener\">https://download.lineageos.org/</a><br>我整理的LineageOS下载地址<code>不用翻墙</code>:<a href=\"http://zhaoweihao.me/2017/05/05/LineageOS%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"noopener\">LineageOS下载地址-个人整理</a><br>找到适配自己机器的ROM，复制下载地址到迅雷即可下载<br><code>注：如果百度云地址失效，请Email我更新</code></p>\n<h1 id=\"请事先备份好要备份的数据\"><a href=\"#请事先备份好要备份的数据\" class=\"headerlink\" title=\"请事先备份好要备份的数据\"></a>请事先备份好要备份的数据</h1><h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"下载TWRP\"><a href=\"#下载TWRP\" class=\"headerlink\" title=\"下载TWRP\"></a>下载TWRP</h2><p>上文下载好的TWRP recovery解压好放着<br>进入下载地址：<a href=\"https://twrp.me/Devices/\" target=\"_blank\" rel=\"noopener\">https://twrp.me/Devices/</a><br>找到自己机型的版本，在介绍页面找到Download Links，选择Primary(Americas)</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083101.png\" alt=\"01.png\"><br>选择最新版本img文件下载</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083102.png\" alt=\"02.png\"></p>\n<p>将下载的img文件改名为recovery.img并放入上面解压好的TWRP recovery文件夹里,替换掉原来的recovery.img</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083103.png\" alt=\"03.png\"></p>\n<h2 id=\"刷入第三方recovery\"><a href=\"#刷入第三方recovery\" class=\"headerlink\" title=\"刷入第三方recovery\"></a>刷入第三方recovery</h2><p>刷入第三方rec的方法很简单，首先手机关机，按住电源键+音量下键打开fastboot模式，将手机连接到电脑,在TWRP解压后的目录下按shift+右键</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/1.jpg\" alt=\"\"></p>\n<p>选择在此处打开命令窗口，输入下面命令    </p>\n<pre><code>fastboot flash recovery recovery.img</code></pre><p><img src=\"http://op4e089f0.bkt.clouddn.com/2.png\" alt=\"\"></p>\n<p>过一会CMD会有finished提示就证明成功了<br>长按开机键等待手机重启即可<br>如果长按开机键后直接进入系统，可以关机后按住电源键+音量上键即可进入rec</p>\n<ul>\n<li>问题<br>如果出现waiting devices，请检查驱动<br>如果不能刷入，请自行寻找适合自己机型的第三方rec，替换掉TWRP目录下的recovery.img再执行一次命令就可以了</li>\n</ul>\n<h2 id=\"刷入第三方ROM\"><a href=\"#刷入第三方ROM\" class=\"headerlink\" title=\"刷入第三方ROM\"></a>刷入第三方ROM</h2><p><code>注：rec界面为英文</code></p>\n<ul>\n<li>第一次进入REC可能会问是否允许修改，选择允许修改（右滑）</li>\n</ul>\n<p>下面进入最紧张最关键的步骤了，刷入lineageOS系统。首先上一步进入rec后连接电脑，将下载好的lineageOS的zip安装包放入手机download目录（放进你能找到的目录就可以了，注意不要放入系统目录，建议新建文件夹存放），然后rec里面点击Wipe，右滑确定双清，清理好后返回rec主界面，选择Install，然后在目录里寻找到你存放的zip安装包，右滑确定安装，然后等待安装完成重启就可以了（安装完rec会提示是否安装root，请根据需要自行选择）</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>按照上面的步骤安装完成后重启会进入系统设置画面，设置好后就可以看到崭新的界面了，系统用起来非常流畅。</p>\n<h2 id=\"关于lineageos更新\"><a href=\"#关于lineageos更新\" class=\"headerlink\" title=\"关于lineageos更新\"></a>关于lineageos更新</h2><ul>\n<li>OTA升级<br>官方升级和普通手机系统一样 在<strong>设置-关于手机-LineageOS更新</strong>（需翻墙），下载好后会重启更新<br><strong>问题：</strong><br>有部分人会出现重启后在recovery不启动更新也不进入系统，这是由于TWRP版本太旧的缘故，将TWRP版本更新到3.0.3以上最新版本即可启动更新<br><a href=\"https://www.reddit.com/r/LineageOS/comments/5riech/how_fix_twrp_recovery_boot_loop_after_lineageos/\" target=\"_blank\" rel=\"noopener\">原文地址</a></li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083104.png\" alt=\"04.png\"></p>\n<ul>\n<li>卡刷升级<br>在<a href=\"https://download.lineageos.org/\" target=\"_blank\" rel=\"noopener\">https://download.lineageos.org/</a> 下载最新适合自己机型的lineageos，和上面刷ROM的步骤一样，除了不用双清（lineageos升级lineageos不用双清，如果要刷第三方系统ROM需要双清）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>其实Android系统在外国的流畅度可以堪比ios的，如果问国内为什么运行如此的慢，追踪他的原因就是各位毒瘤应用，具体是哪个应用就不点名了，Android开发界都了解的，具体可以看这个文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650662746&idx=1&sn=524e035c866762ae60bc65bafea98283&chksm=87d13a05b0a6b313cb740aabe29224b79ed5328148d1fb780d622cf49daee0526f6e380b966d&mpshare=1&scene=23&srcid=05057zswWCKtb9BiKdT2111v#rd\" target=\"_blank\" rel=\"noopener\">安卓 &amp; 卡顿 &amp; APP</a>，好了言归正传，既然毒瘤应用我们不得不用，那就得进行优化了。</p>\n<ul>\n<li>优化用到的应用：<a href=\"http://www.wandoujia.com/apps/com.oasisfeng.greenify\" target=\"_blank\" rel=\"noopener\">绿色守护</a></li>\n</ul>\n<p>绿色守护可以在没有root的情况下监测加入列表的应用，并让它们休眠，如果root之后功能更为强大，我们要做的就是将平常不需要在后台保持的应用加入到列表，并让它们都休眠，可达到省电而且系统还流畅的目的</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><ul>\n<li>第三方应用市场：<a href=\"https://www.wandoujia.com/\" target=\"_blank\" rel=\"noopener\">豌豆荚</a><br>刷了系统后系统内没有自带的应用市场，我们需要下载第三方应用市场，在对比了各个第三方应用市场后我选择了豌豆荚，因为它广告比较少，界面比较美观</li>\n</ul>\n<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>这篇博客我是总结自己刷机经验的，如果对大家有帮助，大家可以请我这个大学穷学生吃点零食，不要求多，1块五毛也行，你的支持是我最大的鼓励！谢谢！</p>\n<p>微信支付码：</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>与我联系</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-  Email:zhaoweihaochn@gmail.com</span><br><span class=\"line\">-  Blog:zhaoweihao.me</span><br></pre></td></tr></table></figure>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>我是一个大二学生，我有一台米4陪伴了我快两年了，我是从MIUI6到MIUI8过来的，看着MIUI一直的越来越差，广告越来越多，而且后台占用很多，空间也被自带软件占用了好多，可是自带软件又不能卸载，所以我就下定决心拯救一下我这台垂危的米4，经过昨天一下午的折腾把手机刷了lineageOS系统，Android7.1.2，然后想着把自己刷机的经验总结一下，因为我看网上一个完整的教程比较少，我都是零零散散地搜索和收集的<br><code>注：如果大家对我的文章有误解请Email我修改</code></p>\n<h2 id=\"更新-2017-08-31\"><a href=\"#更新-2017-08-31\" class=\"headerlink\" title=\"更新(2017/08/31)\"></a>更新(2017/08/31)</h2><p>由于发现之前的版本有误导的地方，所以修改一下</p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>我这个文章主要介绍刷入第三方rec刷机的，如果需要一键刷机的可以移步到刷机精灵，虽然刷机精灵可以一键刷机，但是刷完后的系统有好多刷机精灵安装的APP，还不能删除，我是接受不了的，当然，如果你可以接受也是可以的</p>\n<h1 id=\"关于LineageOS\"><a href=\"#关于LineageOS\" class=\"headerlink\" title=\"关于LineageOS\"></a>关于LineageOS</h1><p>我在网上搜索第三方ROM时很多人推荐LineageOS，我一开始不知道这个是什么东西，经过搜索才知道是前CM团队成员开发的，之前一直久仰CM团队大名，于是我就毅然决然地动手了，但是LineageOS的官网要翻墙，所以我特地为大家整理了下载地址，留在下方</p>\n<h2 id=\"附上LineageOS的截图\"><a href=\"#附上LineageOS的截图\" class=\"headerlink\" title=\"附上LineageOS的截图\"></a>附上LineageOS的截图</h2><p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101314.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101211.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101322.jpg\" alt=\"\"></p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170505-101345.jpg\" alt=\"\"></p>\n<h2 id=\"安装后\"><a href=\"#安装后\" class=\"headerlink\" title=\"安装后\"></a>安装后</h2><p>安装后的系统十分纯净，自带的软件不超过17个，都是必要的应用，例如音乐，时钟，日历，浏览器，计算器之类的，而且lineageOS的自带应用都是根据Material design设计的，非常美观</p>\n<h1 id=\"需要下载的东西\"><a href=\"#需要下载的东西\" class=\"headerlink\" title=\"需要下载的东西\"></a>需要下载的东西</h1><p>TWRP recovery:<a href=\"http://pan.baidu.com/s/1hrPlhsw\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1hrPlhsw</a><br>LineageOS下载地址<code>需要翻墙</code>:<a href=\"https://download.lineageos.org/\" target=\"_blank\" rel=\"noopener\">https://download.lineageos.org/</a><br>我整理的LineageOS下载地址<code>不用翻墙</code>:<a href=\"http://zhaoweihao.me/2017/05/05/LineageOS%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80-%E4%B8%AA%E4%BA%BA%E6%95%B4%E7%90%86/\" target=\"_blank\" rel=\"noopener\">LineageOS下载地址-个人整理</a><br>找到适配自己机器的ROM，复制下载地址到迅雷即可下载<br><code>注：如果百度云地址失效，请Email我更新</code></p>\n<h1 id=\"请事先备份好要备份的数据\"><a href=\"#请事先备份好要备份的数据\" class=\"headerlink\" title=\"请事先备份好要备份的数据\"></a>请事先备份好要备份的数据</h1><h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"下载TWRP\"><a href=\"#下载TWRP\" class=\"headerlink\" title=\"下载TWRP\"></a>下载TWRP</h2><p>上文下载好的TWRP recovery解压好放着<br>进入下载地址：<a href=\"https://twrp.me/Devices/\" target=\"_blank\" rel=\"noopener\">https://twrp.me/Devices/</a><br>找到自己机型的版本，在介绍页面找到Download Links，选择Primary(Americas)</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083101.png\" alt=\"01.png\"><br>选择最新版本img文件下载</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083102.png\" alt=\"02.png\"></p>\n<p>将下载的img文件改名为recovery.img并放入上面解压好的TWRP recovery文件夹里,替换掉原来的recovery.img</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083103.png\" alt=\"03.png\"></p>\n<h2 id=\"刷入第三方recovery\"><a href=\"#刷入第三方recovery\" class=\"headerlink\" title=\"刷入第三方recovery\"></a>刷入第三方recovery</h2><p>刷入第三方rec的方法很简单，首先手机关机，按住电源键+音量下键打开fastboot模式，将手机连接到电脑,在TWRP解压后的目录下按shift+右键</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/1.jpg\" alt=\"\"></p>\n<p>选择在此处打开命令窗口，输入下面命令    </p>\n<pre><code>fastboot flash recovery recovery.img</code></pre><p><img src=\"http://op4e089f0.bkt.clouddn.com/2.png\" alt=\"\"></p>\n<p>过一会CMD会有finished提示就证明成功了<br>长按开机键等待手机重启即可<br>如果长按开机键后直接进入系统，可以关机后按住电源键+音量上键即可进入rec</p>\n<ul>\n<li>问题<br>如果出现waiting devices，请检查驱动<br>如果不能刷入，请自行寻找适合自己机型的第三方rec，替换掉TWRP目录下的recovery.img再执行一次命令就可以了</li>\n</ul>\n<h2 id=\"刷入第三方ROM\"><a href=\"#刷入第三方ROM\" class=\"headerlink\" title=\"刷入第三方ROM\"></a>刷入第三方ROM</h2><p><code>注：rec界面为英文</code></p>\n<ul>\n<li>第一次进入REC可能会问是否允许修改，选择允许修改（右滑）</li>\n</ul>\n<p>下面进入最紧张最关键的步骤了，刷入lineageOS系统。首先上一步进入rec后连接电脑，将下载好的lineageOS的zip安装包放入手机download目录（放进你能找到的目录就可以了，注意不要放入系统目录，建议新建文件夹存放），然后rec里面点击Wipe，右滑确定双清，清理好后返回rec主界面，选择Install，然后在目录里寻找到你存放的zip安装包，右滑确定安装，然后等待安装完成重启就可以了（安装完rec会提示是否安装root，请根据需要自行选择）</p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>按照上面的步骤安装完成后重启会进入系统设置画面，设置好后就可以看到崭新的界面了，系统用起来非常流畅。</p>\n<h2 id=\"关于lineageos更新\"><a href=\"#关于lineageos更新\" class=\"headerlink\" title=\"关于lineageos更新\"></a>关于lineageos更新</h2><ul>\n<li>OTA升级<br>官方升级和普通手机系统一样 在<strong>设置-关于手机-LineageOS更新</strong>（需翻墙），下载好后会重启更新<br><strong>问题：</strong><br>有部分人会出现重启后在recovery不启动更新也不进入系统，这是由于TWRP版本太旧的缘故，将TWRP版本更新到3.0.3以上最新版本即可启动更新<br><a href=\"https://www.reddit.com/r/LineageOS/comments/5riech/how_fix_twrp_recovery_boot_loop_after_lineageos/\" target=\"_blank\" rel=\"noopener\">原文地址</a></li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017083104.png\" alt=\"04.png\"></p>\n<ul>\n<li>卡刷升级<br>在<a href=\"https://download.lineageos.org/\" target=\"_blank\" rel=\"noopener\">https://download.lineageos.org/</a> 下载最新适合自己机型的lineageos，和上面刷ROM的步骤一样，除了不用双清（lineageos升级lineageos不用双清，如果要刷第三方系统ROM需要双清）</li>\n</ul>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><p>其实Android系统在外国的流畅度可以堪比ios的，如果问国内为什么运行如此的慢，追踪他的原因就是各位毒瘤应用，具体是哪个应用就不点名了，Android开发界都了解的，具体可以看这个文章：<a href=\"http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&mid=2650662746&idx=1&sn=524e035c866762ae60bc65bafea98283&chksm=87d13a05b0a6b313cb740aabe29224b79ed5328148d1fb780d622cf49daee0526f6e380b966d&mpshare=1&scene=23&srcid=05057zswWCKtb9BiKdT2111v#rd\" target=\"_blank\" rel=\"noopener\">安卓 &amp; 卡顿 &amp; APP</a>，好了言归正传，既然毒瘤应用我们不得不用，那就得进行优化了。</p>\n<ul>\n<li>优化用到的应用：<a href=\"http://www.wandoujia.com/apps/com.oasisfeng.greenify\" target=\"_blank\" rel=\"noopener\">绿色守护</a></li>\n</ul>\n<p>绿色守护可以在没有root的情况下监测加入列表的应用，并让它们休眠，如果root之后功能更为强大，我们要做的就是将平常不需要在后台保持的应用加入到列表，并让它们都休眠，可达到省电而且系统还流畅的目的</p>\n<h2 id=\"推荐\"><a href=\"#推荐\" class=\"headerlink\" title=\"推荐\"></a>推荐</h2><ul>\n<li>第三方应用市场：<a href=\"https://www.wandoujia.com/\" target=\"_blank\" rel=\"noopener\">豌豆荚</a><br>刷了系统后系统内没有自带的应用市场，我们需要下载第三方应用市场，在对比了各个第三方应用市场后我选择了豌豆荚，因为它广告比较少，界面比较美观</li>\n</ul>\n<h2 id=\"捐赠\"><a href=\"#捐赠\" class=\"headerlink\" title=\"捐赠\"></a>捐赠</h2><p>这篇博客我是总结自己刷机经验的，如果对大家有帮助，大家可以请我这个大学穷学生吃点零食，不要求多，1块五毛也行，你的支持是我最大的鼓励！谢谢！</p>\n<p>微信支付码：</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n"},{"title":"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能","date":"2017-08-25T09:41:23.000Z","_content":"\n# Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\n\n## 前言\n\n我搜索了下关于知乎Matisse的使用教程甚少，于是我就想着来做一个教程，这个教程是针对初学者的，因为我自己也是一个初学者，希望对各位刚刚接触Android开发的小伙伴有帮助！\n\n## 关于Matisse\n\nGithub页面：https://github.com/zhihu/Matisse\n\nA well-designed local image and video selector for Android\n\n意思既是一个本地图片和视频选择器，well-designed的，效果看起来很棒\n\n预览图：\n\n![](http://op4e089f0.bkt.clouddn.com/2017082501.png)\n\n## 效果\n\n这次我想到了我一个半年前做的项目（我第一个项目），一个倒数日记录器，可以给它增加更换背景图片功能的效果，效果如下，项目地址：https://github.com/zhaoweihaoChina/BigDays (欢迎star和fork)\n\n![](http://op4e089f0.bkt.clouddn.com/2017082502.gif)\n\n## 原理\n\n使用Matisse选择图片后会返回一个图片Uri值，将它显示在ImageView上并保存在Sharedpreferences里头，下次打开这个Activity就从Sharedpreferences里头拿出Uri值并显示在ImageView上，Let's do it！\n\n## 步骤\n\n### 配置Matisse\n\n- 添加依赖\n\n  Gradle:\n\n  ```\n  repositories {\n      jcenter()\n  }\n\n  dependencies {\n      compile 'com.zhihu.android:matisse:0.4.3'\n  }\n  ```\n\n  ​\n\n- 添加Permission\n\n  ``android.permission.READ_EXTERNAL_STORAGE``\n\n  `android.permission.WRITE_EXTERNAL_STORAGE`\n\n  如果是Android 6.0+以上要添加运行时权限获取\n\n  **权限获取代码**\n\n  按钮点击事件（将ZoomActivity替换成你当前Activity的名字）\n\n  ```java\n  ...setOnClickListener{\n  if(ContextCompat.checkSelfPermission(ZoomActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n      ActivityCompat.requestPermissions(ZoomActivity.this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},1);\n  }else{\n      //执行逻辑\n  }\n  }\n  ```\n\n  重写方法\n\n  ```java\n  @Override\n\n  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n      switch(requestCode){\n          case 1:\n              if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                  //执行逻辑\n              }else{\n                  Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n              }\n\n              break;\n          default:\n      }\n  ```\n\n  ​\n\n- 添加Proguard\n\n  打开proguard-rules.pro，添加下面代码，同步\n\n  ```\n  -dontwarn com.squareup.picasso.**\n  ```\n\n### 使用Matisse\n\n\n\n- 在上方**//执行逻辑**的地方添加如下代码\n\n```java\nMatisse.from(ZoomActivity.this)\n        .choose(MimeType.allOf())\n        .countable(true)\n        .maxSelectable(1)//由于这里我只需要一张照片，所以最多选择设置为1\n        .gridExpectedSize(getResources().getDimensionPixelSize(R.dimen.grid_expected_size))\n        .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)\n        .thumbnailScale(0.85f)\n        .imageEngine(new GlideEngine())\n        .forResult(REQUEST_CODE_CHOOSE);\n```\n\n\n\n- 在头部声明\n\n  `private final int REQUEST_CODE_CHOOSE=0;`\n\n\n\n- 重写方法\n\n  ```java\n  //这里方法是选择图片后返回的Uri数组\n  //返回的Uri数组\n  List<Uri> mSelected;\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n      super.onActivityResult(requestCode, resultCode, data);\n      if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {\n          mSelected = Matisse.obtainResult(data);\n        //用setImageURI将Uri数组第一个Uri显示在ImageView上\n          mImageView.setImageURI(mSelected.get(0));\n        //将Uri转换为String保存在SharedPreferences中    \n          SharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\n          editor.putString(\"imageUri\",mSelected.get(0).toString());\n          editor.apply();\n\n          Toast.makeText(this, \"Set up successfully\", Toast.LENGTH_SHORT).show();\n\n      }else if(requestCode!=RESULT_OK&&requestCode!=RESULT_CANCELED){\n        //设置失败提示\n          Toast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n      }\n  }\n  ```\n\n\n\n到这里已经将图片显示在ImageView上并保存起来\n\n接下来在每次打开这个Activity时将Uri读取出来并显示在ImageView上\n\n- 在OnCreate方法中添加如下代码\n\n```java\n//从SharedPreferences中读取之前保存好的Uri(String)\nSharedPreferences preferences=getSharedPreferences(\"data\",MODE_PRIVATE);\n\nString imageUriString=preferences.getString(\"imageUri\",null);\n//这里设定用户第一次打开没有保存任何Uri，就显示默认的图片(保存在drawable中)\nif(imageUriString!=null){\n  //非第一次打开，既有保存Uri\n  //String转换为Uri\n    Uri imageUri=Uri.parse(imageUriString);\n    mImageView.setImageURI(imageUri);\n}else{\n  //没有保存Uri，显示默认图片\n    mImageView.setImageDrawable(getResources().getDrawable(R.drawable.image));\n}\n```\n\n到这里效果就做好了,Have fun!\n\n## 联系\n\n如果对这篇文章有任何疑问可以联系我\n\nEmail:zhaoweihaochn@gmail.com\n\nBlog:http://zhaoweihao.me\n\n## 赞赏\n\n如果喜欢我的文章并对你有帮助，可以给我打赏\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","source":"_posts/Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能.md","raw":"---\ntitle: Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\ndate: 2017-08-25 17:41:23\ntags: [Android,Matisse]\n---\n\n# Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\n\n## 前言\n\n我搜索了下关于知乎Matisse的使用教程甚少，于是我就想着来做一个教程，这个教程是针对初学者的，因为我自己也是一个初学者，希望对各位刚刚接触Android开发的小伙伴有帮助！\n\n## 关于Matisse\n\nGithub页面：https://github.com/zhihu/Matisse\n\nA well-designed local image and video selector for Android\n\n意思既是一个本地图片和视频选择器，well-designed的，效果看起来很棒\n\n预览图：\n\n![](http://op4e089f0.bkt.clouddn.com/2017082501.png)\n\n## 效果\n\n这次我想到了我一个半年前做的项目（我第一个项目），一个倒数日记录器，可以给它增加更换背景图片功能的效果，效果如下，项目地址：https://github.com/zhaoweihaoChina/BigDays (欢迎star和fork)\n\n![](http://op4e089f0.bkt.clouddn.com/2017082502.gif)\n\n## 原理\n\n使用Matisse选择图片后会返回一个图片Uri值，将它显示在ImageView上并保存在Sharedpreferences里头，下次打开这个Activity就从Sharedpreferences里头拿出Uri值并显示在ImageView上，Let's do it！\n\n## 步骤\n\n### 配置Matisse\n\n- 添加依赖\n\n  Gradle:\n\n  ```\n  repositories {\n      jcenter()\n  }\n\n  dependencies {\n      compile 'com.zhihu.android:matisse:0.4.3'\n  }\n  ```\n\n  ​\n\n- 添加Permission\n\n  ``android.permission.READ_EXTERNAL_STORAGE``\n\n  `android.permission.WRITE_EXTERNAL_STORAGE`\n\n  如果是Android 6.0+以上要添加运行时权限获取\n\n  **权限获取代码**\n\n  按钮点击事件（将ZoomActivity替换成你当前Activity的名字）\n\n  ```java\n  ...setOnClickListener{\n  if(ContextCompat.checkSelfPermission(ZoomActivity.this, Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED){\n      ActivityCompat.requestPermissions(ZoomActivity.this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},1);\n  }else{\n      //执行逻辑\n  }\n  }\n  ```\n\n  重写方法\n\n  ```java\n  @Override\n\n  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n      switch(requestCode){\n          case 1:\n              if(grantResults.length>0&&grantResults[0]==PackageManager.PERMISSION_GRANTED){\n                  //执行逻辑\n              }else{\n                  Toast.makeText(this, \"You denied the permission\", Toast.LENGTH_SHORT).show();\n              }\n\n              break;\n          default:\n      }\n  ```\n\n  ​\n\n- 添加Proguard\n\n  打开proguard-rules.pro，添加下面代码，同步\n\n  ```\n  -dontwarn com.squareup.picasso.**\n  ```\n\n### 使用Matisse\n\n\n\n- 在上方**//执行逻辑**的地方添加如下代码\n\n```java\nMatisse.from(ZoomActivity.this)\n        .choose(MimeType.allOf())\n        .countable(true)\n        .maxSelectable(1)//由于这里我只需要一张照片，所以最多选择设置为1\n        .gridExpectedSize(getResources().getDimensionPixelSize(R.dimen.grid_expected_size))\n        .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)\n        .thumbnailScale(0.85f)\n        .imageEngine(new GlideEngine())\n        .forResult(REQUEST_CODE_CHOOSE);\n```\n\n\n\n- 在头部声明\n\n  `private final int REQUEST_CODE_CHOOSE=0;`\n\n\n\n- 重写方法\n\n  ```java\n  //这里方法是选择图片后返回的Uri数组\n  //返回的Uri数组\n  List<Uri> mSelected;\n  @Override\n  protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n      super.onActivityResult(requestCode, resultCode, data);\n      if (requestCode == REQUEST_CODE_CHOOSE && resultCode == RESULT_OK) {\n          mSelected = Matisse.obtainResult(data);\n        //用setImageURI将Uri数组第一个Uri显示在ImageView上\n          mImageView.setImageURI(mSelected.get(0));\n        //将Uri转换为String保存在SharedPreferences中    \n          SharedPreferences.Editor editor=getSharedPreferences(\"data\",MODE_PRIVATE).edit();\n          editor.putString(\"imageUri\",mSelected.get(0).toString());\n          editor.apply();\n\n          Toast.makeText(this, \"Set up successfully\", Toast.LENGTH_SHORT).show();\n\n      }else if(requestCode!=RESULT_OK&&requestCode!=RESULT_CANCELED){\n        //设置失败提示\n          Toast.makeText(this, \"Error\", Toast.LENGTH_SHORT).show();\n      }\n  }\n  ```\n\n\n\n到这里已经将图片显示在ImageView上并保存起来\n\n接下来在每次打开这个Activity时将Uri读取出来并显示在ImageView上\n\n- 在OnCreate方法中添加如下代码\n\n```java\n//从SharedPreferences中读取之前保存好的Uri(String)\nSharedPreferences preferences=getSharedPreferences(\"data\",MODE_PRIVATE);\n\nString imageUriString=preferences.getString(\"imageUri\",null);\n//这里设定用户第一次打开没有保存任何Uri，就显示默认的图片(保存在drawable中)\nif(imageUriString!=null){\n  //非第一次打开，既有保存Uri\n  //String转换为Uri\n    Uri imageUri=Uri.parse(imageUriString);\n    mImageView.setImageURI(imageUri);\n}else{\n  //没有保存Uri，显示默认图片\n    mImageView.setImageDrawable(getResources().getDrawable(R.drawable.image));\n}\n```\n\n到这里效果就做好了,Have fun!\n\n## 联系\n\n如果对这篇文章有任何疑问可以联系我\n\nEmail:zhaoweihaochn@gmail.com\n\nBlog:http://zhaoweihao.me\n\n## 赞赏\n\n如果喜欢我的文章并对你有帮助，可以给我打赏\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","slug":"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5f0006l0onc6liepm6","content":"<h1 id=\"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\"><a href=\"#Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\" class=\"headerlink\" title=\"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\"></a>Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我搜索了下关于知乎Matisse的使用教程甚少，于是我就想着来做一个教程，这个教程是针对初学者的，因为我自己也是一个初学者，希望对各位刚刚接触Android开发的小伙伴有帮助！</p>\n<h2 id=\"关于Matisse\"><a href=\"#关于Matisse\" class=\"headerlink\" title=\"关于Matisse\"></a>关于Matisse</h2><p>Github页面：<a href=\"https://github.com/zhihu/Matisse\" target=\"_blank\" rel=\"noopener\">https://github.com/zhihu/Matisse</a></p>\n<p>A well-designed local image and video selector for Android</p>\n<p>意思既是一个本地图片和视频选择器，well-designed的，效果看起来很棒</p>\n<p>预览图：</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017082501.png\" alt=\"\"></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>这次我想到了我一个半年前做的项目（我第一个项目），一个倒数日记录器，可以给它增加更换背景图片功能的效果，效果如下，项目地址：<a href=\"https://github.com/zhaoweihaoChina/BigDays\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/BigDays</a> (欢迎star和fork)</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017082502.gif\" alt=\"\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>使用Matisse选择图片后会返回一个图片Uri值，将它显示在ImageView上并保存在Sharedpreferences里头，下次打开这个Activity就从Sharedpreferences里头拿出Uri值并显示在ImageView上，Let’s do it！</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"配置Matisse\"><a href=\"#配置Matisse\" class=\"headerlink\" title=\"配置Matisse\"></a>配置Matisse</h3><ul>\n<li><p>添加依赖</p>\n<p>Gradle:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile &#39;com.zhihu.android:matisse:0.4.3&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加Permission</p>\n<p><code>android.permission.READ_EXTERNAL_STORAGE</code></p>\n<p><code>android.permission.WRITE_EXTERNAL_STORAGE</code></p>\n<p>如果是Android 6.0+以上要添加运行时权限获取</p>\n<p><strong>权限获取代码</strong></p>\n<p>按钮点击事件（将ZoomActivity替换成你当前Activity的名字）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...setOnClickListener&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(ZoomActivity.<span class=\"keyword\">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">    ActivityCompat.requestPermissions(ZoomActivity.<span class=\"keyword\">this</span>,<span class=\"keyword\">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//执行逻辑</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You denied the permission\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加Proguard</p>\n<p>打开proguard-rules.pro，添加下面代码，同步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-dontwarn com.squareup.picasso.**</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"使用Matisse\"><a href=\"#使用Matisse\" class=\"headerlink\" title=\"使用Matisse\"></a>使用Matisse</h3><ul>\n<li>在上方<strong>//执行逻辑</strong>的地方添加如下代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matisse.from(ZoomActivity.<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .choose(MimeType.allOf())</span><br><span class=\"line\">        .countable(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        .maxSelectable(<span class=\"number\">1</span>)<span class=\"comment\">//由于这里我只需要一张照片，所以最多选择设置为1</span></span><br><span class=\"line\">        .gridExpectedSize(getResources().getDimensionPixelSize(R.dimen.grid_expected_size))</span><br><span class=\"line\">        .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)</span><br><span class=\"line\">        .thumbnailScale(<span class=\"number\">0.85f</span>)</span><br><span class=\"line\">        .imageEngine(<span class=\"keyword\">new</span> GlideEngine())</span><br><span class=\"line\">        .forResult(REQUEST_CODE_CHOOSE);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在头部声明</p>\n<p><code>private final int REQUEST_CODE_CHOOSE=0;</code></p>\n</li>\n</ul>\n<ul>\n<li><p>重写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里方法是选择图片后返回的Uri数组</span></span><br><span class=\"line\"><span class=\"comment\">//返回的Uri数组</span></span><br><span class=\"line\">List&lt;Uri&gt; mSelected;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE_CHOOSE &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">        mSelected = Matisse.obtainResult(data);</span><br><span class=\"line\">      <span class=\"comment\">//用setImageURI将Uri数组第一个Uri显示在ImageView上</span></span><br><span class=\"line\">        mImageView.setImageURI(mSelected.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">      <span class=\"comment\">//将Uri转换为String保存在SharedPreferences中    </span></span><br><span class=\"line\">        SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">        editor.putString(<span class=\"string\">\"imageUri\"</span>,mSelected.get(<span class=\"number\">0</span>).toString());</span><br><span class=\"line\">        editor.apply();</span><br><span class=\"line\"></span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Set up successfully\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(requestCode!=RESULT_OK&amp;&amp;requestCode!=RESULT_CANCELED)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置失败提示</span></span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Error\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>到这里已经将图片显示在ImageView上并保存起来</p>\n<p>接下来在每次打开这个Activity时将Uri读取出来并显示在ImageView上</p>\n<ul>\n<li>在OnCreate方法中添加如下代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从SharedPreferences中读取之前保存好的Uri(String)</span></span><br><span class=\"line\">SharedPreferences preferences=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE);</span><br><span class=\"line\"></span><br><span class=\"line\">String imageUriString=preferences.getString(<span class=\"string\">\"imageUri\"</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里设定用户第一次打开没有保存任何Uri，就显示默认的图片(保存在drawable中)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imageUriString!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//非第一次打开，既有保存Uri</span></span><br><span class=\"line\">  <span class=\"comment\">//String转换为Uri</span></span><br><span class=\"line\">    Uri imageUri=Uri.parse(imageUriString);</span><br><span class=\"line\">    mImageView.setImageURI(imageUri);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//没有保存Uri，显示默认图片</span></span><br><span class=\"line\">    mImageView.setImageDrawable(getResources().getDrawable(R.drawable.image));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里效果就做好了,Have fun!</p>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><p>如果对这篇文章有任何疑问可以联系我</p>\n<p>Email:<a href=\"mailto:zhaoweihaochn@gmail.com\">zhaoweihaochn@gmail.com</a></p>\n<p>Blog:<a href=\"http://zhaoweihao.me\" target=\"_blank\" rel=\"noopener\">http://zhaoweihao.me</a></p>\n<h2 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h2><p>如果喜欢我的文章并对你有帮助，可以给我打赏</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\"><a href=\"#Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\" class=\"headerlink\" title=\"Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能\"></a>Android初学者：用知乎Matisse开源项目制作更换应用背景图片功能</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我搜索了下关于知乎Matisse的使用教程甚少，于是我就想着来做一个教程，这个教程是针对初学者的，因为我自己也是一个初学者，希望对各位刚刚接触Android开发的小伙伴有帮助！</p>\n<h2 id=\"关于Matisse\"><a href=\"#关于Matisse\" class=\"headerlink\" title=\"关于Matisse\"></a>关于Matisse</h2><p>Github页面：<a href=\"https://github.com/zhihu/Matisse\" target=\"_blank\" rel=\"noopener\">https://github.com/zhihu/Matisse</a></p>\n<p>A well-designed local image and video selector for Android</p>\n<p>意思既是一个本地图片和视频选择器，well-designed的，效果看起来很棒</p>\n<p>预览图：</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017082501.png\" alt=\"\"></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>这次我想到了我一个半年前做的项目（我第一个项目），一个倒数日记录器，可以给它增加更换背景图片功能的效果，效果如下，项目地址：<a href=\"https://github.com/zhaoweihaoChina/BigDays\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/BigDays</a> (欢迎star和fork)</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/2017082502.gif\" alt=\"\"></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>使用Matisse选择图片后会返回一个图片Uri值，将它显示在ImageView上并保存在Sharedpreferences里头，下次打开这个Activity就从Sharedpreferences里头拿出Uri值并显示在ImageView上，Let’s do it！</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><h3 id=\"配置Matisse\"><a href=\"#配置Matisse\" class=\"headerlink\" title=\"配置Matisse\"></a>配置Matisse</h3><ul>\n<li><p>添加依赖</p>\n<p>Gradle:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    jcenter()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    compile &#39;com.zhihu.android:matisse:0.4.3&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加Permission</p>\n<p><code>android.permission.READ_EXTERNAL_STORAGE</code></p>\n<p><code>android.permission.WRITE_EXTERNAL_STORAGE</code></p>\n<p>如果是Android 6.0+以上要添加运行时权限获取</p>\n<p><strong>权限获取代码</strong></p>\n<p>按钮点击事件（将ZoomActivity替换成你当前Activity的名字）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...setOnClickListener&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(ContextCompat.checkSelfPermission(ZoomActivity.<span class=\"keyword\">this</span>, Manifest.permission.READ_EXTERNAL_STORAGE)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">    ActivityCompat.requestPermissions(ZoomActivity.<span class=\"keyword\">this</span>,<span class=\"keyword\">new</span> String[]&#123;Manifest.permission.READ_EXTERNAL_STORAGE&#125;,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//执行逻辑</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span>(requestCode)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(grantResults.length&gt;<span class=\"number\">0</span>&amp;&amp;grantResults[<span class=\"number\">0</span>]==PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//执行逻辑</span></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"You denied the permission\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>​</p>\n</li>\n<li><p>添加Proguard</p>\n<p>打开proguard-rules.pro，添加下面代码，同步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-dontwarn com.squareup.picasso.**</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"使用Matisse\"><a href=\"#使用Matisse\" class=\"headerlink\" title=\"使用Matisse\"></a>使用Matisse</h3><ul>\n<li>在上方<strong>//执行逻辑</strong>的地方添加如下代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Matisse.from(ZoomActivity.<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        .choose(MimeType.allOf())</span><br><span class=\"line\">        .countable(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">        .maxSelectable(<span class=\"number\">1</span>)<span class=\"comment\">//由于这里我只需要一张照片，所以最多选择设置为1</span></span><br><span class=\"line\">        .gridExpectedSize(getResources().getDimensionPixelSize(R.dimen.grid_expected_size))</span><br><span class=\"line\">        .restrictOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)</span><br><span class=\"line\">        .thumbnailScale(<span class=\"number\">0.85f</span>)</span><br><span class=\"line\">        .imageEngine(<span class=\"keyword\">new</span> GlideEngine())</span><br><span class=\"line\">        .forResult(REQUEST_CODE_CHOOSE);</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>在头部声明</p>\n<p><code>private final int REQUEST_CODE_CHOOSE=0;</code></p>\n</li>\n</ul>\n<ul>\n<li><p>重写方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里方法是选择图片后返回的Uri数组</span></span><br><span class=\"line\"><span class=\"comment\">//返回的Uri数组</span></span><br><span class=\"line\">List&lt;Uri&gt; mSelected;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onActivityResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, <span class=\"keyword\">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == REQUEST_CODE_CHOOSE &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class=\"line\">        mSelected = Matisse.obtainResult(data);</span><br><span class=\"line\">      <span class=\"comment\">//用setImageURI将Uri数组第一个Uri显示在ImageView上</span></span><br><span class=\"line\">        mImageView.setImageURI(mSelected.get(<span class=\"number\">0</span>));</span><br><span class=\"line\">      <span class=\"comment\">//将Uri转换为String保存在SharedPreferences中    </span></span><br><span class=\"line\">        SharedPreferences.Editor editor=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE).edit();</span><br><span class=\"line\">        editor.putString(<span class=\"string\">\"imageUri\"</span>,mSelected.get(<span class=\"number\">0</span>).toString());</span><br><span class=\"line\">        editor.apply();</span><br><span class=\"line\"></span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Set up successfully\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(requestCode!=RESULT_OK&amp;&amp;requestCode!=RESULT_CANCELED)&#123;</span><br><span class=\"line\">      <span class=\"comment\">//设置失败提示</span></span><br><span class=\"line\">        Toast.makeText(<span class=\"keyword\">this</span>, <span class=\"string\">\"Error\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<p>到这里已经将图片显示在ImageView上并保存起来</p>\n<p>接下来在每次打开这个Activity时将Uri读取出来并显示在ImageView上</p>\n<ul>\n<li>在OnCreate方法中添加如下代码</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从SharedPreferences中读取之前保存好的Uri(String)</span></span><br><span class=\"line\">SharedPreferences preferences=getSharedPreferences(<span class=\"string\">\"data\"</span>,MODE_PRIVATE);</span><br><span class=\"line\"></span><br><span class=\"line\">String imageUriString=preferences.getString(<span class=\"string\">\"imageUri\"</span>,<span class=\"keyword\">null</span>);</span><br><span class=\"line\"><span class=\"comment\">//这里设定用户第一次打开没有保存任何Uri，就显示默认的图片(保存在drawable中)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(imageUriString!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">//非第一次打开，既有保存Uri</span></span><br><span class=\"line\">  <span class=\"comment\">//String转换为Uri</span></span><br><span class=\"line\">    Uri imageUri=Uri.parse(imageUriString);</span><br><span class=\"line\">    mImageView.setImageURI(imageUri);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//没有保存Uri，显示默认图片</span></span><br><span class=\"line\">    mImageView.setImageDrawable(getResources().getDrawable(R.drawable.image));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里效果就做好了,Have fun!</p>\n<h2 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h2><p>如果对这篇文章有任何疑问可以联系我</p>\n<p>Email:<a href=\"mailto:zhaoweihaochn@gmail.com\">zhaoweihaochn@gmail.com</a></p>\n<p>Blog:<a href=\"http://zhaoweihao.me\" target=\"_blank\" rel=\"noopener\">http://zhaoweihao.me</a></p>\n<h2 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h2><p>如果喜欢我的文章并对你有帮助，可以给我打赏</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n"},{"title":"Android开发笔记","date":"2017-12-07T07:19:09.000Z","_content":"我最近在学校期末作业使用Kotlin语言做一个校园社区Android APP，仍然在制作中。。。\n\nGithub项目地址：https://github.com/zhaoweihaoChina/hnuplus\n\n这是我用记录一些我在做的时候需要记录的东西，用来以后翻看。也给需要的同学做个参考。\n\n##### Activity 调用 Fragment的公共方法\n\n首先创建一个接口\n\n```java\npublic interface MyInterface\n{\n    void myAction() ;\n}\n```\n\n你的fragment必须声明这个接口\n\n```java\npublic MyFragment extends Fragment implements MyInterface\n```\n\n在你的Activity中，定义一个MyInterface类型的字段\n\n```java\n  private MyInterface listener ;\n\n  public void setListener(MyInterface listener)\n  {\n     this.listener = listener ;\n  }\n```\n\n当创建你的fragment时添加它\n\n```java\nsetListener(myFragment);\n```\n\n最后，当你想要在activity中调用fragment的方法时可以：\n\n```java\nlistener.myAction() ; // 这将调用MyFragment类中的方法\n```\n\n##### Fragment 调用 Activity的公共方法\n\n```\n((YourActivityClassName)getActivity()).yourPublicMethod();\n```\n\n##### 保存List<Object>到SharedPreferences中\n\n`Kotlin`\n\n```kotlin\n//保存\n//这是在Fragment里保存的代码\nval postList: List<Post> = ... //你需要保存的list\nval appSharedPrefs = PreferenceManager\n        .getDefaultSharedPreferences(activity.applicationContext)\nval prefsEditor = appSharedPrefs.edit()\nval gson = Gson()\nval json = gson.toJson(postList)\nprefsEditor.putString(\"MyObject\", json)\nprefsEditor.commit()\n//读取\n//这是在Fragment里读取的代码\nval appSharedPrefs = PreferenceManager\n                        .getDefaultSharedPreferences(activity.getApplicationContext())\nval gson = Gson()\nval json = appSharedPrefs.getString(\"MyObject\", \"\")\nval type = object : TypeToken<List<Post>>() {\n}.type\nval postList: List<Post> = gson.fromJson(json,type)\n```\n\n##### Uri 转换成Path\n\n`Kotlin`\n\n```kotlin\n//uri to path\nvar path: String? = null\nval uri = Matisse.obtainResult(data)[0]//你需要转换的uri\nlistener!!.showImage(uri)\nval filePathColumn = arrayOf(MediaStore.Images.Media.DATA)\nval cursor = contentResolver.query(uri, filePathColumn, null, null, null)\nif (cursor!!.moveToFirst()) {\n    val columnIndex = cursor.getColumnIndex(filePathColumn[0])\n    path = cursor.getString(columnIndex)//输出的path\n    Log.d(\"PA\",path)\n} else {\n    //boooo, cursor doesn't have rows ...\n}\ncursor.close()\n```\n\n##### 在Fragment中使用Kotlin-android-extensions\n\n`Kotlin`\n\n```kotlin\noverride fun onViewCreated(view: View?, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    btn_pic!!.setOnClickListener {//btn_pic是我在布局定义的按钮id名字\n      //逻辑代码\n    }\n}\n```\n\n### 联系我\nzhaoweihaochn@foxmail.com","source":"_posts/Android开发笔记.md","raw":"---\ntitle: Android开发笔记\ndate: 2017-12-07 15:19:09\ntags:\n---\n我最近在学校期末作业使用Kotlin语言做一个校园社区Android APP，仍然在制作中。。。\n\nGithub项目地址：https://github.com/zhaoweihaoChina/hnuplus\n\n这是我用记录一些我在做的时候需要记录的东西，用来以后翻看。也给需要的同学做个参考。\n\n##### Activity 调用 Fragment的公共方法\n\n首先创建一个接口\n\n```java\npublic interface MyInterface\n{\n    void myAction() ;\n}\n```\n\n你的fragment必须声明这个接口\n\n```java\npublic MyFragment extends Fragment implements MyInterface\n```\n\n在你的Activity中，定义一个MyInterface类型的字段\n\n```java\n  private MyInterface listener ;\n\n  public void setListener(MyInterface listener)\n  {\n     this.listener = listener ;\n  }\n```\n\n当创建你的fragment时添加它\n\n```java\nsetListener(myFragment);\n```\n\n最后，当你想要在activity中调用fragment的方法时可以：\n\n```java\nlistener.myAction() ; // 这将调用MyFragment类中的方法\n```\n\n##### Fragment 调用 Activity的公共方法\n\n```\n((YourActivityClassName)getActivity()).yourPublicMethod();\n```\n\n##### 保存List<Object>到SharedPreferences中\n\n`Kotlin`\n\n```kotlin\n//保存\n//这是在Fragment里保存的代码\nval postList: List<Post> = ... //你需要保存的list\nval appSharedPrefs = PreferenceManager\n        .getDefaultSharedPreferences(activity.applicationContext)\nval prefsEditor = appSharedPrefs.edit()\nval gson = Gson()\nval json = gson.toJson(postList)\nprefsEditor.putString(\"MyObject\", json)\nprefsEditor.commit()\n//读取\n//这是在Fragment里读取的代码\nval appSharedPrefs = PreferenceManager\n                        .getDefaultSharedPreferences(activity.getApplicationContext())\nval gson = Gson()\nval json = appSharedPrefs.getString(\"MyObject\", \"\")\nval type = object : TypeToken<List<Post>>() {\n}.type\nval postList: List<Post> = gson.fromJson(json,type)\n```\n\n##### Uri 转换成Path\n\n`Kotlin`\n\n```kotlin\n//uri to path\nvar path: String? = null\nval uri = Matisse.obtainResult(data)[0]//你需要转换的uri\nlistener!!.showImage(uri)\nval filePathColumn = arrayOf(MediaStore.Images.Media.DATA)\nval cursor = contentResolver.query(uri, filePathColumn, null, null, null)\nif (cursor!!.moveToFirst()) {\n    val columnIndex = cursor.getColumnIndex(filePathColumn[0])\n    path = cursor.getString(columnIndex)//输出的path\n    Log.d(\"PA\",path)\n} else {\n    //boooo, cursor doesn't have rows ...\n}\ncursor.close()\n```\n\n##### 在Fragment中使用Kotlin-android-extensions\n\n`Kotlin`\n\n```kotlin\noverride fun onViewCreated(view: View?, savedInstanceState: Bundle?) {\n    super.onViewCreated(view, savedInstanceState)\n    btn_pic!!.setOnClickListener {//btn_pic是我在布局定义的按钮id名字\n      //逻辑代码\n    }\n}\n```\n\n### 联系我\nzhaoweihaochn@foxmail.com","slug":"Android开发笔记","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5h0008l0on6a2pdz3b","content":"<p>我最近在学校期末作业使用Kotlin语言做一个校园社区Android APP，仍然在制作中。。。</p>\n<p>Github项目地址：<a href=\"https://github.com/zhaoweihaoChina/hnuplus\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/hnuplus</a></p>\n<p>这是我用记录一些我在做的时候需要记录的东西，用来以后翻看。也给需要的同学做个参考。</p>\n<h5 id=\"Activity-调用-Fragment的公共方法\"><a href=\"#Activity-调用-Fragment的公共方法\" class=\"headerlink\" title=\"Activity 调用 Fragment的公共方法\"></a>Activity 调用 Fragment的公共方法</h5><p>首先创建一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myAction</span><span class=\"params\">()</span> </span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你的fragment必须声明这个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> MyFragment extends Fragment implements MyInterface</span><br></pre></td></tr></table></figure>\n\n<p>在你的Activity中，定义一个MyInterface类型的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> MyInterface listener ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(MyInterface listener)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.listener = listener ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当创建你的fragment时添加它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setListener(myFragment);</span><br></pre></td></tr></table></figure>\n\n<p>最后，当你想要在activity中调用fragment的方法时可以：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener.myAction() ; <span class=\"comment\">// 这将调用MyFragment类中的方法</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Fragment-调用-Activity的公共方法\"><a href=\"#Fragment-调用-Activity的公共方法\" class=\"headerlink\" title=\"Fragment 调用 Activity的公共方法\"></a>Fragment 调用 Activity的公共方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((YourActivityClassName)getActivity()).yourPublicMethod();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"保存List到SharedPreferences中\"><a href=\"#保存List到SharedPreferences中\" class=\"headerlink\" title=\"保存List到SharedPreferences中\"></a>保存List<Object>到SharedPreferences中</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存</span></span><br><span class=\"line\"><span class=\"comment\">//这是在Fragment里保存的代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> postList: List&lt;Post&gt; = ... <span class=\"comment\">//你需要保存的list</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appSharedPrefs = PreferenceManager</span><br><span class=\"line\">        .getDefaultSharedPreferences(activity.applicationContext)</span><br><span class=\"line\"><span class=\"keyword\">val</span> prefsEditor = appSharedPrefs.edit()</span><br><span class=\"line\"><span class=\"keyword\">val</span> gson = Gson()</span><br><span class=\"line\"><span class=\"keyword\">val</span> json = gson.toJson(postList)</span><br><span class=\"line\">prefsEditor.putString(<span class=\"string\">\"MyObject\"</span>, json)</span><br><span class=\"line\">prefsEditor.commit()</span><br><span class=\"line\"><span class=\"comment\">//读取</span></span><br><span class=\"line\"><span class=\"comment\">//这是在Fragment里读取的代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appSharedPrefs = PreferenceManager</span><br><span class=\"line\">                        .getDefaultSharedPreferences(activity.getApplicationContext())</span><br><span class=\"line\"><span class=\"keyword\">val</span> gson = Gson()</span><br><span class=\"line\"><span class=\"keyword\">val</span> json = appSharedPrefs.getString(<span class=\"string\">\"MyObject\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> type = <span class=\"keyword\">object</span> : TypeToken&lt;List&lt;Post&gt;&gt;() &#123;</span><br><span class=\"line\">&#125;.type</span><br><span class=\"line\"><span class=\"keyword\">val</span> postList: List&lt;Post&gt; = gson.fromJson(json,type)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Uri-转换成Path\"><a href=\"#Uri-转换成Path\" class=\"headerlink\" title=\"Uri 转换成Path\"></a>Uri 转换成Path</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//uri to path</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path: String? = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> uri = Matisse.obtainResult(<span class=\"keyword\">data</span>)[<span class=\"number\">0</span>]<span class=\"comment\">//你需要转换的uri</span></span><br><span class=\"line\">listener!!.showImage(uri)</span><br><span class=\"line\"><span class=\"keyword\">val</span> filePathColumn = arrayOf(MediaStore.Images.Media.DATA)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor = contentResolver.query(uri, filePathColumn, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cursor!!.moveToFirst()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class=\"number\">0</span>])</span><br><span class=\"line\">    path = cursor.getString(columnIndex)<span class=\"comment\">//输出的path</span></span><br><span class=\"line\">    Log.d(<span class=\"string\">\"PA\"</span>,path)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//boooo, cursor doesn't have rows ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cursor.close()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Fragment中使用Kotlin-android-extensions\"><a href=\"#在Fragment中使用Kotlin-android-extensions\" class=\"headerlink\" title=\"在Fragment中使用Kotlin-android-extensions\"></a>在Fragment中使用Kotlin-android-extensions</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">    btn_pic!!.setOnClickListener &#123;<span class=\"comment\">//btn_pic是我在布局定义的按钮id名字</span></span><br><span class=\"line\">      <span class=\"comment\">//逻辑代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p><a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我最近在学校期末作业使用Kotlin语言做一个校园社区Android APP，仍然在制作中。。。</p>\n<p>Github项目地址：<a href=\"https://github.com/zhaoweihaoChina/hnuplus\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/hnuplus</a></p>\n<p>这是我用记录一些我在做的时候需要记录的东西，用来以后翻看。也给需要的同学做个参考。</p>\n<h5 id=\"Activity-调用-Fragment的公共方法\"><a href=\"#Activity-调用-Fragment的公共方法\" class=\"headerlink\" title=\"Activity 调用 Fragment的公共方法\"></a>Activity 调用 Fragment的公共方法</h5><p>首先创建一个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">MyInterface</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myAction</span><span class=\"params\">()</span> </span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你的fragment必须声明这个接口</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> MyFragment extends Fragment implements MyInterface</span><br></pre></td></tr></table></figure>\n\n<p>在你的Activity中，定义一个MyInterface类型的字段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> MyInterface listener ;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setListener</span><span class=\"params\">(MyInterface listener)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.listener = listener ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当创建你的fragment时添加它</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setListener(myFragment);</span><br></pre></td></tr></table></figure>\n\n<p>最后，当你想要在activity中调用fragment的方法时可以：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listener.myAction() ; <span class=\"comment\">// 这将调用MyFragment类中的方法</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Fragment-调用-Activity的公共方法\"><a href=\"#Fragment-调用-Activity的公共方法\" class=\"headerlink\" title=\"Fragment 调用 Activity的公共方法\"></a>Fragment 调用 Activity的公共方法</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((YourActivityClassName)getActivity()).yourPublicMethod();</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"保存List到SharedPreferences中\"><a href=\"#保存List到SharedPreferences中\" class=\"headerlink\" title=\"保存List到SharedPreferences中\"></a>保存List<Object>到SharedPreferences中</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//保存</span></span><br><span class=\"line\"><span class=\"comment\">//这是在Fragment里保存的代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> postList: List&lt;Post&gt; = ... <span class=\"comment\">//你需要保存的list</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appSharedPrefs = PreferenceManager</span><br><span class=\"line\">        .getDefaultSharedPreferences(activity.applicationContext)</span><br><span class=\"line\"><span class=\"keyword\">val</span> prefsEditor = appSharedPrefs.edit()</span><br><span class=\"line\"><span class=\"keyword\">val</span> gson = Gson()</span><br><span class=\"line\"><span class=\"keyword\">val</span> json = gson.toJson(postList)</span><br><span class=\"line\">prefsEditor.putString(<span class=\"string\">\"MyObject\"</span>, json)</span><br><span class=\"line\">prefsEditor.commit()</span><br><span class=\"line\"><span class=\"comment\">//读取</span></span><br><span class=\"line\"><span class=\"comment\">//这是在Fragment里读取的代码</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> appSharedPrefs = PreferenceManager</span><br><span class=\"line\">                        .getDefaultSharedPreferences(activity.getApplicationContext())</span><br><span class=\"line\"><span class=\"keyword\">val</span> gson = Gson()</span><br><span class=\"line\"><span class=\"keyword\">val</span> json = appSharedPrefs.getString(<span class=\"string\">\"MyObject\"</span>, <span class=\"string\">\"\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">val</span> type = <span class=\"keyword\">object</span> : TypeToken&lt;List&lt;Post&gt;&gt;() &#123;</span><br><span class=\"line\">&#125;.type</span><br><span class=\"line\"><span class=\"keyword\">val</span> postList: List&lt;Post&gt; = gson.fromJson(json,type)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Uri-转换成Path\"><a href=\"#Uri-转换成Path\" class=\"headerlink\" title=\"Uri 转换成Path\"></a>Uri 转换成Path</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//uri to path</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> path: String? = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">val</span> uri = Matisse.obtainResult(<span class=\"keyword\">data</span>)[<span class=\"number\">0</span>]<span class=\"comment\">//你需要转换的uri</span></span><br><span class=\"line\">listener!!.showImage(uri)</span><br><span class=\"line\"><span class=\"keyword\">val</span> filePathColumn = arrayOf(MediaStore.Images.Media.DATA)</span><br><span class=\"line\"><span class=\"keyword\">val</span> cursor = contentResolver.query(uri, filePathColumn, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> (cursor!!.moveToFirst()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class=\"number\">0</span>])</span><br><span class=\"line\">    path = cursor.getString(columnIndex)<span class=\"comment\">//输出的path</span></span><br><span class=\"line\">    Log.d(<span class=\"string\">\"PA\"</span>,path)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//boooo, cursor doesn't have rows ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">cursor.close()</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"在Fragment中使用Kotlin-android-extensions\"><a href=\"#在Fragment中使用Kotlin-android-extensions\" class=\"headerlink\" title=\"在Fragment中使用Kotlin-android-extensions\"></a>在Fragment中使用Kotlin-android-extensions</h5><p><code>Kotlin</code></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onViewCreated</span><span class=\"params\">(view: <span class=\"type\">View</span>?, savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class=\"line\">    btn_pic!!.setOnClickListener &#123;<span class=\"comment\">//btn_pic是我在布局定义的按钮id名字</span></span><br><span class=\"line\">      <span class=\"comment\">//逻辑代码</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p><a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n"},{"title":"Android Oreo(Android 8.0)尝鲜刷机教程 奥利奥","date":"2017-09-17T02:58:30.000Z","_content":"## 前言\n我最近被学校卖到乡下去做廉价劳动力，恰好周末有空就回来学校，突然想到给手机刷个Android O(也叫Android 8.0)尝尝鲜，想到之前在Google+上看到有人发帖子是国外一些大佬已经对Android O 做了很多机型的适配，居然还能看到我小米4的踪影，小米4真是经久不衰啊。不多说赶紧刷上，不得不说真的很流畅，不过用的时间不长，所以没有对耗电还有其他进行查看，用了一天感觉还真不错。建议各位君也体验一下。\n\n## 截图\n\n![Screenshot_20170916-235511.png](http://upload-images.jianshu.io/upload_images/5796527-2829fb39b6b86721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103725.png](http://upload-images.jianshu.io/upload_images/5796527-89e14ba3b3646a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-093655.png](http://upload-images.jianshu.io/upload_images/5796527-d8779040ac683410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103503.png](http://upload-images.jianshu.io/upload_images/5796527-fab78d9013cb11c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103520.png](http://upload-images.jianshu.io/upload_images/5796527-02308c88aa2cd08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![Screenshot_20170917-104713.png](http://upload-images.jianshu.io/upload_images/5796527-0c0a756dfd41e5fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n## 需要准备的东西\nAndroid 8.0 ROM: https://www.xda-developers.com/list-android-oreo-unofficial-ports/\n\n适用的Rom·Recovery·Gapps都能在上面的网址找到\n\n以小米4为例：\n\n\n![\n![Uploading 03_014160.png . . .]\n](http://upload-images.jianshu.io/upload_images/5796527-df81e082ffa9b872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![03.png](http://upload-images.jianshu.io/upload_images/5796527-8a45f1f75f858dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![01.png](http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## 刷机教程\n\n刷机教程可以在我之前的文章查看：\n[Android:手机刷第三方ROM教程，旧手机重生之术](http://zhaoweihao.me/2017/05/05/Android-%E6%89%8B%E6%9C%BA%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B%EF%BC%8C%E6%97%A7%E6%89%8B%E6%9C%BA%E9%87%8D%E7%94%9F%E4%B9%8B%E6%9C%AF/)(Blog)\n[Android:手机刷第三方ROM教程，旧手机重生之术](http://www.jianshu.com/p/d37eddad10f7)(简书)\n\n`注意`我上面文章的TWRP是旧版的，新版的清理数据是在Wipe-Format Data，请注意保存数据，Format Data是将手机里面全部内容清除\n\n`提醒`如果第一次刷机不懂的小伙伴，注意上面文章里的recovery和rom用上文的recovery和rom就可以了(如下图)\n![01.png](http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 后语\n由于我是全程翻墙的，所以如果有网站不能访问请搭上梯子即可\n\n## 联系方式\n如果有任何疑问可以联系我，由于我又要回去乡下，所以不能及时回复请见谅\n```Email:zhaoweihaochn@foxmail.com```\n\n由于目前我的gapps不能用，请先联系我上面的foxmail邮箱\n\n## 给我一瓶汽水\n由于在乡下，烈日当头，能给我一瓶汽水感激不尽\n\n![qr.jpg](http://upload-images.jianshu.io/upload_images/5796527-86bd4611744b2097.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/Android-Oreo-Android-8-0-尝鲜刷机教程-奥利奥.md","raw":"---\ntitle: Android Oreo(Android 8.0)尝鲜刷机教程 奥利奥\ndate: 2017-09-17 10:58:30\ntags:\n---\n## 前言\n我最近被学校卖到乡下去做廉价劳动力，恰好周末有空就回来学校，突然想到给手机刷个Android O(也叫Android 8.0)尝尝鲜，想到之前在Google+上看到有人发帖子是国外一些大佬已经对Android O 做了很多机型的适配，居然还能看到我小米4的踪影，小米4真是经久不衰啊。不多说赶紧刷上，不得不说真的很流畅，不过用的时间不长，所以没有对耗电还有其他进行查看，用了一天感觉还真不错。建议各位君也体验一下。\n\n## 截图\n\n![Screenshot_20170916-235511.png](http://upload-images.jianshu.io/upload_images/5796527-2829fb39b6b86721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103725.png](http://upload-images.jianshu.io/upload_images/5796527-89e14ba3b3646a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-093655.png](http://upload-images.jianshu.io/upload_images/5796527-d8779040ac683410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103503.png](http://upload-images.jianshu.io/upload_images/5796527-fab78d9013cb11c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n![Screenshot_20170917-103520.png](http://upload-images.jianshu.io/upload_images/5796527-02308c88aa2cd08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![Screenshot_20170917-104713.png](http://upload-images.jianshu.io/upload_images/5796527-0c0a756dfd41e5fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n\n\n## 需要准备的东西\nAndroid 8.0 ROM: https://www.xda-developers.com/list-android-oreo-unofficial-ports/\n\n适用的Rom·Recovery·Gapps都能在上面的网址找到\n\n以小米4为例：\n\n\n![\n![Uploading 03_014160.png . . .]\n](http://upload-images.jianshu.io/upload_images/5796527-df81e082ffa9b872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![03.png](http://upload-images.jianshu.io/upload_images/5796527-8a45f1f75f858dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![01.png](http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n\n## 刷机教程\n\n刷机教程可以在我之前的文章查看：\n[Android:手机刷第三方ROM教程，旧手机重生之术](http://zhaoweihao.me/2017/05/05/Android-%E6%89%8B%E6%9C%BA%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B%EF%BC%8C%E6%97%A7%E6%89%8B%E6%9C%BA%E9%87%8D%E7%94%9F%E4%B9%8B%E6%9C%AF/)(Blog)\n[Android:手机刷第三方ROM教程，旧手机重生之术](http://www.jianshu.com/p/d37eddad10f7)(简书)\n\n`注意`我上面文章的TWRP是旧版的，新版的清理数据是在Wipe-Format Data，请注意保存数据，Format Data是将手机里面全部内容清除\n\n`提醒`如果第一次刷机不懂的小伙伴，注意上面文章里的recovery和rom用上文的recovery和rom就可以了(如下图)\n![01.png](http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 后语\n由于我是全程翻墙的，所以如果有网站不能访问请搭上梯子即可\n\n## 联系方式\n如果有任何疑问可以联系我，由于我又要回去乡下，所以不能及时回复请见谅\n```Email:zhaoweihaochn@foxmail.com```\n\n由于目前我的gapps不能用，请先联系我上面的foxmail邮箱\n\n## 给我一瓶汽水\n由于在乡下，烈日当头，能给我一瓶汽水感激不尽\n\n![qr.jpg](http://upload-images.jianshu.io/upload_images/5796527-86bd4611744b2097.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"Android-Oreo-Android-8-0-尝鲜刷机教程-奥利奥","published":1,"updated":"2019-01-21T15:52:07.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5j000al0on0hxr8ifj","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我最近被学校卖到乡下去做廉价劳动力，恰好周末有空就回来学校，突然想到给手机刷个Android O(也叫Android 8.0)尝尝鲜，想到之前在Google+上看到有人发帖子是国外一些大佬已经对Android O 做了很多机型的适配，居然还能看到我小米4的踪影，小米4真是经久不衰啊。不多说赶紧刷上，不得不说真的很流畅，不过用的时间不长，所以没有对耗电还有其他进行查看，用了一天感觉还真不错。建议各位君也体验一下。</p>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-2829fb39b6b86721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170916-235511.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-89e14ba3b3646a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103725.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d8779040ac683410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-093655.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-fab78d9013cb11c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103503.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-02308c88aa2cd08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103520.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-0c0a756dfd41e5fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-104713.png\"></p>\n<h2 id=\"需要准备的东西\"><a href=\"#需要准备的东西\" class=\"headerlink\" title=\"需要准备的东西\"></a>需要准备的东西</h2><p>Android 8.0 ROM: <a href=\"https://www.xda-developers.com/list-android-oreo-unofficial-ports/\" target=\"_blank\" rel=\"noopener\">https://www.xda-developers.com/list-android-oreo-unofficial-ports/</a></p>\n<p>适用的Rom·Recovery·Gapps都能在上面的网址找到</p>\n<p>以小米4为例：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-df81e082ffa9b872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\n![Uploading 03_014160.png . . .]\n\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-8a45f1f75f858dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"03.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"01.png\"></p>\n<h2 id=\"刷机教程\"><a href=\"#刷机教程\" class=\"headerlink\" title=\"刷机教程\"></a>刷机教程</h2><p>刷机教程可以在我之前的文章查看：<br><a href=\"http://zhaoweihao.me/2017/05/05/Android-%E6%89%8B%E6%9C%BA%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B%EF%BC%8C%E6%97%A7%E6%89%8B%E6%9C%BA%E9%87%8D%E7%94%9F%E4%B9%8B%E6%9C%AF/\" target=\"_blank\" rel=\"noopener\">Android:手机刷第三方ROM教程，旧手机重生之术</a>(Blog)<br><a href=\"http://www.jianshu.com/p/d37eddad10f7\" target=\"_blank\" rel=\"noopener\">Android:手机刷第三方ROM教程，旧手机重生之术</a>(简书)</p>\n<p><code>注意</code>我上面文章的TWRP是旧版的，新版的清理数据是在Wipe-Format Data，请注意保存数据，Format Data是将手机里面全部内容清除</p>\n<p><code>提醒</code>如果第一次刷机不懂的小伙伴，注意上面文章里的recovery和rom用上文的recovery和rom就可以了(如下图)<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"01.png\"></p>\n<h2 id=\"后语\"><a href=\"#后语\" class=\"headerlink\" title=\"后语\"></a>后语</h2><p>由于我是全程翻墙的，所以如果有网站不能访问请搭上梯子即可</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果有任何疑问可以联系我，由于我又要回去乡下，所以不能及时回复请见谅<br><code>Email:zhaoweihaochn@foxmail.com</code></p>\n<p>由于目前我的gapps不能用，请先联系我上面的foxmail邮箱</p>\n<h2 id=\"给我一瓶汽水\"><a href=\"#给我一瓶汽水\" class=\"headerlink\" title=\"给我一瓶汽水\"></a>给我一瓶汽水</h2><p>由于在乡下，烈日当头，能给我一瓶汽水感激不尽</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-86bd4611744b2097.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"qr.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我最近被学校卖到乡下去做廉价劳动力，恰好周末有空就回来学校，突然想到给手机刷个Android O(也叫Android 8.0)尝尝鲜，想到之前在Google+上看到有人发帖子是国外一些大佬已经对Android O 做了很多机型的适配，居然还能看到我小米4的踪影，小米4真是经久不衰啊。不多说赶紧刷上，不得不说真的很流畅，不过用的时间不长，所以没有对耗电还有其他进行查看，用了一天感觉还真不错。建议各位君也体验一下。</p>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-2829fb39b6b86721.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170916-235511.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-89e14ba3b3646a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103725.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d8779040ac683410.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-093655.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-fab78d9013cb11c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103503.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-02308c88aa2cd08d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-103520.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-0c0a756dfd41e5fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170917-104713.png\"></p>\n<h2 id=\"需要准备的东西\"><a href=\"#需要准备的东西\" class=\"headerlink\" title=\"需要准备的东西\"></a>需要准备的东西</h2><p>Android 8.0 ROM: <a href=\"https://www.xda-developers.com/list-android-oreo-unofficial-ports/\" target=\"_blank\" rel=\"noopener\">https://www.xda-developers.com/list-android-oreo-unofficial-ports/</a></p>\n<p>适用的Rom·Recovery·Gapps都能在上面的网址找到</p>\n<p>以小米4为例：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-df81e082ffa9b872.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"\n![Uploading 03_014160.png . . .]\n\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-8a45f1f75f858dae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"03.png\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"01.png\"></p>\n<h2 id=\"刷机教程\"><a href=\"#刷机教程\" class=\"headerlink\" title=\"刷机教程\"></a>刷机教程</h2><p>刷机教程可以在我之前的文章查看：<br><a href=\"http://zhaoweihao.me/2017/05/05/Android-%E6%89%8B%E6%9C%BA%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B%EF%BC%8C%E6%97%A7%E6%89%8B%E6%9C%BA%E9%87%8D%E7%94%9F%E4%B9%8B%E6%9C%AF/\" target=\"_blank\" rel=\"noopener\">Android:手机刷第三方ROM教程，旧手机重生之术</a>(Blog)<br><a href=\"http://www.jianshu.com/p/d37eddad10f7\" target=\"_blank\" rel=\"noopener\">Android:手机刷第三方ROM教程，旧手机重生之术</a>(简书)</p>\n<p><code>注意</code>我上面文章的TWRP是旧版的，新版的清理数据是在Wipe-Format Data，请注意保存数据，Format Data是将手机里面全部内容清除</p>\n<p><code>提醒</code>如果第一次刷机不懂的小伙伴，注意上面文章里的recovery和rom用上文的recovery和rom就可以了(如下图)<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d9daa5207cdaac54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"01.png\"></p>\n<h2 id=\"后语\"><a href=\"#后语\" class=\"headerlink\" title=\"后语\"></a>后语</h2><p>由于我是全程翻墙的，所以如果有网站不能访问请搭上梯子即可</p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p>如果有任何疑问可以联系我，由于我又要回去乡下，所以不能及时回复请见谅<br><code>Email:zhaoweihaochn@foxmail.com</code></p>\n<p>由于目前我的gapps不能用，请先联系我上面的foxmail邮箱</p>\n<h2 id=\"给我一瓶汽水\"><a href=\"#给我一瓶汽水\" class=\"headerlink\" title=\"给我一瓶汽水\"></a>给我一瓶汽水</h2><p>由于在乡下，烈日当头，能给我一瓶汽水感激不尽</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-86bd4611744b2097.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"qr.jpg\"></p>\n"},{"title":"Android流行第三方库教程 - 第一篇 ButterKnife","date":"2018-06-15T10:11:32.000Z","_content":"\n\n这个系列会将我平时使用的Android一些流行第三方库拿出来简单讲解一些使用方法和应该在什么时候使用\n\n希望能帮助到更多处在Android初学阶段的朋友们\n\n第一篇先来讲解一个很常用也很好用的View注入框架--黄油刀，这是由著名的大神JakeWharton创作的。虽然现在Kotlin语言在Android端对View绑定的优化使得黄油刀没有在Kotlin中应用的必要（属于后话了），但是在仍在使用Java语言开发的项目中加入这个框架开发效率可谓是如鱼得水啊，非常重要一点是这个框架的加入对性能上是不会有影响的。\n\nButterKnife项目地址：https://github.com/JakeWharton/butterknife\n\n## 简单使用\n\n- 第一步 在app/build.gradle中 添加依赖 \n```\ndependencies {\n  implementation 'com.jakewharton:butterknife:8.8.1'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\n}\n```\n\n配置ButterKnife很简单，下面先来简单尝试下ButterKnife的简便吧\n\n- 第二步 使用\n\n首先先来回顾一下在之前我们如何使用按钮的：\n\n在Activity onCreate()方法中：\n```java\n  Button button = findViewById(R.id.submit);\n\n  button.setOnClickListener(v -> {\n            // 这里是点击按钮后的操作\n        });\n```\n\n现在我们按钮点击事件可以简化成\n```java\n  @OnClick(R.id.submit) void submit() {\n    // 这里是点击按钮后的操作\n  }\n```\n\n然后所有的View绑定都能简化为\n```java\n  @BindView(R.id.user) EditText username;\n  @BindView(R.id.pass) EditText password;\n```\n\n最后别忘了在onCreate()中加入\n```java\n  ButterKnife.bind(this);\n```\n\n整体示例代码：\n```java\nclass ExampleActivity extends Activity {\n  @BindView(R.id.user) EditText username;\n  @BindView(R.id.pass) EditText password;\n\n  @BindString(R.string.login_error) String loginErrorMessage;\n\n  @OnClick(R.id.submit) void submit() {\n    // TODO call server...\n  }\n\n  @Override public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.simple_activity);\n    ButterKnife.bind(this);\n    // TODO Use fields...\n  }\n}\n```\n# 更多\n## 资源绑定\n绑定已经预先定义好的资源\n```java\nclass ExampleActivity extends Activity {\n  @BindString(R.string.title) String title;\n  @BindDrawable(R.drawable.graphic) Drawable graphic;\n  @BindColor(R.color.red) int red; // int or ColorStateList field\n  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field\n  // ...\n}\n```\n\n## Fragment绑定\n你也能通过提供你的view来绑定任意的对象\n```java\npublic class FancyFragment extends Fragment {\n  @BindView(R.id.button1) Button button1;\n  @BindView(R.id.button2) Button button2;\n\n  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n}\n```\n## Adapter绑定\n另一个用途是简化list adapter内部的view holder模式\n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override public View getView(int position, View view, ViewGroup parent) {\n    ViewHolder holder;\n    if (view != null) {\n      holder = (ViewHolder) view.getTag();\n    } else {\n      view = inflater.inflate(R.layout.whatever, parent, false);\n      holder = new ViewHolder(view);\n      view.setTag(holder);\n    }\n\n    holder.name.setText(\"John Doe\");\n    // etc...\n\n    return view;\n  }\n\n  static class ViewHolder {\n    @BindView(R.id.title) TextView name;\n    @BindView(R.id.job_title) TextView jobTitle;\n\n    public ViewHolder(View view) {\n      ButterKnife.bind(this, view);\n    }\n  }\n}\n```\n\n## View列表\n你可以将多个view放入List或者array\n```java\n@BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })\nList<EditText> nameViews;\n```\napply方法可以允许你一次绑定所有view\n```java\nButterKnife.apply(nameViews, DISABLE);\nButterKnife.apply(nameViews, ENABLED, false);\n```\nAction 和 Setter接口允许执行一些比较简单的行为\n```java\nstatic final ButterKnife.Action<View> DISABLE = new ButterKnife.Action<View>() {\n  @Override public void apply(View view, int index) {\n    view.setEnabled(false);\n  }\n};\nstatic final ButterKnife.Setter<View, Boolean> ENABLED = new ButterKnife.Setter<View, Boolean>() {\n  @Override public void set(View view, Boolean value, int index) {\n    view.setEnabled(value);\n  }\n};\n```\n\n## 解除绑定\nFragment和activity有不同的生命周期。所以当我们在onCreateView方法中绑定一个fragment，要在onDestroyView方法中设置views为null。当执行bind方法时，ButterKnife会返回一个Unbinder实例给你。在适当的生命周期回调方法里执行unbind方法。\n```java\npublic class FancyFragment extends Fragment {\n  @BindView(R.id.button1) Button button1;\n  @BindView(R.id.button2) Button button2;\n  private Unbinder unbinder;\n\n  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    unbinder = ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n\n  @Override public void onDestroyView() {\n    super.onDestroyView();\n    unbinder.unbind();\n  }\n}\n```\n\n## 额外的绑定\n默认情况下，所有@Bind和listener绑定都是需要的。当目标view没有找到时会抛出异常。\n为了避免这种状况，添加一个@Nullable注解到变量，或者@Optiona注解到方法。\n注：所有@Nullable注解都可以用在变量上。\n```java\n@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;\n\n@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {\n  // TODO ...\n}\n```\n\n##监听器绑定\n监听器也可以自动配置在方法上\n```java\n@OnClick(R.id.submit)\npublic void submit(View view) {\n  // TODO submit data to server...\n}\n```\n所有监听器的参数都是可选的\n```java\n@OnClick(R.id.submit)\npublic void submit() {\n  // TODO submit data to server...\n}\n```\n定义一个特定类型然后会自动强转型\n```java\n@OnClick(R.id.submit)\npublic void sayHi(Button button) {\n  button.setText(\"Hello!\");\n}\n```\n\n通过不提供ID，自定义View能绑定到她们自己的监听器\n```java\npublic class FancyButton extends Button {\n  @OnClick\n  public void onClick() {\n    // TODO do something!\n  }\n}\n```\n\n# 联系方式\nzhaoweihao.dev@gmail.com","source":"_posts/Android流行第三方库教程 - 第一篇 ButterKnife.md","raw":"---\ntitle: 'Android流行第三方库教程 - 第一篇 ButterKnife'\ndate: 2018-06-15 18:11:32\ntags: [Android]\ncategories: Android\n---\n\n\n这个系列会将我平时使用的Android一些流行第三方库拿出来简单讲解一些使用方法和应该在什么时候使用\n\n希望能帮助到更多处在Android初学阶段的朋友们\n\n第一篇先来讲解一个很常用也很好用的View注入框架--黄油刀，这是由著名的大神JakeWharton创作的。虽然现在Kotlin语言在Android端对View绑定的优化使得黄油刀没有在Kotlin中应用的必要（属于后话了），但是在仍在使用Java语言开发的项目中加入这个框架开发效率可谓是如鱼得水啊，非常重要一点是这个框架的加入对性能上是不会有影响的。\n\nButterKnife项目地址：https://github.com/JakeWharton/butterknife\n\n## 简单使用\n\n- 第一步 在app/build.gradle中 添加依赖 \n```\ndependencies {\n  implementation 'com.jakewharton:butterknife:8.8.1'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'\n}\n```\n\n配置ButterKnife很简单，下面先来简单尝试下ButterKnife的简便吧\n\n- 第二步 使用\n\n首先先来回顾一下在之前我们如何使用按钮的：\n\n在Activity onCreate()方法中：\n```java\n  Button button = findViewById(R.id.submit);\n\n  button.setOnClickListener(v -> {\n            // 这里是点击按钮后的操作\n        });\n```\n\n现在我们按钮点击事件可以简化成\n```java\n  @OnClick(R.id.submit) void submit() {\n    // 这里是点击按钮后的操作\n  }\n```\n\n然后所有的View绑定都能简化为\n```java\n  @BindView(R.id.user) EditText username;\n  @BindView(R.id.pass) EditText password;\n```\n\n最后别忘了在onCreate()中加入\n```java\n  ButterKnife.bind(this);\n```\n\n整体示例代码：\n```java\nclass ExampleActivity extends Activity {\n  @BindView(R.id.user) EditText username;\n  @BindView(R.id.pass) EditText password;\n\n  @BindString(R.string.login_error) String loginErrorMessage;\n\n  @OnClick(R.id.submit) void submit() {\n    // TODO call server...\n  }\n\n  @Override public void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    setContentView(R.layout.simple_activity);\n    ButterKnife.bind(this);\n    // TODO Use fields...\n  }\n}\n```\n# 更多\n## 资源绑定\n绑定已经预先定义好的资源\n```java\nclass ExampleActivity extends Activity {\n  @BindString(R.string.title) String title;\n  @BindDrawable(R.drawable.graphic) Drawable graphic;\n  @BindColor(R.color.red) int red; // int or ColorStateList field\n  @BindDimen(R.dimen.spacer) Float spacer; // int (for pixel size) or float (for exact value) field\n  // ...\n}\n```\n\n## Fragment绑定\n你也能通过提供你的view来绑定任意的对象\n```java\npublic class FancyFragment extends Fragment {\n  @BindView(R.id.button1) Button button1;\n  @BindView(R.id.button2) Button button2;\n\n  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n}\n```\n## Adapter绑定\n另一个用途是简化list adapter内部的view holder模式\n```java\npublic class MyAdapter extends BaseAdapter {\n  @Override public View getView(int position, View view, ViewGroup parent) {\n    ViewHolder holder;\n    if (view != null) {\n      holder = (ViewHolder) view.getTag();\n    } else {\n      view = inflater.inflate(R.layout.whatever, parent, false);\n      holder = new ViewHolder(view);\n      view.setTag(holder);\n    }\n\n    holder.name.setText(\"John Doe\");\n    // etc...\n\n    return view;\n  }\n\n  static class ViewHolder {\n    @BindView(R.id.title) TextView name;\n    @BindView(R.id.job_title) TextView jobTitle;\n\n    public ViewHolder(View view) {\n      ButterKnife.bind(this, view);\n    }\n  }\n}\n```\n\n## View列表\n你可以将多个view放入List或者array\n```java\n@BindViews({ R.id.first_name, R.id.middle_name, R.id.last_name })\nList<EditText> nameViews;\n```\napply方法可以允许你一次绑定所有view\n```java\nButterKnife.apply(nameViews, DISABLE);\nButterKnife.apply(nameViews, ENABLED, false);\n```\nAction 和 Setter接口允许执行一些比较简单的行为\n```java\nstatic final ButterKnife.Action<View> DISABLE = new ButterKnife.Action<View>() {\n  @Override public void apply(View view, int index) {\n    view.setEnabled(false);\n  }\n};\nstatic final ButterKnife.Setter<View, Boolean> ENABLED = new ButterKnife.Setter<View, Boolean>() {\n  @Override public void set(View view, Boolean value, int index) {\n    view.setEnabled(value);\n  }\n};\n```\n\n## 解除绑定\nFragment和activity有不同的生命周期。所以当我们在onCreateView方法中绑定一个fragment，要在onDestroyView方法中设置views为null。当执行bind方法时，ButterKnife会返回一个Unbinder实例给你。在适当的生命周期回调方法里执行unbind方法。\n```java\npublic class FancyFragment extends Fragment {\n  @BindView(R.id.button1) Button button1;\n  @BindView(R.id.button2) Button button2;\n  private Unbinder unbinder;\n\n  @Override public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n    View view = inflater.inflate(R.layout.fancy_fragment, container, false);\n    unbinder = ButterKnife.bind(this, view);\n    // TODO Use fields...\n    return view;\n  }\n\n  @Override public void onDestroyView() {\n    super.onDestroyView();\n    unbinder.unbind();\n  }\n}\n```\n\n## 额外的绑定\n默认情况下，所有@Bind和listener绑定都是需要的。当目标view没有找到时会抛出异常。\n为了避免这种状况，添加一个@Nullable注解到变量，或者@Optiona注解到方法。\n注：所有@Nullable注解都可以用在变量上。\n```java\n@Nullable @BindView(R.id.might_not_be_there) TextView mightNotBeThere;\n\n@Optional @OnClick(R.id.maybe_missing) void onMaybeMissingClicked() {\n  // TODO ...\n}\n```\n\n##监听器绑定\n监听器也可以自动配置在方法上\n```java\n@OnClick(R.id.submit)\npublic void submit(View view) {\n  // TODO submit data to server...\n}\n```\n所有监听器的参数都是可选的\n```java\n@OnClick(R.id.submit)\npublic void submit() {\n  // TODO submit data to server...\n}\n```\n定义一个特定类型然后会自动强转型\n```java\n@OnClick(R.id.submit)\npublic void sayHi(Button button) {\n  button.setText(\"Hello!\");\n}\n```\n\n通过不提供ID，自定义View能绑定到她们自己的监听器\n```java\npublic class FancyButton extends Button {\n  @OnClick\n  public void onClick() {\n    // TODO do something!\n  }\n}\n```\n\n# 联系方式\nzhaoweihao.dev@gmail.com","slug":"Android流行第三方库教程 - 第一篇 ButterKnife","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5l000dl0on76ai4no7","content":"<p>这个系列会将我平时使用的Android一些流行第三方库拿出来简单讲解一些使用方法和应该在什么时候使用</p>\n<p>希望能帮助到更多处在Android初学阶段的朋友们</p>\n<p>第一篇先来讲解一个很常用也很好用的View注入框架–黄油刀，这是由著名的大神JakeWharton创作的。虽然现在Kotlin语言在Android端对View绑定的优化使得黄油刀没有在Kotlin中应用的必要（属于后话了），但是在仍在使用Java语言开发的项目中加入这个框架开发效率可谓是如鱼得水啊，非常重要一点是这个框架的加入对性能上是不会有影响的。</p>\n<p>ButterKnife项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"noopener\">https://github.com/JakeWharton/butterknife</a></p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><ul>\n<li>第一步 在app/build.gradle中 添加依赖 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation &#39;com.jakewharton:butterknife:8.8.1&#39;</span><br><span class=\"line\">  annotationProcessor &#39;com.jakewharton:butterknife-compiler:8.8.1&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>配置ButterKnife很简单，下面先来简单尝试下ButterKnife的简便吧</p>\n<ul>\n<li>第二步 使用</li>\n</ul>\n<p>首先先来回顾一下在之前我们如何使用按钮的：</p>\n<p>在Activity onCreate()方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button = findViewById(R.id.submit);</span><br><span class=\"line\"></span><br><span class=\"line\">button.setOnClickListener(v -&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这里是点击按钮后的操作</span></span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>现在我们按钮点击事件可以简化成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是点击按钮后的操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后所有的View绑定都能简化为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindView</span>(R.id.user) EditText username;</span><br><span class=\"line\"><span class=\"meta\">@BindView</span>(R.id.pass) EditText password;</span><br></pre></td></tr></table></figure>\n\n<p>最后别忘了在onCreate()中加入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<p>整体示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.user) EditText username;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.pass) EditText password;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@BindString</span>(R.string.login_error) String loginErrorMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OnClick</span>(R.id.submit) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO call server...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.simple_activity);</span><br><span class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><h2 id=\"资源绑定\"><a href=\"#资源绑定\" class=\"headerlink\" title=\"资源绑定\"></a>资源绑定</h2><p>绑定已经预先定义好的资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindString</span>(R.string.title) String title;</span><br><span class=\"line\">  <span class=\"meta\">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</span><br><span class=\"line\">  <span class=\"meta\">@BindColor</span>(R.color.red) <span class=\"keyword\">int</span> red; <span class=\"comment\">// int or ColorStateList field</span></span><br><span class=\"line\">  <span class=\"meta\">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class=\"comment\">// int (for pixel size) or float (for exact value) field</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fragment绑定\"><a href=\"#Fragment绑定\" class=\"headerlink\" title=\"Fragment绑定\"></a>Fragment绑定</h2><p>你也能通过提供你的view来绑定任意的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button1) Button button1;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button2) Button button2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Adapter绑定\"><a href=\"#Adapter绑定\" class=\"headerlink\" title=\"Adapter绑定\"></a>Adapter绑定</h2><p>另一个用途是简化list adapter内部的view holder模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">    ViewHolder holder;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      holder = (ViewHolder) view.getTag();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      view = inflater.inflate(R.layout.whatever, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      holder = <span class=\"keyword\">new</span> ViewHolder(view);</span><br><span class=\"line\">      view.setTag(holder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    holder.name.setText(<span class=\"string\">\"John Doe\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.title) TextView name;</span><br><span class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.job_title) TextView jobTitle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">      ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"View列表\"><a href=\"#View列表\" class=\"headerlink\" title=\"View列表\"></a>View列表</h2><p>你可以将多个view放入List或者array</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindViews</span>(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</span><br><span class=\"line\">List&lt;EditText&gt; nameViews;</span><br></pre></td></tr></table></figure>\n<p>apply方法可以允许你一次绑定所有view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ButterKnife.apply(nameViews, DISABLE);</span><br><span class=\"line\">ButterKnife.apply(nameViews, ENABLED, <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>Action 和 Setter接口允许执行一些比较简单的行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class=\"keyword\">new</span> ButterKnife.Action&lt;View&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    view.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class=\"keyword\">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(View view, Boolean value, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    view.setEnabled(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解除绑定\"><a href=\"#解除绑定\" class=\"headerlink\" title=\"解除绑定\"></a>解除绑定</h2><p>Fragment和activity有不同的生命周期。所以当我们在onCreateView方法中绑定一个fragment，要在onDestroyView方法中设置views为null。当执行bind方法时，ButterKnife会返回一个Unbinder实例给你。在适当的生命周期回调方法里执行unbind方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button1) Button button1;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button2) Button button2;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Unbinder unbinder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    unbinder = ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\">    unbinder.unbind();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"额外的绑定\"><a href=\"#额外的绑定\" class=\"headerlink\" title=\"额外的绑定\"></a>额外的绑定</h2><p>默认情况下，所有@Bind和listener绑定都是需要的。当目标view没有找到时会抛出异常。<br>为了避免这种状况，添加一个@Nullable注解到变量，或者@Optiona注解到方法。<br>注：所有@Nullable注解都可以用在变量上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span> <span class=\"meta\">@BindView</span>(R.id.might_not_be_there) TextView mightNotBeThere;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Optional</span> <span class=\"meta\">@OnClick</span>(R.id.maybe_missing) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMaybeMissingClicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>##监听器绑定<br>监听器也可以自动配置在方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO submit data to server...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有监听器的参数都是可选的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO submit data to server...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个特定类型然后会自动强转型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHi</span><span class=\"params\">(Button button)</span> </span>&#123;</span><br><span class=\"line\">  button.setText(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过不提供ID，自定义View能绑定到她们自己的监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@OnClick</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO do something!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p><a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个系列会将我平时使用的Android一些流行第三方库拿出来简单讲解一些使用方法和应该在什么时候使用</p>\n<p>希望能帮助到更多处在Android初学阶段的朋友们</p>\n<p>第一篇先来讲解一个很常用也很好用的View注入框架–黄油刀，这是由著名的大神JakeWharton创作的。虽然现在Kotlin语言在Android端对View绑定的优化使得黄油刀没有在Kotlin中应用的必要（属于后话了），但是在仍在使用Java语言开发的项目中加入这个框架开发效率可谓是如鱼得水啊，非常重要一点是这个框架的加入对性能上是不会有影响的。</p>\n<p>ButterKnife项目地址：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"noopener\">https://github.com/JakeWharton/butterknife</a></p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><ul>\n<li>第一步 在app/build.gradle中 添加依赖 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">  implementation &#39;com.jakewharton:butterknife:8.8.1&#39;</span><br><span class=\"line\">  annotationProcessor &#39;com.jakewharton:butterknife-compiler:8.8.1&#39;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>配置ButterKnife很简单，下面先来简单尝试下ButterKnife的简便吧</p>\n<ul>\n<li>第二步 使用</li>\n</ul>\n<p>首先先来回顾一下在之前我们如何使用按钮的：</p>\n<p>在Activity onCreate()方法中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Button button = findViewById(R.id.submit);</span><br><span class=\"line\"></span><br><span class=\"line\">button.setOnClickListener(v -&gt; &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 这里是点击按钮后的操作</span></span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>现在我们按钮点击事件可以简化成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里是点击按钮后的操作</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后所有的View绑定都能简化为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindView</span>(R.id.user) EditText username;</span><br><span class=\"line\"><span class=\"meta\">@BindView</span>(R.id.pass) EditText password;</span><br></pre></td></tr></table></figure>\n\n<p>最后别忘了在onCreate()中加入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br></pre></td></tr></table></figure>\n\n<p>整体示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.user) EditText username;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.pass) EditText password;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@BindString</span>(R.string.login_error) String loginErrorMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@OnClick</span>(R.id.submit) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO call server...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContentView(R.layout.simple_activity);</span><br><span class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><h2 id=\"资源绑定\"><a href=\"#资源绑定\" class=\"headerlink\" title=\"资源绑定\"></a>资源绑定</h2><p>绑定已经预先定义好的资源</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindString</span>(R.string.title) String title;</span><br><span class=\"line\">  <span class=\"meta\">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</span><br><span class=\"line\">  <span class=\"meta\">@BindColor</span>(R.color.red) <span class=\"keyword\">int</span> red; <span class=\"comment\">// int or ColorStateList field</span></span><br><span class=\"line\">  <span class=\"meta\">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class=\"comment\">// int (for pixel size) or float (for exact value) field</span></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fragment绑定\"><a href=\"#Fragment绑定\" class=\"headerlink\" title=\"Fragment绑定\"></a>Fragment绑定</h2><p>你也能通过提供你的view来绑定任意的对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button1) Button button1;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button2) Button button2;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Adapter绑定\"><a href=\"#Adapter绑定\" class=\"headerlink\" title=\"Adapter绑定\"></a>Adapter绑定</h2><p>另一个用途是简化list adapter内部的view holder模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">getView</span><span class=\"params\">(<span class=\"keyword\">int</span> position, View view, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">    ViewHolder holder;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (view != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      holder = (ViewHolder) view.getTag();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      view = inflater.inflate(R.layout.whatever, parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">      holder = <span class=\"keyword\">new</span> ViewHolder(view);</span><br><span class=\"line\">      view.setTag(holder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    holder.name.setText(<span class=\"string\">\"John Doe\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// etc...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewHolder</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.title) TextView name;</span><br><span class=\"line\">    <span class=\"meta\">@BindView</span>(R.id.job_title) TextView jobTitle;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewHolder</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">      ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"View列表\"><a href=\"#View列表\" class=\"headerlink\" title=\"View列表\"></a>View列表</h2><p>你可以将多个view放入List或者array</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@BindViews</span>(&#123; R.id.first_name, R.id.middle_name, R.id.last_name &#125;)</span><br><span class=\"line\">List&lt;EditText&gt; nameViews;</span><br></pre></td></tr></table></figure>\n<p>apply方法可以允许你一次绑定所有view</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ButterKnife.apply(nameViews, DISABLE);</span><br><span class=\"line\">ButterKnife.apply(nameViews, ENABLED, <span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<p>Action 和 Setter接口允许执行一些比较简单的行为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ButterKnife.Action&lt;View&gt; DISABLE = <span class=\"keyword\">new</span> ButterKnife.Action&lt;View&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(View view, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    view.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> ButterKnife.Setter&lt;View, Boolean&gt; ENABLED = <span class=\"keyword\">new</span> ButterKnife.Setter&lt;View, Boolean&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">set</span><span class=\"params\">(View view, Boolean value, <span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    view.setEnabled(value);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解除绑定\"><a href=\"#解除绑定\" class=\"headerlink\" title=\"解除绑定\"></a>解除绑定</h2><p>Fragment和activity有不同的生命周期。所以当我们在onCreateView方法中绑定一个fragment，要在onDestroyView方法中设置views为null。当执行bind方法时，ButterKnife会返回一个Unbinder实例给你。在适当的生命周期回调方法里执行unbind方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fragment</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button1) Button button1;</span><br><span class=\"line\">  <span class=\"meta\">@BindView</span>(R.id.button2) Button button2;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> Unbinder unbinder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View view = inflater.inflate(R.layout.fancy_fragment, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    unbinder = ButterKnife.bind(<span class=\"keyword\">this</span>, view);</span><br><span class=\"line\">    <span class=\"comment\">// TODO Use fields...</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\">    unbinder.unbind();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"额外的绑定\"><a href=\"#额外的绑定\" class=\"headerlink\" title=\"额外的绑定\"></a>额外的绑定</h2><p>默认情况下，所有@Bind和listener绑定都是需要的。当目标view没有找到时会抛出异常。<br>为了避免这种状况，添加一个@Nullable注解到变量，或者@Optiona注解到方法。<br>注：所有@Nullable注解都可以用在变量上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span> <span class=\"meta\">@BindView</span>(R.id.might_not_be_there) TextView mightNotBeThere;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Optional</span> <span class=\"meta\">@OnClick</span>(R.id.maybe_missing) <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onMaybeMissingClicked</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>##监听器绑定<br>监听器也可以自动配置在方法上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO submit data to server...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>所有监听器的参数都是可选的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">submit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// TODO submit data to server...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>定义一个特定类型然后会自动强转型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@OnClick</span>(R.id.submit)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sayHi</span><span class=\"params\">(Button button)</span> </span>&#123;</span><br><span class=\"line\">  button.setText(<span class=\"string\">\"Hello!\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过不提供ID，自定义View能绑定到她们自己的监听器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FancyButton</span> <span class=\"keyword\">extends</span> <span class=\"title\">Button</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@OnClick</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// TODO do something!</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><p><a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n"},{"title":"Android流行第三方库教程 - 第二篇 EventBus","date":"2018-06-16T10:11:32.000Z","_content":"\n\n这是系列的第二篇，这次主要介绍EventBus的配置和简单使用\n\n先来看看官方的介绍：\n\n>EventBus is an open-source library for Android and Java using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.\n\n>翻译：EventBus 是一个为了解耦而生的开源的Android和Java库，使用发布者和订阅者模式。EventBus用几行代码来实现中央通讯去解耦各个类 - 简化代码，去除依赖，还加快APP开发效率。\n\n好了，官方说明好像说的挺厉害的，那到底对于初学者来说EventBus能用在些什么地方呢？现在先来假设一种情况，你的某一个Activity中的Fragment中的Fragment想去执行另外一个Activity中Fragment的方法，这时候该怎么办，该是用Fragment和Activity通信去干吗？唔，也许可以，但是你得想想，这时候就要Fragment和Activity通信，然后Activity再和Acitivyt通信，最后Acitivy和Fragment通信，似乎有些复杂。。。，或许可以使用接口，或许可以使用广播，但是代码都不会少，而且都会有些复杂。\n\n这时候EventBus就可以横空出世了，接下来就来看看用EventBus怎么做吧，当然EventBus的用武之地肯定不止这些，靠大家自己去想象吧。\n## 配置\n先在 app/build.gradle中添加\n```\ncompile 'org.greenrobot:eventbus:3.1.1'\n```\n## EventBus 三部曲\n### 1.定义事件：\n```java\npublic static class MessageEvent { /* Additional fields if needed */ }\n```\n### 2.准备订阅者：\n声明和注释你的订阅方法，另外还可以指定进程模式：\n```java\n@Subscribe(threadMode = ThreadMode.MAIN)  \npublic void onMessageEvent(MessageEvent event) {/* Do something */};\n```\n\n注册和注销你的订阅者。在Android中的例子，Activity和Fragment应该通常根据他们生命周期注册：\n```java\n @Override\n public void onStart() {\n     super.onStart();\n     EventBus.getDefault().register(this);\n }\n\n @Override\n public void onStop() {\n     super.onStop();\n     EventBus.getDefault().unregister(this);\n }\n\n```\n\n\n### 3.发布事件：\n\n```java\n EventBus.getDefault().post(new MessageEvent());\n```\n\n## 实际例子\n例如我在登录成功后需要更新某些页面\n\n### 1.先定义事件：\n```java\npublic static class MessageEvent { /* Additional fields if needed */ }\n```\n### 2.发送事件\n\n在登录完成后发送事件：\n\n```java\n  EventBus.getDefault().post(new MessageEvent());\n```\n\n### 3.接受事件：\n\n在需要更新的页面也注册EventBus，这里是在onCreate方法和onDestroy方法是因为当登录成功发送事件那时候需要更新的页面先前是执行过onStop方法的，如果放在onStart和onStop的话就不能捕获到事件。\n\n```java\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // 注册EventBus\n        EventBus.getDefault().register(this);\n    }\n\n\n    @Override\n    public void onDestroy() {\n        // 注销EventBus\n        EventBus.getDefault().unregister(this);\n        super.onDestroy();\n\n    }\n\n```\n接着当接受到事件的时候在主进程更新UI\n```java\n    @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(LoginActivity.MessageEvent event) {\n    \t// 在这里更新UI的操作\n        requestTecOrStu();\n    }\n```\n\n## 更多\n\n更详细的使用教程可以参考官方文档：http://greenrobot.org/eventbus/documentation/\n\n## Contact \nzhaoweihao.dev@gmail.com","source":"_posts/Android流行第三方库教程 - 第二篇 EventBus.md","raw":"---\ntitle: 'Android流行第三方库教程 - 第二篇 EventBus'\ndate: 2018-06-16 18:11:32\ntags: [Android]\ncategories: Android\n---\n\n\n这是系列的第二篇，这次主要介绍EventBus的配置和简单使用\n\n先来看看官方的介绍：\n\n>EventBus is an open-source library for Android and Java using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.\n\n>翻译：EventBus 是一个为了解耦而生的开源的Android和Java库，使用发布者和订阅者模式。EventBus用几行代码来实现中央通讯去解耦各个类 - 简化代码，去除依赖，还加快APP开发效率。\n\n好了，官方说明好像说的挺厉害的，那到底对于初学者来说EventBus能用在些什么地方呢？现在先来假设一种情况，你的某一个Activity中的Fragment中的Fragment想去执行另外一个Activity中Fragment的方法，这时候该怎么办，该是用Fragment和Activity通信去干吗？唔，也许可以，但是你得想想，这时候就要Fragment和Activity通信，然后Activity再和Acitivyt通信，最后Acitivy和Fragment通信，似乎有些复杂。。。，或许可以使用接口，或许可以使用广播，但是代码都不会少，而且都会有些复杂。\n\n这时候EventBus就可以横空出世了，接下来就来看看用EventBus怎么做吧，当然EventBus的用武之地肯定不止这些，靠大家自己去想象吧。\n## 配置\n先在 app/build.gradle中添加\n```\ncompile 'org.greenrobot:eventbus:3.1.1'\n```\n## EventBus 三部曲\n### 1.定义事件：\n```java\npublic static class MessageEvent { /* Additional fields if needed */ }\n```\n### 2.准备订阅者：\n声明和注释你的订阅方法，另外还可以指定进程模式：\n```java\n@Subscribe(threadMode = ThreadMode.MAIN)  \npublic void onMessageEvent(MessageEvent event) {/* Do something */};\n```\n\n注册和注销你的订阅者。在Android中的例子，Activity和Fragment应该通常根据他们生命周期注册：\n```java\n @Override\n public void onStart() {\n     super.onStart();\n     EventBus.getDefault().register(this);\n }\n\n @Override\n public void onStop() {\n     super.onStop();\n     EventBus.getDefault().unregister(this);\n }\n\n```\n\n\n### 3.发布事件：\n\n```java\n EventBus.getDefault().post(new MessageEvent());\n```\n\n## 实际例子\n例如我在登录成功后需要更新某些页面\n\n### 1.先定义事件：\n```java\npublic static class MessageEvent { /* Additional fields if needed */ }\n```\n### 2.发送事件\n\n在登录完成后发送事件：\n\n```java\n  EventBus.getDefault().post(new MessageEvent());\n```\n\n### 3.接受事件：\n\n在需要更新的页面也注册EventBus，这里是在onCreate方法和onDestroy方法是因为当登录成功发送事件那时候需要更新的页面先前是执行过onStop方法的，如果放在onStart和onStop的话就不能捕获到事件。\n\n```java\n\n    @Override\n    public void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        // 注册EventBus\n        EventBus.getDefault().register(this);\n    }\n\n\n    @Override\n    public void onDestroy() {\n        // 注销EventBus\n        EventBus.getDefault().unregister(this);\n        super.onDestroy();\n\n    }\n\n```\n接着当接受到事件的时候在主进程更新UI\n```java\n    @Subscribe(threadMode = ThreadMode.MAIN)\n    public void onMessageEvent(LoginActivity.MessageEvent event) {\n    \t// 在这里更新UI的操作\n        requestTecOrStu();\n    }\n```\n\n## 更多\n\n更详细的使用教程可以参考官方文档：http://greenrobot.org/eventbus/documentation/\n\n## Contact \nzhaoweihao.dev@gmail.com","slug":"Android流行第三方库教程 - 第二篇 EventBus","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5m000el0onhnpyes1b","content":"<p>这是系列的第二篇，这次主要介绍EventBus的配置和简单使用</p>\n<p>先来看看官方的介绍：</p>\n<blockquote>\n<p>EventBus is an open-source library for Android and Java using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.</p>\n</blockquote>\n<blockquote>\n<p>翻译：EventBus 是一个为了解耦而生的开源的Android和Java库，使用发布者和订阅者模式。EventBus用几行代码来实现中央通讯去解耦各个类 - 简化代码，去除依赖，还加快APP开发效率。</p>\n</blockquote>\n<p>好了，官方说明好像说的挺厉害的，那到底对于初学者来说EventBus能用在些什么地方呢？现在先来假设一种情况，你的某一个Activity中的Fragment中的Fragment想去执行另外一个Activity中Fragment的方法，这时候该怎么办，该是用Fragment和Activity通信去干吗？唔，也许可以，但是你得想想，这时候就要Fragment和Activity通信，然后Activity再和Acitivyt通信，最后Acitivy和Fragment通信，似乎有些复杂。。。，或许可以使用接口，或许可以使用广播，但是代码都不会少，而且都会有些复杂。</p>\n<p>这时候EventBus就可以横空出世了，接下来就来看看用EventBus怎么做吧，当然EventBus的用武之地肯定不止这些，靠大家自己去想象吧。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>先在 app/build.gradle中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;org.greenrobot:eventbus:3.1.1&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"EventBus-三部曲\"><a href=\"#EventBus-三部曲\" class=\"headerlink\" title=\"EventBus 三部曲\"></a>EventBus 三部曲</h2><h3 id=\"1-定义事件：\"><a href=\"#1-定义事件：\" class=\"headerlink\" title=\"1.定义事件：\"></a>1.定义事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageEvent</span> </span>&#123; <span class=\"comment\">/* Additional fields if needed */</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-准备订阅者：\"><a href=\"#2-准备订阅者：\" class=\"headerlink\" title=\"2.准备订阅者：\"></a>2.准备订阅者：</h3><p>声明和注释你的订阅方法，另外还可以指定进程模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Subscribe</span>(threadMode = ThreadMode.MAIN)  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessageEvent</span><span class=\"params\">(MessageEvent event)</span> </span>&#123;<span class=\"comment\">/* Do something */</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注册和注销你的订阅者。在Android中的例子，Activity和Fragment应该通常根据他们生命周期注册：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">    EventBus.getDefault().register(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    EventBus.getDefault().unregister(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-发布事件：\"><a href=\"#3-发布事件：\" class=\"headerlink\" title=\"3.发布事件：\"></a>3.发布事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().post(<span class=\"keyword\">new</span> MessageEvent());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h2><p>例如我在登录成功后需要更新某些页面</p>\n<h3 id=\"1-先定义事件：\"><a href=\"#1-先定义事件：\" class=\"headerlink\" title=\"1.先定义事件：\"></a>1.先定义事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageEvent</span> </span>&#123; <span class=\"comment\">/* Additional fields if needed */</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-发送事件\"><a href=\"#2-发送事件\" class=\"headerlink\" title=\"2.发送事件\"></a>2.发送事件</h3><p>在登录完成后发送事件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().post(<span class=\"keyword\">new</span> MessageEvent());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接受事件：\"><a href=\"#3-接受事件：\" class=\"headerlink\" title=\"3.接受事件：\"></a>3.接受事件：</h3><p>在需要更新的页面也注册EventBus，这里是在onCreate方法和onDestroy方法是因为当登录成功发送事件那时候需要更新的页面先前是执行过onStop方法的，如果放在onStart和onStop的话就不能捕获到事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    <span class=\"comment\">// 注册EventBus</span></span><br><span class=\"line\">    EventBus.getDefault().register(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注销EventBus</span></span><br><span class=\"line\">    EventBus.getDefault().unregister(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着当接受到事件的时候在主进程更新UI</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessageEvent</span><span class=\"params\">(LoginActivity.MessageEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 在这里更新UI的操作</span></span><br><span class=\"line\">    requestTecOrStu();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>更详细的使用教程可以参考官方文档：<a href=\"http://greenrobot.org/eventbus/documentation/\" target=\"_blank\" rel=\"noopener\">http://greenrobot.org/eventbus/documentation/</a></p>\n<h2 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h2><p><a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这是系列的第二篇，这次主要介绍EventBus的配置和简单使用</p>\n<p>先来看看官方的介绍：</p>\n<blockquote>\n<p>EventBus is an open-source library for Android and Java using the publisher/subscriber pattern for loose coupling. EventBus enables central communication to decoupled classes with just a few lines of code – simplifying the code, removing dependencies, and speeding up app development.</p>\n</blockquote>\n<blockquote>\n<p>翻译：EventBus 是一个为了解耦而生的开源的Android和Java库，使用发布者和订阅者模式。EventBus用几行代码来实现中央通讯去解耦各个类 - 简化代码，去除依赖，还加快APP开发效率。</p>\n</blockquote>\n<p>好了，官方说明好像说的挺厉害的，那到底对于初学者来说EventBus能用在些什么地方呢？现在先来假设一种情况，你的某一个Activity中的Fragment中的Fragment想去执行另外一个Activity中Fragment的方法，这时候该怎么办，该是用Fragment和Activity通信去干吗？唔，也许可以，但是你得想想，这时候就要Fragment和Activity通信，然后Activity再和Acitivyt通信，最后Acitivy和Fragment通信，似乎有些复杂。。。，或许可以使用接口，或许可以使用广播，但是代码都不会少，而且都会有些复杂。</p>\n<p>这时候EventBus就可以横空出世了，接下来就来看看用EventBus怎么做吧，当然EventBus的用武之地肯定不止这些，靠大家自己去想象吧。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>先在 app/build.gradle中添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile &#39;org.greenrobot:eventbus:3.1.1&#39;</span><br></pre></td></tr></table></figure>\n<h2 id=\"EventBus-三部曲\"><a href=\"#EventBus-三部曲\" class=\"headerlink\" title=\"EventBus 三部曲\"></a>EventBus 三部曲</h2><h3 id=\"1-定义事件：\"><a href=\"#1-定义事件：\" class=\"headerlink\" title=\"1.定义事件：\"></a>1.定义事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageEvent</span> </span>&#123; <span class=\"comment\">/* Additional fields if needed */</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-准备订阅者：\"><a href=\"#2-准备订阅者：\" class=\"headerlink\" title=\"2.准备订阅者：\"></a>2.准备订阅者：</h3><p>声明和注释你的订阅方法，另外还可以指定进程模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Subscribe</span>(threadMode = ThreadMode.MAIN)  </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessageEvent</span><span class=\"params\">(MessageEvent event)</span> </span>&#123;<span class=\"comment\">/* Do something */</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>注册和注销你的订阅者。在Android中的例子，Activity和Fragment应该通常根据他们生命周期注册：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStart</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStart();</span><br><span class=\"line\">    EventBus.getDefault().register(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">    EventBus.getDefault().unregister(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-发布事件：\"><a href=\"#3-发布事件：\" class=\"headerlink\" title=\"3.发布事件：\"></a>3.发布事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().post(<span class=\"keyword\">new</span> MessageEvent());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实际例子\"><a href=\"#实际例子\" class=\"headerlink\" title=\"实际例子\"></a>实际例子</h2><p>例如我在登录成功后需要更新某些页面</p>\n<h3 id=\"1-先定义事件：\"><a href=\"#1-先定义事件：\" class=\"headerlink\" title=\"1.先定义事件：\"></a>1.先定义事件：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessageEvent</span> </span>&#123; <span class=\"comment\">/* Additional fields if needed */</span> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-发送事件\"><a href=\"#2-发送事件\" class=\"headerlink\" title=\"2.发送事件\"></a>2.发送事件</h3><p>在登录完成后发送事件：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EventBus.getDefault().post(<span class=\"keyword\">new</span> MessageEvent());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接受事件：\"><a href=\"#3-接受事件：\" class=\"headerlink\" title=\"3.接受事件：\"></a>3.接受事件：</h3><p>在需要更新的页面也注册EventBus，这里是在onCreate方法和onDestroy方法是因为当登录成功发送事件那时候需要更新的页面先前是执行过onStop方法的，如果放在onStart和onStop的话就不能捕获到事件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    <span class=\"comment\">// 注册EventBus</span></span><br><span class=\"line\">    EventBus.getDefault().register(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 注销EventBus</span></span><br><span class=\"line\">    EventBus.getDefault().unregister(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着当接受到事件的时候在主进程更新UI</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Subscribe</span>(threadMode = ThreadMode.MAIN)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessageEvent</span><span class=\"params\">(LoginActivity.MessageEvent event)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 在这里更新UI的操作</span></span><br><span class=\"line\">    requestTecOrStu();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h2><p>更详细的使用教程可以参考官方文档：<a href=\"http://greenrobot.org/eventbus/documentation/\" target=\"_blank\" rel=\"noopener\">http://greenrobot.org/eventbus/documentation/</a></p>\n<h2 id=\"Contact\"><a href=\"#Contact\" class=\"headerlink\" title=\"Contact\"></a>Contact</h2><p><a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n"},{"title":"Git SSH Key 生成步骤","date":"2017-07-11T12:59:51.000Z","_content":"# 一 、设置Git的user name和email：\n\n    $ git config --global user.name \"ZhaoWeihao\"\n    $ git config --global user.email \"zhaoweihaochn@foxmail.com\"\n\n# 二、生成SSH密钥过程：\n## 1.查看是否已经有了ssh密钥：\n\n    cd ~/.ssh\n\n如果没有密钥则不会有此文件夹，有则备份删除\n## 2.生存密钥：\n\n    $ ssh-keygen -t rsa -C “zhaoweihaochn@foxmail.com”\n\n按3个回车，密码为空。\n\nYour identification has been saved in /home/tekkub/.ssh/id_rsa.\nYour public key has been saved in /home/tekkub/.ssh/id_rsa.pub.\nThe key fingerprint is:\n………………\n\n最后得到了两个文件：id_rsa和id_rsa.pub\n\n## 3.添加密钥到ssh：\n\n    ssh-add 文件名\n\n需要之前输入密码。\n## 4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。\n打开https://github.com/ ，进入设置，然后添加ssh。\n\n## 5.测试：\n\n    ssh git@github.com\n\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\nERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access\nConnection to github.com closed.","source":"_posts/Git-SSH-Key-生成步骤.md","raw":"---\ntitle: Git SSH Key 生成步骤\ndate: 2017-07-11 20:59:51\ntags: [Git]\ncategories: 笔记\n---\n# 一 、设置Git的user name和email：\n\n    $ git config --global user.name \"ZhaoWeihao\"\n    $ git config --global user.email \"zhaoweihaochn@foxmail.com\"\n\n# 二、生成SSH密钥过程：\n## 1.查看是否已经有了ssh密钥：\n\n    cd ~/.ssh\n\n如果没有密钥则不会有此文件夹，有则备份删除\n## 2.生存密钥：\n\n    $ ssh-keygen -t rsa -C “zhaoweihaochn@foxmail.com”\n\n按3个回车，密码为空。\n\nYour identification has been saved in /home/tekkub/.ssh/id_rsa.\nYour public key has been saved in /home/tekkub/.ssh/id_rsa.pub.\nThe key fingerprint is:\n………………\n\n最后得到了两个文件：id_rsa和id_rsa.pub\n\n## 3.添加密钥到ssh：\n\n    ssh-add 文件名\n\n需要之前输入密码。\n## 4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。\n打开https://github.com/ ，进入设置，然后添加ssh。\n\n## 5.测试：\n\n    ssh git@github.com\n\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)? yes\nWarning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.\nERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access\nConnection to github.com closed.","slug":"Git-SSH-Key-生成步骤","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5p000il0on19fva8hc","content":"<h1 id=\"一-、设置Git的user-name和email：\"><a href=\"#一-、设置Git的user-name和email：\" class=\"headerlink\" title=\"一 、设置Git的user name和email：\"></a>一 、设置Git的user name和email：</h1><pre><code>$ git config --global user.name &quot;ZhaoWeihao&quot;\n$ git config --global user.email &quot;zhaoweihaochn@foxmail.com&quot;</code></pre><h1 id=\"二、生成SSH密钥过程：\"><a href=\"#二、生成SSH密钥过程：\" class=\"headerlink\" title=\"二、生成SSH密钥过程：\"></a>二、生成SSH密钥过程：</h1><h2 id=\"1-查看是否已经有了ssh密钥：\"><a href=\"#1-查看是否已经有了ssh密钥：\" class=\"headerlink\" title=\"1.查看是否已经有了ssh密钥：\"></a>1.查看是否已经有了ssh密钥：</h2><pre><code>cd ~/.ssh</code></pre><p>如果没有密钥则不会有此文件夹，有则备份删除</p>\n<h2 id=\"2-生存密钥：\"><a href=\"#2-生存密钥：\" class=\"headerlink\" title=\"2.生存密钥：\"></a>2.生存密钥：</h2><pre><code>$ ssh-keygen -t rsa -C “zhaoweihaochn@foxmail.com”</code></pre><p>按3个回车，密码为空。</p>\n<p>Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>………………</p>\n<p>最后得到了两个文件：id_rsa和id_rsa.pub</p>\n<h2 id=\"3-添加密钥到ssh：\"><a href=\"#3-添加密钥到ssh：\" class=\"headerlink\" title=\"3.添加密钥到ssh：\"></a>3.添加密钥到ssh：</h2><pre><code>ssh-add 文件名</code></pre><p>需要之前输入密码。</p>\n<h2 id=\"4-在github上添加ssh密钥，这要添加的是“id-rsa-pub”里面的公钥。\"><a href=\"#4-在github上添加ssh密钥，这要添加的是“id-rsa-pub”里面的公钥。\" class=\"headerlink\" title=\"4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。\"></a>4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。</h2><p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a> ，进入设置，然后添加ssh。</p>\n<h2 id=\"5-测试：\"><a href=\"#5-测试：\" class=\"headerlink\" title=\"5.测试：\"></a>5.测试：</h2><pre><code>ssh git@github.com</code></pre><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.<br>ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access<br>Connection to github.com closed.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-、设置Git的user-name和email：\"><a href=\"#一-、设置Git的user-name和email：\" class=\"headerlink\" title=\"一 、设置Git的user name和email：\"></a>一 、设置Git的user name和email：</h1><pre><code>$ git config --global user.name &quot;ZhaoWeihao&quot;\n$ git config --global user.email &quot;zhaoweihaochn@foxmail.com&quot;</code></pre><h1 id=\"二、生成SSH密钥过程：\"><a href=\"#二、生成SSH密钥过程：\" class=\"headerlink\" title=\"二、生成SSH密钥过程：\"></a>二、生成SSH密钥过程：</h1><h2 id=\"1-查看是否已经有了ssh密钥：\"><a href=\"#1-查看是否已经有了ssh密钥：\" class=\"headerlink\" title=\"1.查看是否已经有了ssh密钥：\"></a>1.查看是否已经有了ssh密钥：</h2><pre><code>cd ~/.ssh</code></pre><p>如果没有密钥则不会有此文件夹，有则备份删除</p>\n<h2 id=\"2-生存密钥：\"><a href=\"#2-生存密钥：\" class=\"headerlink\" title=\"2.生存密钥：\"></a>2.生存密钥：</h2><pre><code>$ ssh-keygen -t rsa -C “zhaoweihaochn@foxmail.com”</code></pre><p>按3个回车，密码为空。</p>\n<p>Your identification has been saved in /home/tekkub/.ssh/id_rsa.<br>Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>………………</p>\n<p>最后得到了两个文件：id_rsa和id_rsa.pub</p>\n<h2 id=\"3-添加密钥到ssh：\"><a href=\"#3-添加密钥到ssh：\" class=\"headerlink\" title=\"3.添加密钥到ssh：\"></a>3.添加密钥到ssh：</h2><pre><code>ssh-add 文件名</code></pre><p>需要之前输入密码。</p>\n<h2 id=\"4-在github上添加ssh密钥，这要添加的是“id-rsa-pub”里面的公钥。\"><a href=\"#4-在github上添加ssh密钥，这要添加的是“id-rsa-pub”里面的公钥。\" class=\"headerlink\" title=\"4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。\"></a>4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。</h2><p>打开<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a> ，进入设置，然后添加ssh。</p>\n<h2 id=\"5-测试：\"><a href=\"#5-测试：\" class=\"headerlink\" title=\"5.测试：\"></a>5.测试：</h2><pre><code>ssh git@github.com</code></pre><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.<br>ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access<br>Connection to github.com closed.</p>\n"},{"title":"Hexo+Github pages 创建一个属于自己的博客","date":"2017-04-29T05:13:33.000Z","_content":"# 写在前面\n## 什么是Hexo？\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。[Hexo官方文档中文版](https://hexo.io/zh-cn/docs/index.html)\n\n\n\n## 适合人群\n * 喜欢写博客\n * 有MarkDown语法基础\n * 会使用版本控制Git\n * 了解使用Github\n\n## 预览效果\n我的博客也是用Hexo+Github搭建的，主题用的是Next<br>\n[前往我的博客](https://zhaoweihaochina.github.io/)\n\n# 环境准备\n## 安装Git\n下载[Git](https://git-scm.com/download/win)并执行安装就好了\n>由于众所周知的原因，国内下载很慢，Hexo官方文档很体贴的给出了[这个页面](https://github.com/waylau/git-for-win)，里面有收录百度云下载地址。**我的做法是将下载地址复制到迅雷**\n\n\n## 安装Node.js\n在windows下安装[Node.js](https://nodejs.org/en/)十分简单，只需要下载并安装就好了\n## 安装Hexo\n利用npm命令即可安装\n\n     npm install -g hexo-cli\n`注意`\n建议挂上代理\n`问题`\n\n* 一些旧的文章使用\n    npm install -g hexo\n会出现错误，最新指令请参考[Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)\n* npm ERR! registry error parsing json 错误\n可能需要设置npm代理,执行命令\n    npm config set registry http://registry.cnpmjs.org\n* hexo:command not found\n删除刚刚安装的npm目录，重新执行命令npm install -g hexo-cli安装hexo\n\n## 创建hexo文件夹\n安装完成后，在自己喜欢的目录下（例如：E:\\Myblog\\Hexo）执行如下命令(在E:\\Myblog\\Hexo目录空白处右键选择Git Bash),Hexo就会自动生成所需要的文件\n\n    hexo init\n## 安装依赖包\n\n    npm install\n`此步建议挂代理`\n\n## 本地预览\n现在已经在本地搭建了Hexo博客了，执行如下命令(在E:\\Myblog\\Hexo)，然后到浏览器输入localhost:4000即可查看\n\n    hexo generate\n    hexo server\n    \n到现在为止，本地hexo博客已经搭建完成，接下来就是部署到Github\n`问题`\n\n* 执行hexo server提示找不到该指令\n解决办法：\n在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n\n\n    npm install hexo -server --save\n## github创建博客\n* 注册账号\n地址:https://github.com/\n输入账号、邮箱和密码点击Sign up for Github\n\n![github.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page.jpg)\n\n* 创建github pages仓库\n这个仓库的名字需要和你的账号对应，格式: yourname.github.io\n输入基本信息，然后点击创建仓库.\n`帮助`\n例如我的github名字是zhaoweihaoChina,那么我的仓库名字就是zhaoweihaoChina.github.io\n\n![create repository.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_2.jpg)\n\n## 生成SSH密钥\n\nssh-keygen -t rsa -C \"你的邮箱地址\"，按3个回车，密码为空。\n\n在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。\n\n## 在GitHub上添加SSH密钥\n打开id_rsa.pub，复制全文。打开 https://github.com/settings/ssh ，Add SSH key，粘贴进去。\n\n# Hexo使用\n## 目录结构\n\n    .\n    ├── _config.yml#网站配置信息\n    ├── package.json#应用程序信息\n    ├── scaffolds#模板\n    ├── source\n    |   ├── _drafts#草稿\n    |   └── _posts#文章\n    └── themes#主题\n\n更详细说明：[Hexo官方文档-建站篇](https://hexo.io/zh-cn/docs/setup.html)\n\n## 全局配置 _config.yml\n\n    # Hexo Configuration\n    ## Docs: http://hexo.io/docs/configuration.html\n    ## Source: https://github.com/hexojs/hexo/\n    # Site #站点信息\n    title:  #标题\n    subtitle:  #副标题\n    description:  #站点描述，给搜索引擎看的\n    author:  #作者\n    email:  #电子邮箱\n    language: zh-CN #语言\n    timezone: Asia/Shanghai#时区\n    # URL #链接格式\n    url:  #网址\n    root: / #根目录\n    permalink: :year/:month/:day/:title/ #文章的链接格式\n    permalink_defaults:\n    # Directory #目录\n    tag_dir: tags #标签目录\n    archive_dir: archives #存档目录\n    category_dir: categories #分类目录\n    code_dir: downloads/code\n    source_dir: source #源文件目录\n    public_dir: public #生成的网页文件目录\n    # Writing #写作\n    new_post_name: :title.md #新文章标题\n    default_layout: post #默认的模板，包括     post、page、photo、draft（文章、页面、照片、草稿）\n    titlecase: false #标题转换成大写\n    external_link: true #在新选项卡中打开连接\n    filename_case: 0\n    render_drafts: false\n    post_asset_folder: false\n    relative_link: false\n    highlight: #语法高亮\n      enable: true #是否启用\n      line_number: true #显示行号\n      tab_replace:\n    # Category & Tag #分类和标签\n    default_category: uncategorized #默认分类\n    category_map:\n    tag_map:\n    # Archives\n    2: 开启分页\n    1: 禁用分页\n    0: 全部禁用\n    archive: 2\n    category: 2\n    tag: 2\n    # Server #本地服务器\n    port: 4000 #端口号\n    server_ip: localhost #IP 地址\n    logger: false\n    logger_format: dev\n    # Date / Time format #日期时间格式\n    date_format: YYYY-MM-DD     #参考http://momentjs.com/docs/#/displaying/format/\n    time_format: H:mm:ss\n    # Pagination #分页\n    per_page: 10 #每页文章数，设置成 0 禁用分页\n    pagination_dir: page\n    # Disqus #Disqus评论，替换为多说\n    disqus_shortname:\n    # Extensions #拓展插件\n    theme: landscape-plus #主题\n    exclude_generator:\n    plugins: #插件，例如生成 RSS 和站点地图的\n    - hexo-generator-feed\n    - hexo-generator-sitemap\n    # Deployment #部署\n    deploy:\n      type: git\n      repo: 刚刚github创库地址.git\n      branch: master\n      \n更详细说明:[Hexo官方文档-配置篇](https://hexo.io/zh-cn/docs/configuration.html)\n\n`注意`\n\n* 这里的格式很重要！很重要！很重要！（重要的事情说三遍）\n* 每个\":\"冒号后面都有一个空格\n* repo: 刚刚github创库地址.git\n\n## Hexo命令的使用\n常用命令:\n\n    hexo help #查看帮助\n    hexo init #初始化一个目录\n    hexo new \"postName\" #新建文章\n    hexo new page \"pageName\" #新建页面\n    hexo generate #生成网页，可以在 public 目录查看整个网站的文件\n    hexo server #本地预览，'Ctrl+C'关闭\n    hexo deploy #部署.deploy目录\n    hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**\n    \n简写：\n\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    \n更详细的命令:[Hexo官方文档-命令篇](https://hexo.io/zh-cn/docs/commands.html)\n\n## 写文章\n\n新建文章\n\n    hexo new \"标题\"\n\n在 _posts 目录下会生成文件标题.md\n\n    title: 标题\n    date: 2017-04-29 07:56:29 #发表日期，一般不改动\n    categories: hexo #文章文类\n    tags: [hexo,github] #文章标签，多于一项时用这种格式\n    ---\n    正文，使用Markdown语法书写\n\nMarkdown编辑器推荐：[Cmd Markdown](https://www.zybuluo.com/mdeditor)\nMarkdown基础语法：[Cmd Markdown 简明语法手册](https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown)\n\n编辑完后保存,hexo server预览\n\n## Hexo部署\n执行下列指令即可完成部署。\n\n    hexo generate\n    hexo deploy\n\n以下提示说明部署成功\n\n    [info] Deploy done: git\n    \n打开https://yourname.github.io就可以看到你的博客了\n\n\n\n## Hexo主题\n\n这里以配置next主题为例\n\n###### 1. 打开[Hexo官方主题](https://hexo.io/themes/)\n\n###### 2. 找到next主题\n  ![next.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_3.jpg)\n\n###### 3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到[next使用文档](http://theme-next.iissnan.com/getting-started.html)\n###### 4. 下载主题\n  执行如下命令(在E:\\Myblog\\Hexo)\n\n\n      git clone https://github.com/iissnan/hexo-theme-next themes/next \n###### 5. 启用主题\n\n   打开_config.yml，找到`theme`字段，，并将其值更改为`next`。\n\n\n    theme: next\n  现在next主题已经配置完成了，执行如下命令(在E:\\Myblog\\Hexo)\n\n    hexo clean\n    hexo server\n    \n  然后到浏览器输入localhost:4000即可查看\n\n   更加详细的next主题配置请到[next开始使用](http://theme-next.iissnan.com/getting-started.html)和[next主题配置](http://theme-next.iissnan.com/theme-settings.html)查看\n   \n   \n###### 6. 部署到github\n设置满意后，执行\n\n\n    hero generate\n    hero deploy\n\n  然后到yourname.github.io即可查看效果（会有一点延迟）\n  \n  # 写在最后\n  \n  昨天折腾了一晚上得出来的经验，汇总给大家\n  \n  如果大家觉得本文对你有帮助，不妨微信扫描以下二维码，请我喝杯咖啡\n  \n  ![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","source":"_posts/Hexo-Github-pages-创建一个属于自己的博客.md","raw":"---\ntitle: Hexo+Github pages 创建一个属于自己的博客\ndate: 2017-04-29 13:13:33\ntags: [Hexo,Github,博客]\ncategories: 博客\n---\n# 写在前面\n## 什么是Hexo？\n>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 `Markdown`（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。[Hexo官方文档中文版](https://hexo.io/zh-cn/docs/index.html)\n\n\n\n## 适合人群\n * 喜欢写博客\n * 有MarkDown语法基础\n * 会使用版本控制Git\n * 了解使用Github\n\n## 预览效果\n我的博客也是用Hexo+Github搭建的，主题用的是Next<br>\n[前往我的博客](https://zhaoweihaochina.github.io/)\n\n# 环境准备\n## 安装Git\n下载[Git](https://git-scm.com/download/win)并执行安装就好了\n>由于众所周知的原因，国内下载很慢，Hexo官方文档很体贴的给出了[这个页面](https://github.com/waylau/git-for-win)，里面有收录百度云下载地址。**我的做法是将下载地址复制到迅雷**\n\n\n## 安装Node.js\n在windows下安装[Node.js](https://nodejs.org/en/)十分简单，只需要下载并安装就好了\n## 安装Hexo\n利用npm命令即可安装\n\n     npm install -g hexo-cli\n`注意`\n建议挂上代理\n`问题`\n\n* 一些旧的文章使用\n    npm install -g hexo\n会出现错误，最新指令请参考[Hexo官方文档](https://hexo.io/zh-cn/docs/index.html)\n* npm ERR! registry error parsing json 错误\n可能需要设置npm代理,执行命令\n    npm config set registry http://registry.cnpmjs.org\n* hexo:command not found\n删除刚刚安装的npm目录，重新执行命令npm install -g hexo-cli安装hexo\n\n## 创建hexo文件夹\n安装完成后，在自己喜欢的目录下（例如：E:\\Myblog\\Hexo）执行如下命令(在E:\\Myblog\\Hexo目录空白处右键选择Git Bash),Hexo就会自动生成所需要的文件\n\n    hexo init\n## 安装依赖包\n\n    npm install\n`此步建议挂代理`\n\n## 本地预览\n现在已经在本地搭建了Hexo博客了，执行如下命令(在E:\\Myblog\\Hexo)，然后到浏览器输入localhost:4000即可查看\n\n    hexo generate\n    hexo server\n    \n到现在为止，本地hexo博客已经搭建完成，接下来就是部署到Github\n`问题`\n\n* 执行hexo server提示找不到该指令\n解决办法：\n在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：\n\n\n    npm install hexo -server --save\n## github创建博客\n* 注册账号\n地址:https://github.com/\n输入账号、邮箱和密码点击Sign up for Github\n\n![github.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page.jpg)\n\n* 创建github pages仓库\n这个仓库的名字需要和你的账号对应，格式: yourname.github.io\n输入基本信息，然后点击创建仓库.\n`帮助`\n例如我的github名字是zhaoweihaoChina,那么我的仓库名字就是zhaoweihaoChina.github.io\n\n![create repository.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_2.jpg)\n\n## 生成SSH密钥\n\nssh-keygen -t rsa -C \"你的邮箱地址\"，按3个回车，密码为空。\n\n在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。\n\n## 在GitHub上添加SSH密钥\n打开id_rsa.pub，复制全文。打开 https://github.com/settings/ssh ，Add SSH key，粘贴进去。\n\n# Hexo使用\n## 目录结构\n\n    .\n    ├── _config.yml#网站配置信息\n    ├── package.json#应用程序信息\n    ├── scaffolds#模板\n    ├── source\n    |   ├── _drafts#草稿\n    |   └── _posts#文章\n    └── themes#主题\n\n更详细说明：[Hexo官方文档-建站篇](https://hexo.io/zh-cn/docs/setup.html)\n\n## 全局配置 _config.yml\n\n    # Hexo Configuration\n    ## Docs: http://hexo.io/docs/configuration.html\n    ## Source: https://github.com/hexojs/hexo/\n    # Site #站点信息\n    title:  #标题\n    subtitle:  #副标题\n    description:  #站点描述，给搜索引擎看的\n    author:  #作者\n    email:  #电子邮箱\n    language: zh-CN #语言\n    timezone: Asia/Shanghai#时区\n    # URL #链接格式\n    url:  #网址\n    root: / #根目录\n    permalink: :year/:month/:day/:title/ #文章的链接格式\n    permalink_defaults:\n    # Directory #目录\n    tag_dir: tags #标签目录\n    archive_dir: archives #存档目录\n    category_dir: categories #分类目录\n    code_dir: downloads/code\n    source_dir: source #源文件目录\n    public_dir: public #生成的网页文件目录\n    # Writing #写作\n    new_post_name: :title.md #新文章标题\n    default_layout: post #默认的模板，包括     post、page、photo、draft（文章、页面、照片、草稿）\n    titlecase: false #标题转换成大写\n    external_link: true #在新选项卡中打开连接\n    filename_case: 0\n    render_drafts: false\n    post_asset_folder: false\n    relative_link: false\n    highlight: #语法高亮\n      enable: true #是否启用\n      line_number: true #显示行号\n      tab_replace:\n    # Category & Tag #分类和标签\n    default_category: uncategorized #默认分类\n    category_map:\n    tag_map:\n    # Archives\n    2: 开启分页\n    1: 禁用分页\n    0: 全部禁用\n    archive: 2\n    category: 2\n    tag: 2\n    # Server #本地服务器\n    port: 4000 #端口号\n    server_ip: localhost #IP 地址\n    logger: false\n    logger_format: dev\n    # Date / Time format #日期时间格式\n    date_format: YYYY-MM-DD     #参考http://momentjs.com/docs/#/displaying/format/\n    time_format: H:mm:ss\n    # Pagination #分页\n    per_page: 10 #每页文章数，设置成 0 禁用分页\n    pagination_dir: page\n    # Disqus #Disqus评论，替换为多说\n    disqus_shortname:\n    # Extensions #拓展插件\n    theme: landscape-plus #主题\n    exclude_generator:\n    plugins: #插件，例如生成 RSS 和站点地图的\n    - hexo-generator-feed\n    - hexo-generator-sitemap\n    # Deployment #部署\n    deploy:\n      type: git\n      repo: 刚刚github创库地址.git\n      branch: master\n      \n更详细说明:[Hexo官方文档-配置篇](https://hexo.io/zh-cn/docs/configuration.html)\n\n`注意`\n\n* 这里的格式很重要！很重要！很重要！（重要的事情说三遍）\n* 每个\":\"冒号后面都有一个空格\n* repo: 刚刚github创库地址.git\n\n## Hexo命令的使用\n常用命令:\n\n    hexo help #查看帮助\n    hexo init #初始化一个目录\n    hexo new \"postName\" #新建文章\n    hexo new page \"pageName\" #新建页面\n    hexo generate #生成网页，可以在 public 目录查看整个网站的文件\n    hexo server #本地预览，'Ctrl+C'关闭\n    hexo deploy #部署.deploy目录\n    hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**\n    \n简写：\n\n    hexo n == hexo new\n    hexo g == hexo generate\n    hexo s == hexo server\n    hexo d == hexo deploy\n    \n更详细的命令:[Hexo官方文档-命令篇](https://hexo.io/zh-cn/docs/commands.html)\n\n## 写文章\n\n新建文章\n\n    hexo new \"标题\"\n\n在 _posts 目录下会生成文件标题.md\n\n    title: 标题\n    date: 2017-04-29 07:56:29 #发表日期，一般不改动\n    categories: hexo #文章文类\n    tags: [hexo,github] #文章标签，多于一项时用这种格式\n    ---\n    正文，使用Markdown语法书写\n\nMarkdown编辑器推荐：[Cmd Markdown](https://www.zybuluo.com/mdeditor)\nMarkdown基础语法：[Cmd Markdown 简明语法手册](https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown)\n\n编辑完后保存,hexo server预览\n\n## Hexo部署\n执行下列指令即可完成部署。\n\n    hexo generate\n    hexo deploy\n\n以下提示说明部署成功\n\n    [info] Deploy done: git\n    \n打开https://yourname.github.io就可以看到你的博客了\n\n\n\n## Hexo主题\n\n这里以配置next主题为例\n\n###### 1. 打开[Hexo官方主题](https://hexo.io/themes/)\n\n###### 2. 找到next主题\n  ![next.jpg](http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_3.jpg)\n\n###### 3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到[next使用文档](http://theme-next.iissnan.com/getting-started.html)\n###### 4. 下载主题\n  执行如下命令(在E:\\Myblog\\Hexo)\n\n\n      git clone https://github.com/iissnan/hexo-theme-next themes/next \n###### 5. 启用主题\n\n   打开_config.yml，找到`theme`字段，，并将其值更改为`next`。\n\n\n    theme: next\n  现在next主题已经配置完成了，执行如下命令(在E:\\Myblog\\Hexo)\n\n    hexo clean\n    hexo server\n    \n  然后到浏览器输入localhost:4000即可查看\n\n   更加详细的next主题配置请到[next开始使用](http://theme-next.iissnan.com/getting-started.html)和[next主题配置](http://theme-next.iissnan.com/theme-settings.html)查看\n   \n   \n###### 6. 部署到github\n设置满意后，执行\n\n\n    hero generate\n    hero deploy\n\n  然后到yourname.github.io即可查看效果（会有一点延迟）\n  \n  # 写在最后\n  \n  昨天折腾了一晚上得出来的经验，汇总给大家\n  \n  如果大家觉得本文对你有帮助，不妨微信扫描以下二维码，请我喝杯咖啡\n  \n  ![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","slug":"Hexo-Github-pages-创建一个属于自己的博客","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5r000kl0on04is7uti","content":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><h2 id=\"什么是Hexo？\"><a href=\"#什么是Hexo？\" class=\"headerlink\" title=\"什么是Hexo？\"></a>什么是Hexo？</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档中文版</a></p>\n</blockquote>\n<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><ul>\n<li>喜欢写博客</li>\n<li>有MarkDown语法基础</li>\n<li>会使用版本控制Git</li>\n<li>了解使用Github</li>\n</ul>\n<h2 id=\"预览效果\"><a href=\"#预览效果\" class=\"headerlink\" title=\"预览效果\"></a>预览效果</h2><p>我的博客也是用Hexo+Github搭建的，主题用的是Next<br><br><a href=\"https://zhaoweihaochina.github.io/\" target=\"_blank\" rel=\"noopener\">前往我的博客</a></p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Git</a>并执行安装就好了</p>\n<blockquote>\n<p>由于众所周知的原因，国内下载很慢，Hexo官方文档很体贴的给出了<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">这个页面</a>，里面有收录百度云下载地址。<strong>我的做法是将下载地址复制到迅雷</strong></p>\n</blockquote>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p>在windows下安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>十分简单，只需要下载并安装就好了</p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>利用npm命令即可安装</p>\n<pre><code>npm install -g hexo-cli</code></pre><p><code>注意</code><br>建议挂上代理<br><code>问题</code></p>\n<ul>\n<li>一些旧的文章使用<br>  npm install -g hexo<br>会出现错误，最新指令请参考<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></li>\n<li>npm ERR! registry error parsing json 错误<br>可能需要设置npm代理,执行命令<br>  npm config set registry <a href=\"http://registry.cnpmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.cnpmjs.org</a></li>\n<li>hexo:command not found<br>删除刚刚安装的npm目录，重新执行命令npm install -g hexo-cli安装hexo</li>\n</ul>\n<h2 id=\"创建hexo文件夹\"><a href=\"#创建hexo文件夹\" class=\"headerlink\" title=\"创建hexo文件夹\"></a>创建hexo文件夹</h2><p>安装完成后，在自己喜欢的目录下（例如：E:\\Myblog\\Hexo）执行如下命令(在E:\\Myblog\\Hexo目录空白处右键选择Git Bash),Hexo就会自动生成所需要的文件</p>\n<pre><code>hexo init</code></pre><h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><pre><code>npm install</code></pre><p><code>此步建议挂代理</code></p>\n<h2 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h2><p>现在已经在本地搭建了Hexo博客了，执行如下命令(在E:\\Myblog\\Hexo)，然后到浏览器输入localhost:4000即可查看</p>\n<pre><code>hexo generate\nhexo server</code></pre><p>到现在为止，本地hexo博客已经搭建完成，接下来就是部署到Github<br><code>问题</code></p>\n<ul>\n<li>执行hexo server提示找不到该指令<br>解决办法：<br>在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</li>\n</ul>\n<pre><code>npm install hexo -server --save</code></pre><h2 id=\"github创建博客\"><a href=\"#github创建博客\" class=\"headerlink\" title=\"github创建博客\"></a>github创建博客</h2><ul>\n<li>注册账号<br>地址:<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a><br>输入账号、邮箱和密码点击Sign up for Github</li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page.jpg\" alt=\"github.jpg\"></p>\n<ul>\n<li>创建github pages仓库<br>这个仓库的名字需要和你的账号对应，格式: yourname.github.io<br>输入基本信息，然后点击创建仓库.<br><code>帮助</code><br>例如我的github名字是zhaoweihaoChina,那么我的仓库名字就是zhaoweihaoChina.github.io</li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_2.jpg\" alt=\"create repository.jpg\"></p>\n<h2 id=\"生成SSH密钥\"><a href=\"#生成SSH密钥\" class=\"headerlink\" title=\"生成SSH密钥\"></a>生成SSH密钥</h2><p>ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空。</p>\n<p>在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。</p>\n<h2 id=\"在GitHub上添加SSH密钥\"><a href=\"#在GitHub上添加SSH密钥\" class=\"headerlink\" title=\"在GitHub上添加SSH密钥\"></a>在GitHub上添加SSH密钥</h2><p>打开id_rsa.pub，复制全文。打开 <a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a> ，Add SSH key，粘贴进去。</p>\n<h1 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><pre><code>.\n├── _config.yml#网站配置信息\n├── package.json#应用程序信息\n├── scaffolds#模板\n├── source\n|   ├── _drafts#草稿\n|   └── _posts#文章\n└── themes#主题</code></pre><p>更详细说明：<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-建站篇</a></p>\n<h2 id=\"全局配置-config-yml\"><a href=\"#全局配置-config-yml\" class=\"headerlink\" title=\"全局配置 _config.yml\"></a>全局配置 _config.yml</h2><pre><code># Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site #站点信息\ntitle:  #标题\nsubtitle:  #副标题\ndescription:  #站点描述，给搜索引擎看的\nauthor:  #作者\nemail:  #电子邮箱\nlanguage: zh-CN #语言\ntimezone: Asia/Shanghai#时区\n# URL #链接格式\nurl:  #网址\nroot: / #根目录\npermalink: :year/:month/:day/:title/ #文章的链接格式\npermalink_defaults:\n# Directory #目录\ntag_dir: tags #标签目录\narchive_dir: archives #存档目录\ncategory_dir: categories #分类目录\ncode_dir: downloads/code\nsource_dir: source #源文件目录\npublic_dir: public #生成的网页文件目录\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认的模板，包括     post、page、photo、draft（文章、页面、照片、草稿）\ntitlecase: false #标题转换成大写\nexternal_link: true #在新选项卡中打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight: #语法高亮\n  enable: true #是否启用\n  line_number: true #显示行号\n  tab_replace:\n# Category &amp; Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n# Archives\n2: 开启分页\n1: 禁用分页\n0: 全部禁用\narchive: 2\ncategory: 2\ntag: 2\n# Server #本地服务器\nport: 4000 #端口号\nserver_ip: localhost #IP 地址\nlogger: false\nlogger_format: dev\n# Date / Time format #日期时间格式\ndate_format: YYYY-MM-DD     #参考http://momentjs.com/docs/#/displaying/format/\ntime_format: H:mm:ss\n# Pagination #分页\nper_page: 10 #每页文章数，设置成 0 禁用分页\npagination_dir: page\n# Disqus #Disqus评论，替换为多说\ndisqus_shortname:\n# Extensions #拓展插件\ntheme: landscape-plus #主题\nexclude_generator:\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n# Deployment #部署\ndeploy:\n  type: git\n  repo: 刚刚github创库地址.git\n  branch: master</code></pre><p>更详细说明:<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-配置篇</a></p>\n<p><code>注意</code></p>\n<ul>\n<li>这里的格式很重要！很重要！很重要！（重要的事情说三遍）</li>\n<li>每个”:”冒号后面都有一个空格</li>\n<li>repo: 刚刚github创库地址.git</li>\n</ul>\n<h2 id=\"Hexo命令的使用\"><a href=\"#Hexo命令的使用\" class=\"headerlink\" title=\"Hexo命令的使用\"></a>Hexo命令的使用</h2><p>常用命令:</p>\n<pre><code>hexo help #查看帮助\nhexo init #初始化一个目录\nhexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，&apos;Ctrl+C&apos;关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</code></pre><p>简写：</p>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy</code></pre><p>更详细的命令:<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-命令篇</a></p>\n<h2 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h2><p>新建文章</p>\n<pre><code>hexo new &quot;标题&quot;</code></pre><p>在 _posts 目录下会生成文件标题.md</p>\n<pre><code>title: 标题\ndate: 2017-04-29 07:56:29 #发表日期，一般不改动\ncategories: hexo #文章文类\ntags: [hexo,github] #文章标签，多于一项时用这种格式\n---\n正文，使用Markdown语法书写</code></pre><p>Markdown编辑器推荐：<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a><br>Markdown基础语法：<a href=\"https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown\" target=\"_blank\" rel=\"noopener\">Cmd Markdown 简明语法手册</a></p>\n<p>编辑完后保存,hexo server预览</p>\n<h2 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h2><p>执行下列指令即可完成部署。</p>\n<pre><code>hexo generate\nhexo deploy</code></pre><p>以下提示说明部署成功</p>\n<pre><code>[info] Deploy done: git</code></pre><p>打开<a href=\"https://yourname.github.io就可以看到你的博客了\" target=\"_blank\" rel=\"noopener\">https://yourname.github.io就可以看到你的博客了</a></p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><p>这里以配置next主题为例</p>\n<h6 id=\"1-打开Hexo官方主题\"><a href=\"#1-打开Hexo官方主题\" class=\"headerlink\" title=\"1. 打开Hexo官方主题\"></a>1. 打开<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo官方主题</a></h6><h6 id=\"2-找到next主题\"><a href=\"#2-找到next主题\" class=\"headerlink\" title=\"2. 找到next主题\"></a>2. 找到next主题</h6><p>  <img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_3.jpg\" alt=\"next.jpg\"></p>\n<h6 id=\"3-点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\"><a href=\"#3-点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\" class=\"headerlink\" title=\"3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\"></a>3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next使用文档</a></h6><h6 id=\"4-下载主题\"><a href=\"#4-下载主题\" class=\"headerlink\" title=\"4. 下载主题\"></a>4. 下载主题</h6><p>  执行如下命令(在E:\\Myblog\\Hexo)</p>\n<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next </code></pre><h6 id=\"5-启用主题\"><a href=\"#5-启用主题\" class=\"headerlink\" title=\"5. 启用主题\"></a>5. 启用主题</h6><p>   打开_config.yml，找到<code>theme</code>字段，，并将其值更改为<code>next</code>。</p>\n<pre><code>theme: next</code></pre><p>  现在next主题已经配置完成了，执行如下命令(在E:\\Myblog\\Hexo)</p>\n<pre><code>hexo clean\nhexo server</code></pre><p>  然后到浏览器输入localhost:4000即可查看</p>\n<p>   更加详细的next主题配置请到<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next开始使用</a>和<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">next主题配置</a>查看</p>\n<h6 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h6><p>设置满意后，执行</p>\n<pre><code>hero generate\nhero deploy</code></pre><p>  然后到yourname.github.io即可查看效果（会有一点延迟）</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>  昨天折腾了一晚上得出来的经验，汇总给大家</p>\n<p>  如果大家觉得本文对你有帮助，不妨微信扫描以下二维码，请我喝杯咖啡</p>\n<p>  <img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"写在前面\"><a href=\"#写在前面\" class=\"headerlink\" title=\"写在前面\"></a>写在前面</h1><h2 id=\"什么是Hexo？\"><a href=\"#什么是Hexo？\" class=\"headerlink\" title=\"什么是Hexo？\"></a>什么是Hexo？</h2><blockquote>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <code>Markdown</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档中文版</a></p>\n</blockquote>\n<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><ul>\n<li>喜欢写博客</li>\n<li>有MarkDown语法基础</li>\n<li>会使用版本控制Git</li>\n<li>了解使用Github</li>\n</ul>\n<h2 id=\"预览效果\"><a href=\"#预览效果\" class=\"headerlink\" title=\"预览效果\"></a>预览效果</h2><p>我的博客也是用Hexo+Github搭建的，主题用的是Next<br><br><a href=\"https://zhaoweihaochina.github.io/\" target=\"_blank\" rel=\"noopener\">前往我的博客</a></p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h2><p>下载<a href=\"https://git-scm.com/download/win\" target=\"_blank\" rel=\"noopener\">Git</a>并执行安装就好了</p>\n<blockquote>\n<p>由于众所周知的原因，国内下载很慢，Hexo官方文档很体贴的给出了<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"noopener\">这个页面</a>，里面有收录百度云下载地址。<strong>我的做法是将下载地址复制到迅雷</strong></p>\n</blockquote>\n<h2 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h2><p>在windows下安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">Node.js</a>十分简单，只需要下载并安装就好了</p>\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><p>利用npm命令即可安装</p>\n<pre><code>npm install -g hexo-cli</code></pre><p><code>注意</code><br>建议挂上代理<br><code>问题</code></p>\n<ul>\n<li>一些旧的文章使用<br>  npm install -g hexo<br>会出现错误，最新指令请参考<a href=\"https://hexo.io/zh-cn/docs/index.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档</a></li>\n<li>npm ERR! registry error parsing json 错误<br>可能需要设置npm代理,执行命令<br>  npm config set registry <a href=\"http://registry.cnpmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.cnpmjs.org</a></li>\n<li>hexo:command not found<br>删除刚刚安装的npm目录，重新执行命令npm install -g hexo-cli安装hexo</li>\n</ul>\n<h2 id=\"创建hexo文件夹\"><a href=\"#创建hexo文件夹\" class=\"headerlink\" title=\"创建hexo文件夹\"></a>创建hexo文件夹</h2><p>安装完成后，在自己喜欢的目录下（例如：E:\\Myblog\\Hexo）执行如下命令(在E:\\Myblog\\Hexo目录空白处右键选择Git Bash),Hexo就会自动生成所需要的文件</p>\n<pre><code>hexo init</code></pre><h2 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h2><pre><code>npm install</code></pre><p><code>此步建议挂代理</code></p>\n<h2 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h2><p>现在已经在本地搭建了Hexo博客了，执行如下命令(在E:\\Myblog\\Hexo)，然后到浏览器输入localhost:4000即可查看</p>\n<pre><code>hexo generate\nhexo server</code></pre><p>到现在为止，本地hexo博客已经搭建完成，接下来就是部署到Github<br><code>问题</code></p>\n<ul>\n<li>执行hexo server提示找不到该指令<br>解决办法：<br>在Hexo 3.0 后server被单独出来了，需要安装server，安装的命令如下：</li>\n</ul>\n<pre><code>npm install hexo -server --save</code></pre><h2 id=\"github创建博客\"><a href=\"#github创建博客\" class=\"headerlink\" title=\"github创建博客\"></a>github创建博客</h2><ul>\n<li>注册账号<br>地址:<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a><br>输入账号、邮箱和密码点击Sign up for Github</li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page.jpg\" alt=\"github.jpg\"></p>\n<ul>\n<li>创建github pages仓库<br>这个仓库的名字需要和你的账号对应，格式: yourname.github.io<br>输入基本信息，然后点击创建仓库.<br><code>帮助</code><br>例如我的github名字是zhaoweihaoChina,那么我的仓库名字就是zhaoweihaoChina.github.io</li>\n</ul>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_2.jpg\" alt=\"create repository.jpg\"></p>\n<h2 id=\"生成SSH密钥\"><a href=\"#生成SSH密钥\" class=\"headerlink\" title=\"生成SSH密钥\"></a>生成SSH密钥</h2><p>ssh-keygen -t rsa -C “你的邮箱地址”，按3个回车，密码为空。</p>\n<p>在C:\\Users\\Administrator.ssh下，得到两个文件id_rsa和id_rsa.pub。</p>\n<h2 id=\"在GitHub上添加SSH密钥\"><a href=\"#在GitHub上添加SSH密钥\" class=\"headerlink\" title=\"在GitHub上添加SSH密钥\"></a>在GitHub上添加SSH密钥</h2><p>打开id_rsa.pub，复制全文。打开 <a href=\"https://github.com/settings/ssh\" target=\"_blank\" rel=\"noopener\">https://github.com/settings/ssh</a> ，Add SSH key，粘贴进去。</p>\n<h1 id=\"Hexo使用\"><a href=\"#Hexo使用\" class=\"headerlink\" title=\"Hexo使用\"></a>Hexo使用</h1><h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><pre><code>.\n├── _config.yml#网站配置信息\n├── package.json#应用程序信息\n├── scaffolds#模板\n├── source\n|   ├── _drafts#草稿\n|   └── _posts#文章\n└── themes#主题</code></pre><p>更详细说明：<a href=\"https://hexo.io/zh-cn/docs/setup.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-建站篇</a></p>\n<h2 id=\"全局配置-config-yml\"><a href=\"#全局配置-config-yml\" class=\"headerlink\" title=\"全局配置 _config.yml\"></a>全局配置 _config.yml</h2><pre><code># Hexo Configuration\n## Docs: http://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n# Site #站点信息\ntitle:  #标题\nsubtitle:  #副标题\ndescription:  #站点描述，给搜索引擎看的\nauthor:  #作者\nemail:  #电子邮箱\nlanguage: zh-CN #语言\ntimezone: Asia/Shanghai#时区\n# URL #链接格式\nurl:  #网址\nroot: / #根目录\npermalink: :year/:month/:day/:title/ #文章的链接格式\npermalink_defaults:\n# Directory #目录\ntag_dir: tags #标签目录\narchive_dir: archives #存档目录\ncategory_dir: categories #分类目录\ncode_dir: downloads/code\nsource_dir: source #源文件目录\npublic_dir: public #生成的网页文件目录\n# Writing #写作\nnew_post_name: :title.md #新文章标题\ndefault_layout: post #默认的模板，包括     post、page、photo、draft（文章、页面、照片、草稿）\ntitlecase: false #标题转换成大写\nexternal_link: true #在新选项卡中打开连接\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nhighlight: #语法高亮\n  enable: true #是否启用\n  line_number: true #显示行号\n  tab_replace:\n# Category &amp; Tag #分类和标签\ndefault_category: uncategorized #默认分类\ncategory_map:\ntag_map:\n# Archives\n2: 开启分页\n1: 禁用分页\n0: 全部禁用\narchive: 2\ncategory: 2\ntag: 2\n# Server #本地服务器\nport: 4000 #端口号\nserver_ip: localhost #IP 地址\nlogger: false\nlogger_format: dev\n# Date / Time format #日期时间格式\ndate_format: YYYY-MM-DD     #参考http://momentjs.com/docs/#/displaying/format/\ntime_format: H:mm:ss\n# Pagination #分页\nper_page: 10 #每页文章数，设置成 0 禁用分页\npagination_dir: page\n# Disqus #Disqus评论，替换为多说\ndisqus_shortname:\n# Extensions #拓展插件\ntheme: landscape-plus #主题\nexclude_generator:\nplugins: #插件，例如生成 RSS 和站点地图的\n- hexo-generator-feed\n- hexo-generator-sitemap\n# Deployment #部署\ndeploy:\n  type: git\n  repo: 刚刚github创库地址.git\n  branch: master</code></pre><p>更详细说明:<a href=\"https://hexo.io/zh-cn/docs/configuration.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-配置篇</a></p>\n<p><code>注意</code></p>\n<ul>\n<li>这里的格式很重要！很重要！很重要！（重要的事情说三遍）</li>\n<li>每个”:”冒号后面都有一个空格</li>\n<li>repo: 刚刚github创库地址.git</li>\n</ul>\n<h2 id=\"Hexo命令的使用\"><a href=\"#Hexo命令的使用\" class=\"headerlink\" title=\"Hexo命令的使用\"></a>Hexo命令的使用</h2><p>常用命令:</p>\n<pre><code>hexo help #查看帮助\nhexo init #初始化一个目录\nhexo new &quot;postName&quot; #新建文章\nhexo new page &quot;pageName&quot; #新建页面\nhexo generate #生成网页，可以在 public 目录查看整个网站的文件\nhexo server #本地预览，&apos;Ctrl+C&apos;关闭\nhexo deploy #部署.deploy目录\nhexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</code></pre><p>简写：</p>\n<pre><code>hexo n == hexo new\nhexo g == hexo generate\nhexo s == hexo server\nhexo d == hexo deploy</code></pre><p>更详细的命令:<a href=\"https://hexo.io/zh-cn/docs/commands.html\" target=\"_blank\" rel=\"noopener\">Hexo官方文档-命令篇</a></p>\n<h2 id=\"写文章\"><a href=\"#写文章\" class=\"headerlink\" title=\"写文章\"></a>写文章</h2><p>新建文章</p>\n<pre><code>hexo new &quot;标题&quot;</code></pre><p>在 _posts 目录下会生成文件标题.md</p>\n<pre><code>title: 标题\ndate: 2017-04-29 07:56:29 #发表日期，一般不改动\ncategories: hexo #文章文类\ntags: [hexo,github] #文章标签，多于一项时用这种格式\n---\n正文，使用Markdown语法书写</code></pre><p>Markdown编辑器推荐：<a href=\"https://www.zybuluo.com/mdeditor\" target=\"_blank\" rel=\"noopener\">Cmd Markdown</a><br>Markdown基础语法：<a href=\"https://www.zybuluo.com/mdeditor?url=https%3A%2F%2Fwww.zybuluo.com%2Fstatic%2Feditor%2Fmd-help.markdown\" target=\"_blank\" rel=\"noopener\">Cmd Markdown 简明语法手册</a></p>\n<p>编辑完后保存,hexo server预览</p>\n<h2 id=\"Hexo部署\"><a href=\"#Hexo部署\" class=\"headerlink\" title=\"Hexo部署\"></a>Hexo部署</h2><p>执行下列指令即可完成部署。</p>\n<pre><code>hexo generate\nhexo deploy</code></pre><p>以下提示说明部署成功</p>\n<pre><code>[info] Deploy done: git</code></pre><p>打开<a href=\"https://yourname.github.io就可以看到你的博客了\" target=\"_blank\" rel=\"noopener\">https://yourname.github.io就可以看到你的博客了</a></p>\n<h2 id=\"Hexo主题\"><a href=\"#Hexo主题\" class=\"headerlink\" title=\"Hexo主题\"></a>Hexo主题</h2><p>这里以配置next主题为例</p>\n<h6 id=\"1-打开Hexo官方主题\"><a href=\"#1-打开Hexo官方主题\" class=\"headerlink\" title=\"1. 打开Hexo官方主题\"></a>1. 打开<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo官方主题</a></h6><h6 id=\"2-找到next主题\"><a href=\"#2-找到next主题\" class=\"headerlink\" title=\"2. 找到next主题\"></a>2. 找到next主题</h6><p>  <img src=\"http://op4e089f0.bkt.clouddn.com/image/blogimage/20170429github_page_3.jpg\" alt=\"next.jpg\"></p>\n<h6 id=\"3-点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\"><a href=\"#3-点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\" class=\"headerlink\" title=\"3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到next使用文档\"></a>3. 点击NexT蓝色字体进入进入next的github界面，在介绍里可以找到<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next使用文档</a></h6><h6 id=\"4-下载主题\"><a href=\"#4-下载主题\" class=\"headerlink\" title=\"4. 下载主题\"></a>4. 下载主题</h6><p>  执行如下命令(在E:\\Myblog\\Hexo)</p>\n<pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next </code></pre><h6 id=\"5-启用主题\"><a href=\"#5-启用主题\" class=\"headerlink\" title=\"5. 启用主题\"></a>5. 启用主题</h6><p>   打开_config.yml，找到<code>theme</code>字段，，并将其值更改为<code>next</code>。</p>\n<pre><code>theme: next</code></pre><p>  现在next主题已经配置完成了，执行如下命令(在E:\\Myblog\\Hexo)</p>\n<pre><code>hexo clean\nhexo server</code></pre><p>  然后到浏览器输入localhost:4000即可查看</p>\n<p>   更加详细的next主题配置请到<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"noopener\">next开始使用</a>和<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"noopener\">next主题配置</a>查看</p>\n<h6 id=\"6-部署到github\"><a href=\"#6-部署到github\" class=\"headerlink\" title=\"6. 部署到github\"></a>6. 部署到github</h6><p>设置满意后，执行</p>\n<pre><code>hero generate\nhero deploy</code></pre><p>  然后到yourname.github.io即可查看效果（会有一点延迟）</p>\n<h1 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h1><p>  昨天折腾了一晚上得出来的经验，汇总给大家</p>\n<p>  如果大家觉得本文对你有帮助，不妨微信扫描以下二维码，请我喝杯咖啡</p>\n<p>  <img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n"},{"title":"GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices)","date":"2018-01-14T07:36:32.000Z","_content":"#### 格式 Format\n**中文**\n English\n#### 正文 Body\n**1.打开Genymotion点击'Add'按钮**\n Open Genymotion and click on 'Add' button.\n**2.选择你想要的Android模拟器版本**\nSelect the device for which you want actual source url.\n**3.点击'Next'然后再点击'Next'（在屏幕上会显示要给模拟器改名）**\nClick 'Next' and then again 'Next' (on the screen that shows option to rename the device).\n**4.等待一会儿直到Genymotion开始下载文件（下载进度条开始显示时）**\nWait for sometime until Genymotion starts downloading the file (i.e. some download progress is shown).\n**5.取消下载并关掉Genymotion**\nAbort the download process and close Genymotion.\n**6.去到“C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录，替换user_name为你的用户名，例如我的是：C:\\Users\\Administrator\\AppData\\Local\\Genymobile\\Genymotion\\ova**\nGo to this directory: C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova, replace <user_name> with your Windows account user name.\n**7.在这个目录你可能会看到不止一个.ova文件，按照创建日期和修改日期排序，找到最新创建的那个文件并复制文件名（含扩展名），例如：genymotion_vbox86p_5.0_170928_172212.ova**\nIn this directory, you will see atleast one '.ova' file. Sort them according to the 'Date created' or 'Date modified' attribute and copy the name of the most recent file with extension e.g. genymotion_vbox86p_6.0_160825_141918.ova. Copy this file name as you'll need it in the next step.\n**8.去到“C:\\Users\\<user_name>\\AppData\\Local\\Genymobile”这个目录你会看到有一个'genymotion.log'文件.用记事本或者notepad++打开，搜索上一个步骤复制的文件名(快捷键是ctrl+F)，然后你会看到一条链接，例如： 08:11:28 [Genymotion] [debug] Downloading file http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova**\nGo to this path : C:\\Users\\<user_name>\\AppData\\Local\\Genymobile and you must see a 'genymotion.log' file. Open the file and search the text for the filename copied earlier. You must see it as a part of a link.\ne.g. 08:11:28 [Genymotion] [debug] Downloading file http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova\n**9.复制链接然后粘贴到迅雷下载**\nNow, copy the URL and paste it in your browser or in any download manager.\n**10.下载完成后，复制下载后的文件到 \"C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova\"这个目录下面，请确保你下载的文件是'.ova'扩展名，如果是'.tar',重命名扩展名为'.ova'.**\nAfter the file has been downloaded, move it to the directory from where you copied the file name. i.e. C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova\nMake sure that the downloaded file has extension '.ova', if it has some other extension like '.tar' (in case of android 7.0), rename the extension to '.ova'.\n**11.一切就绪后打开Genymotion，点击'Add'按钮然后选择之前选择相同的虚拟机，然后点击'Next','Next'.现在虚拟机会不用下载就可以部署了**\nNow, open Genymotion, click 'Add' and then select the same device that you selected previously, and proceed, rename it if you want and then click 'Next'. Now, the device will be deployed without being downloaded.","source":"_posts/GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices).md","raw":"---\ntitle: 'GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices)'\ndate: 2018-01-14 15:36:32\ntags: [Android,GenyMotion]\ncategories: 开发\n---\n#### 格式 Format\n**中文**\n English\n#### 正文 Body\n**1.打开Genymotion点击'Add'按钮**\n Open Genymotion and click on 'Add' button.\n**2.选择你想要的Android模拟器版本**\nSelect the device for which you want actual source url.\n**3.点击'Next'然后再点击'Next'（在屏幕上会显示要给模拟器改名）**\nClick 'Next' and then again 'Next' (on the screen that shows option to rename the device).\n**4.等待一会儿直到Genymotion开始下载文件（下载进度条开始显示时）**\nWait for sometime until Genymotion starts downloading the file (i.e. some download progress is shown).\n**5.取消下载并关掉Genymotion**\nAbort the download process and close Genymotion.\n**6.去到“C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录，替换user_name为你的用户名，例如我的是：C:\\Users\\Administrator\\AppData\\Local\\Genymobile\\Genymotion\\ova**\nGo to this directory: C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova, replace <user_name> with your Windows account user name.\n**7.在这个目录你可能会看到不止一个.ova文件，按照创建日期和修改日期排序，找到最新创建的那个文件并复制文件名（含扩展名），例如：genymotion_vbox86p_5.0_170928_172212.ova**\nIn this directory, you will see atleast one '.ova' file. Sort them according to the 'Date created' or 'Date modified' attribute and copy the name of the most recent file with extension e.g. genymotion_vbox86p_6.0_160825_141918.ova. Copy this file name as you'll need it in the next step.\n**8.去到“C:\\Users\\<user_name>\\AppData\\Local\\Genymobile”这个目录你会看到有一个'genymotion.log'文件.用记事本或者notepad++打开，搜索上一个步骤复制的文件名(快捷键是ctrl+F)，然后你会看到一条链接，例如： 08:11:28 [Genymotion] [debug] Downloading file http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova**\nGo to this path : C:\\Users\\<user_name>\\AppData\\Local\\Genymobile and you must see a 'genymotion.log' file. Open the file and search the text for the filename copied earlier. You must see it as a part of a link.\ne.g. 08:11:28 [Genymotion] [debug] Downloading file http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova\n**9.复制链接然后粘贴到迅雷下载**\nNow, copy the URL and paste it in your browser or in any download manager.\n**10.下载完成后，复制下载后的文件到 \"C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova\"这个目录下面，请确保你下载的文件是'.ova'扩展名，如果是'.tar',重命名扩展名为'.ova'.**\nAfter the file has been downloaded, move it to the directory from where you copied the file name. i.e. C:\\Users\\<user_name>\\AppData\\Local\\Genymobile\\Genymotion\\ova\nMake sure that the downloaded file has extension '.ova', if it has some other extension like '.tar' (in case of android 7.0), rename the extension to '.ova'.\n**11.一切就绪后打开Genymotion，点击'Add'按钮然后选择之前选择相同的虚拟机，然后点击'Next','Next'.现在虚拟机会不用下载就可以部署了**\nNow, open Genymotion, click 'Add' and then select the same device that you selected previously, and proceed, rename it if you want and then click 'Next'. Now, the device will be deployed without being downloaded.","slug":"GenyMotion镜像下载慢解决方法(Get download links of GenyMotion virtual devices)","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5t000pl0ona4py259d","content":"<h4 id=\"格式-Format\"><a href=\"#格式-Format\" class=\"headerlink\" title=\"格式 Format\"></a>格式 Format</h4><p><strong>中文</strong><br> English</p>\n<h4 id=\"正文-Body\"><a href=\"#正文-Body\" class=\"headerlink\" title=\"正文 Body\"></a>正文 Body</h4><p><strong>1.打开Genymotion点击’Add’按钮</strong><br> Open Genymotion and click on ‘Add’ button.<br><strong>2.选择你想要的Android模拟器版本</strong><br>Select the device for which you want actual source url.<br><strong>3.点击’Next’然后再点击’Next’（在屏幕上会显示要给模拟器改名）</strong><br>Click ‘Next’ and then again ‘Next’ (on the screen that shows option to rename the device).<br><strong>4.等待一会儿直到Genymotion开始下载文件（下载进度条开始显示时）</strong><br>Wait for sometime until Genymotion starts downloading the file (i.e. some download progress is shown).<br><strong>5.取消下载并关掉Genymotion</strong><br>Abort the download process and close Genymotion.<br><strong>6.去到“C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录，替换user_name为你的用户名，例如我的是：C:\\Users\\Administrator\\AppData\\Local\\Genymobile\\Genymotion\\ova</strong><br>Go to this directory: C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova, replace <user_name> with your Windows account user name.<br><strong>7.在这个目录你可能会看到不止一个.ova文件，按照创建日期和修改日期排序，找到最新创建的那个文件并复制文件名（含扩展名），例如：genymotion_vbox86p_5.0_170928_172212.ova</strong><br>In this directory, you will see atleast one ‘.ova’ file. Sort them according to the ‘Date created’ or ‘Date modified’ attribute and copy the name of the most recent file with extension e.g. genymotion_vbox86p_6.0_160825_141918.ova. Copy this file name as you’ll need it in the next step.<br><strong>8.去到“C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile”这个目录你会看到有一个’genymotion.log’文件.用记事本或者notepad++打开，搜索上一个步骤复制的文件名(快捷键是ctrl+F)，然后你会看到一条链接，例如： 08:11:28 [Genymotion] [debug] Downloading file <a href=\"http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova\" target=\"_blank\" rel=\"noopener\">http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova</a></strong><br>Go to this path : C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile and you must see a ‘genymotion.log’ file. Open the file and search the text for the filename copied earlier. You must see it as a part of a link.<br>e.g. 08:11:28 [Genymotion] [debug] Downloading file <a href=\"http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova\" target=\"_blank\" rel=\"noopener\">http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova</a><br><strong>9.复制链接然后粘贴到迅雷下载</strong><br>Now, copy the URL and paste it in your browser or in any download manager.<br><strong>10.下载完成后，复制下载后的文件到 “C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录下面，请确保你下载的文件是’.ova’扩展名，如果是’.tar’,重命名扩展名为’.ova’.</strong><br>After the file has been downloaded, move it to the directory from where you copied the file name. i.e. C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova<br>Make sure that the downloaded file has extension ‘.ova’, if it has some other extension like ‘.tar’ (in case of android 7.0), rename the extension to ‘.ova’.<br><strong>11.一切就绪后打开Genymotion，点击’Add’按钮然后选择之前选择相同的虚拟机，然后点击’Next’,’Next’.现在虚拟机会不用下载就可以部署了</strong><br>Now, open Genymotion, click ‘Add’ and then select the same device that you selected previously, and proceed, rename it if you want and then click ‘Next’. Now, the device will be deployed without being downloaded.</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"格式-Format\"><a href=\"#格式-Format\" class=\"headerlink\" title=\"格式 Format\"></a>格式 Format</h4><p><strong>中文</strong><br> English</p>\n<h4 id=\"正文-Body\"><a href=\"#正文-Body\" class=\"headerlink\" title=\"正文 Body\"></a>正文 Body</h4><p><strong>1.打开Genymotion点击’Add’按钮</strong><br> Open Genymotion and click on ‘Add’ button.<br><strong>2.选择你想要的Android模拟器版本</strong><br>Select the device for which you want actual source url.<br><strong>3.点击’Next’然后再点击’Next’（在屏幕上会显示要给模拟器改名）</strong><br>Click ‘Next’ and then again ‘Next’ (on the screen that shows option to rename the device).<br><strong>4.等待一会儿直到Genymotion开始下载文件（下载进度条开始显示时）</strong><br>Wait for sometime until Genymotion starts downloading the file (i.e. some download progress is shown).<br><strong>5.取消下载并关掉Genymotion</strong><br>Abort the download process and close Genymotion.<br><strong>6.去到“C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录，替换user_name为你的用户名，例如我的是：C:\\Users\\Administrator\\AppData\\Local\\Genymobile\\Genymotion\\ova</strong><br>Go to this directory: C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova, replace <user_name> with your Windows account user name.<br><strong>7.在这个目录你可能会看到不止一个.ova文件，按照创建日期和修改日期排序，找到最新创建的那个文件并复制文件名（含扩展名），例如：genymotion_vbox86p_5.0_170928_172212.ova</strong><br>In this directory, you will see atleast one ‘.ova’ file. Sort them according to the ‘Date created’ or ‘Date modified’ attribute and copy the name of the most recent file with extension e.g. genymotion_vbox86p_6.0_160825_141918.ova. Copy this file name as you’ll need it in the next step.<br><strong>8.去到“C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile”这个目录你会看到有一个’genymotion.log’文件.用记事本或者notepad++打开，搜索上一个步骤复制的文件名(快捷键是ctrl+F)，然后你会看到一条链接，例如： 08:11:28 [Genymotion] [debug] Downloading file <a href=\"http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova\" target=\"_blank\" rel=\"noopener\">http://dl.genymotion.com/dists/5.0.0/genymotion_vbox86p_5.0_170928_172212.ova</a></strong><br>Go to this path : C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile and you must see a ‘genymotion.log’ file. Open the file and search the text for the filename copied earlier. You must see it as a part of a link.<br>e.g. 08:11:28 [Genymotion] [debug] Downloading file <a href=\"http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova\" target=\"_blank\" rel=\"noopener\">http://dl.genymotion.com/dists/7.0.0/ova/genymotion_vbox86p_7.0_161206_183248.ova</a><br><strong>9.复制链接然后粘贴到迅雷下载</strong><br>Now, copy the URL and paste it in your browser or in any download manager.<br><strong>10.下载完成后，复制下载后的文件到 “C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova”这个目录下面，请确保你下载的文件是’.ova’扩展名，如果是’.tar’,重命名扩展名为’.ova’.</strong><br>After the file has been downloaded, move it to the directory from where you copied the file name. i.e. C:\\Users&lt;user_name&gt;\\AppData\\Local\\Genymobile\\Genymotion\\ova<br>Make sure that the downloaded file has extension ‘.ova’, if it has some other extension like ‘.tar’ (in case of android 7.0), rename the extension to ‘.ova’.<br><strong>11.一切就绪后打开Genymotion，点击’Add’按钮然后选择之前选择相同的虚拟机，然后点击’Next’,’Next’.现在虚拟机会不用下载就可以部署了</strong><br>Now, open Genymotion, click ‘Add’ and then select the same device that you selected previously, and proceed, rename it if you want and then click ‘Next’. Now, the device will be deployed without being downloaded.</p>\n"},{"title":"LineageOS下载地址(个人整理)","date":"2017-05-05T03:35:23.000Z","_content":"\n# 关于\n本文收集最新lineageOS下载地址,下载方法：复制链接到迅雷即可下载\n`注：本文持续更新`\n\n### 更新日志\n2017/05/05 12:07 先更新国产手机，接着会继续更新国外的手机\n\n# 小米\n- mi3/4(cancro)\n  https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip\n\n- mi5(gemini)\n  https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip\n\n- miMax(hydrogen)\n  https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip\n\n- Redmi 1S(armani)\n  https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip\n\n- Redmi3(ido)\n  https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip\n\n- Redmi Note3(kenzo)\n  https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip\n\n# 华为\n\n- Ascend Mate2(mt2)\n  https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip\n\n- Honor4/4x(cherry)\n  https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip\n\n- Honor4(China Telecom)(che10)\n  https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip\n\n- Honor5X(kiwi)\n  https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip\n\n# OPPO\n\n- Find 7a(find7)\n  https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip\n\n- Find 7s(find7s)\n  https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip\n\n- N3(n3)\n  https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip\n\n- R5/R5s(Intl)(r5)\n  https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip\n\n- R7 Plus(r7plus)\n  https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip\n\n# 一加\n\n- 2(oneplus2)\nhttps://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip\n\n- 3/3T(oneplus3)\n https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip\n\n- One(bacon)\n  https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip\n\n- X(onyx)\n  https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip\n\n# Google\n\n- Nexus 5(hammerhead)\n  https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip\n\n- Nexus 5X(bullhead)\n  https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip\n\n- Nexus 6(shamu)\n  https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip\n\n- Nexus 6P(angler)\n  https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip\n\n- Nexus 7 2013 (4G)(deb)\n  https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip\n\n- Nexus 7 2013 (Wi-Fi)(flo)\n  https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip\n\n# 中兴\n\n- Axon7(axon7)\n  https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip\n\n# Zuk\n\n- ZUK Z1(ham)\n  https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip\n\n# 联想\n\n- Vibe K5/K5 Plus(A6020)\n  https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip\n\n- Vibe Z2 Pro(kingdom)\n  https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip\n\n\n## 赏点零食\n\n微信支付码:\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","source":"_posts/LineageOS下载地址-个人整理.md","raw":"---\ntitle: LineageOS下载地址(个人整理)\ndate: 2017-05-05 11:35:23\ntags: [下载地址,LineageOS]\ncategories: LineageOS\n---\n\n# 关于\n本文收集最新lineageOS下载地址,下载方法：复制链接到迅雷即可下载\n`注：本文持续更新`\n\n### 更新日志\n2017/05/05 12:07 先更新国产手机，接着会继续更新国外的手机\n\n# 小米\n- mi3/4(cancro)\n  https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip\n\n- mi5(gemini)\n  https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip\n\n- miMax(hydrogen)\n  https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip\n\n- Redmi 1S(armani)\n  https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip\n\n- Redmi3(ido)\n  https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip\n\n- Redmi Note3(kenzo)\n  https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip\n\n# 华为\n\n- Ascend Mate2(mt2)\n  https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip\n\n- Honor4/4x(cherry)\n  https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip\n\n- Honor4(China Telecom)(che10)\n  https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip\n\n- Honor5X(kiwi)\n  https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip\n\n# OPPO\n\n- Find 7a(find7)\n  https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip\n\n- Find 7s(find7s)\n  https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip\n\n- N3(n3)\n  https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip\n\n- R5/R5s(Intl)(r5)\n  https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip\n\n- R7 Plus(r7plus)\n  https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip\n\n# 一加\n\n- 2(oneplus2)\nhttps://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip\n\n- 3/3T(oneplus3)\n https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip\n\n- One(bacon)\n  https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip\n\n- X(onyx)\n  https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip\n\n# Google\n\n- Nexus 5(hammerhead)\n  https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip\n\n- Nexus 5X(bullhead)\n  https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip\n\n- Nexus 6(shamu)\n  https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip\n\n- Nexus 6P(angler)\n  https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip\n\n- Nexus 7 2013 (4G)(deb)\n  https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip\n\n- Nexus 7 2013 (Wi-Fi)(flo)\n  https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip\n\n# 中兴\n\n- Axon7(axon7)\n  https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip\n\n# Zuk\n\n- ZUK Z1(ham)\n  https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip\n\n# 联想\n\n- Vibe K5/K5 Plus(A6020)\n  https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip\n\n- Vibe Z2 Pro(kingdom)\n  https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip\n\n\n## 赏点零食\n\n微信支付码:\n\n![](http://op4e089f0.bkt.clouddn.com/wechatcode.jpg)","slug":"LineageOS下载地址-个人整理","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5u000sl0onf1rvctk9","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>本文收集最新lineageOS下载地址,下载方法：复制链接到迅雷即可下载<br><code>注：本文持续更新</code></p>\n<h3 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h3><p>2017/05/05 12:07 先更新国产手机，接着会继续更新国外的手机</p>\n<h1 id=\"小米\"><a href=\"#小米\" class=\"headerlink\" title=\"小米\"></a>小米</h1><ul>\n<li><p>mi3/4(cancro)<br><a href=\"https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip</a></p>\n</li>\n<li><p>mi5(gemini)<br><a href=\"https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip</a></p>\n</li>\n<li><p>miMax(hydrogen)<br><a href=\"https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip</a></p>\n</li>\n<li><p>Redmi 1S(armani)<br><a href=\"https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip</a></p>\n</li>\n<li><p>Redmi3(ido)<br><a href=\"https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip</a></p>\n</li>\n<li><p>Redmi Note3(kenzo)<br><a href=\"https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h1><ul>\n<li><p>Ascend Mate2(mt2)<br><a href=\"https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip</a></p>\n</li>\n<li><p>Honor4/4x(cherry)<br><a href=\"https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip</a></p>\n</li>\n<li><p>Honor4(China Telecom)(che10)<br><a href=\"https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip</a></p>\n</li>\n<li><p>Honor5X(kiwi)<br><a href=\"https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"OPPO\"><a href=\"#OPPO\" class=\"headerlink\" title=\"OPPO\"></a>OPPO</h1><ul>\n<li><p>Find 7a(find7)<br><a href=\"https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip</a></p>\n</li>\n<li><p>Find 7s(find7s)<br><a href=\"https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip</a></p>\n</li>\n<li><p>N3(n3)<br><a href=\"https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip</a></p>\n</li>\n<li><p>R5/R5s(Intl)(r5)<br><a href=\"https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip</a></p>\n</li>\n<li><p>R7 Plus(r7plus)<br><a href=\"https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"一加\"><a href=\"#一加\" class=\"headerlink\" title=\"一加\"></a>一加</h1><ul>\n<li><p>2(oneplus2)<br><a href=\"https://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip</a></p>\n</li>\n<li><p>3/3T(oneplus3)<br><a href=\"https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip</a></p>\n</li>\n<li><p>One(bacon)<br><a href=\"https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip</a></p>\n</li>\n<li><p>X(onyx)<br><a href=\"https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"Google\"><a href=\"#Google\" class=\"headerlink\" title=\"Google\"></a>Google</h1><ul>\n<li><p>Nexus 5(hammerhead)<br><a href=\"https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip</a></p>\n</li>\n<li><p>Nexus 5X(bullhead)<br><a href=\"https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip</a></p>\n</li>\n<li><p>Nexus 6(shamu)<br><a href=\"https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip</a></p>\n</li>\n<li><p>Nexus 6P(angler)<br><a href=\"https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip</a></p>\n</li>\n<li><p>Nexus 7 2013 (4G)(deb)<br><a href=\"https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip</a></p>\n</li>\n<li><p>Nexus 7 2013 (Wi-Fi)(flo)<br><a href=\"https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"中兴\"><a href=\"#中兴\" class=\"headerlink\" title=\"中兴\"></a>中兴</h1><ul>\n<li>Axon7(axon7)<br><a href=\"https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip</a></li>\n</ul>\n<h1 id=\"Zuk\"><a href=\"#Zuk\" class=\"headerlink\" title=\"Zuk\"></a>Zuk</h1><ul>\n<li>ZUK Z1(ham)<br><a href=\"https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip</a></li>\n</ul>\n<h1 id=\"联想\"><a href=\"#联想\" class=\"headerlink\" title=\"联想\"></a>联想</h1><ul>\n<li><p>Vibe K5/K5 Plus(A6020)<br><a href=\"https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip</a></p>\n</li>\n<li><p>Vibe Z2 Pro(kingdom)<br><a href=\"https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip</a></p>\n</li>\n</ul>\n<h2 id=\"赏点零食\"><a href=\"#赏点零食\" class=\"headerlink\" title=\"赏点零食\"></a>赏点零食</h2><p>微信支付码:</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>本文收集最新lineageOS下载地址,下载方法：复制链接到迅雷即可下载<br><code>注：本文持续更新</code></p>\n<h3 id=\"更新日志\"><a href=\"#更新日志\" class=\"headerlink\" title=\"更新日志\"></a>更新日志</h3><p>2017/05/05 12:07 先更新国产手机，接着会继续更新国外的手机</p>\n<h1 id=\"小米\"><a href=\"#小米\" class=\"headerlink\" title=\"小米\"></a>小米</h1><ul>\n<li><p>mi3/4(cancro)<br><a href=\"https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/cancro/20170501/lineage-14.1-20170501-nightly-cancro-signed.zip</a></p>\n</li>\n<li><p>mi5(gemini)<br><a href=\"https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/gemini/20170502/lineage-14.1-20170502-nightly-gemini-signed.zip</a></p>\n</li>\n<li><p>miMax(hydrogen)<br><a href=\"https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/hydrogen/20170503/lineage-14.1-20170503-nightly-hydrogen-signed.zip</a></p>\n</li>\n<li><p>Redmi 1S(armani)<br><a href=\"https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/armani/20170501/lineage-14.1-20170501-nightly-armani-signed.zip</a></p>\n</li>\n<li><p>Redmi3(ido)<br><a href=\"https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/ido/20170503/lineage-14.1-20170503-nightly-ido-signed.zip</a></p>\n</li>\n<li><p>Redmi Note3(kenzo)<br><a href=\"https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kenzo/20170503/lineage-14.1-20170503-nightly-kenzo-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"华为\"><a href=\"#华为\" class=\"headerlink\" title=\"华为\"></a>华为</h1><ul>\n<li><p>Ascend Mate2(mt2)<br><a href=\"https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/mt2/20170302/lineage-14.1-20170302-nightly-mt2-signed.zip</a></p>\n</li>\n<li><p>Honor4/4x(cherry)<br><a href=\"https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/cherry/20170501/lineage-14.1-20170501-nightly-cherry-signed.zip</a></p>\n</li>\n<li><p>Honor4(China Telecom)(che10)<br><a href=\"https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/che10/20170501/lineage-14.1-20170501-nightly-che10-signed.zip</a></p>\n</li>\n<li><p>Honor5X(kiwi)<br><a href=\"https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kiwi/20170503/lineage-14.1-20170503-nightly-kiwi-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"OPPO\"><a href=\"#OPPO\" class=\"headerlink\" title=\"OPPO\"></a>OPPO</h1><ul>\n<li><p>Find 7a(find7)<br><a href=\"https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/find7/20170502/lineage-14.1-20170502-nightly-find7-signed.zip</a></p>\n</li>\n<li><p>Find 7s(find7s)<br><a href=\"https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/find7s/20170502/lineage-14.1-20170502-nightly-find7s-signed.zip</a></p>\n</li>\n<li><p>N3(n3)<br><a href=\"https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/n3/20170504/lineage-14.1-20170504-nightly-n3-signed.zip</a></p>\n</li>\n<li><p>R5/R5s(Intl)(r5)<br><a href=\"https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/r5/20170504/lineage-14.1-20170504-nightly-r5-signed.zip</a></p>\n</li>\n<li><p>R7 Plus(r7plus)<br><a href=\"https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/r7plus/20170504/lineage-14.1-20170504-nightly-r7plus-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"一加\"><a href=\"#一加\" class=\"headerlink\" title=\"一加\"></a>一加</h1><ul>\n<li><p>2(oneplus2)<br><a href=\"https://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/oneplus2/20170504/lineage-14.1-20170504-nightly-oneplus2-signed.zip</a></p>\n</li>\n<li><p>3/3T(oneplus3)<br><a href=\"https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/oneplus3/20170504/lineage-14.1-20170504-nightly-oneplus3-signed.zip</a></p>\n</li>\n<li><p>One(bacon)<br><a href=\"https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/bacon/20170501/lineage-14.1-20170501-nightly-bacon-signed.zip</a></p>\n</li>\n<li><p>X(onyx)<br><a href=\"https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/onyx/20170504/lineage-14.1-20170504-nightly-onyx-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"Google\"><a href=\"#Google\" class=\"headerlink\" title=\"Google\"></a>Google</h1><ul>\n<li><p>Nexus 5(hammerhead)<br><a href=\"https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/hammerhead/20170502/lineage-14.1-20170502-nightly-hammerhead-signed.zip</a></p>\n</li>\n<li><p>Nexus 5X(bullhead)<br><a href=\"https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/bullhead/20170501/lineage-14.1-20170501-nightly-bullhead-signed.zip</a></p>\n</li>\n<li><p>Nexus 6(shamu)<br><a href=\"https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/shamu/20170428/lineage-14.1-20170428-nightly-shamu-signed.zip</a></p>\n</li>\n<li><p>Nexus 6P(angler)<br><a href=\"https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/angler/20170501/lineage-14.1-20170501-nightly-angler-signed.zip</a></p>\n</li>\n<li><p>Nexus 7 2013 (4G)(deb)<br><a href=\"https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/deb/20170501/lineage-14.1-20170501-nightly-deb-signed.zip</a></p>\n</li>\n<li><p>Nexus 7 2013 (Wi-Fi)(flo)<br><a href=\"https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/flo/20170502/lineage-14.1-20170502-nightly-flo-signed.zip</a></p>\n</li>\n</ul>\n<h1 id=\"中兴\"><a href=\"#中兴\" class=\"headerlink\" title=\"中兴\"></a>中兴</h1><ul>\n<li>Axon7(axon7)<br><a href=\"https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/axon7/20170501/lineage-14.1-20170501-nightly-axon7-signed.zip</a></li>\n</ul>\n<h1 id=\"Zuk\"><a href=\"#Zuk\" class=\"headerlink\" title=\"Zuk\"></a>Zuk</h1><ul>\n<li>ZUK Z1(ham)<br><a href=\"https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/ham/20170502/lineage-14.1-20170502-nightly-ham-signed.zip</a></li>\n</ul>\n<h1 id=\"联想\"><a href=\"#联想\" class=\"headerlink\" title=\"联想\"></a>联想</h1><ul>\n<li><p>Vibe K5/K5 Plus(A6020)<br><a href=\"https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/A6020/20170501/lineage-14.1-20170501-nightly-A6020-signed.zip</a></p>\n</li>\n<li><p>Vibe Z2 Pro(kingdom)<br><a href=\"https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip\" target=\"_blank\" rel=\"noopener\">https://mirrorbits.lineageos.org/full/kingdom/20170503/lineage-14.1-20170503-nightly-kingdom-signed.zip</a></p>\n</li>\n</ul>\n<h2 id=\"赏点零食\"><a href=\"#赏点零食\" class=\"headerlink\" title=\"赏点零食\"></a>赏点零食</h2><p>微信支付码:</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/wechatcode.jpg\" alt=\"\"></p>\n"},{"title":"THANKS,GOOGLE!","date":"2017-06-15T12:00:48.000Z","_content":"\n今天我收到了GOOGLE北京寄给我的IO明信片\n心里非常激动，那种感觉就像收到明星签名一样\n写一篇文章记录一下\n\n我是一枚G粉，之前在谷歌开发者公众账号有一篇文章是《你的点子将去往何方，澌灭无闻，还是改变世界？》在文章底部有个活动是参与评论谈谈你的梦想就有谷歌明信片送，我就抱着试一试的心态写了评论\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170615-201027.png)\n\n结果在众大牛的评论中脱颖而出，也说明了有好多和我一样还是初学的开发者，我也很开心，我会继续努力下去的\n\n\n\n![](http://op4e089f0.bkt.clouddn.com/postcard.jpg)\n\n### 目前的我\n六月份了，我在忙碌学校期末的事情，六级和期末考试等等的，没有时间更新github和博客，等忙完这一阵子我就会再归来的，加油！\n\n# 附上微信原文地址\n[你的点子将去往何方，澌灭无闻，还是改变世界？](http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&mid=2652043743&idx=1&sn=8cdc7a8e046a2ac88c16d3fe17772031&chksm=808d599ab7fad08c73411fa59bef0ca1e23d53d162a27165ed9e6a62364f020878d546e6497c&mpshare=1&scene=23&srcid=0615JOPHDFPkYQHJnoLS995m#rd)","source":"_posts/THANKS-GOOGLE.md","raw":"---\ntitle: 'THANKS,GOOGLE!'\ndate: 2017-06-15 20:00:48\ntags: [google]\ncategories: note\n---\n\n今天我收到了GOOGLE北京寄给我的IO明信片\n心里非常激动，那种感觉就像收到明星签名一样\n写一篇文章记录一下\n\n我是一枚G粉，之前在谷歌开发者公众账号有一篇文章是《你的点子将去往何方，澌灭无闻，还是改变世界？》在文章底部有个活动是参与评论谈谈你的梦想就有谷歌明信片送，我就抱着试一试的心态写了评论\n\n![](http://op4e089f0.bkt.clouddn.com/Screenshot_20170615-201027.png)\n\n结果在众大牛的评论中脱颖而出，也说明了有好多和我一样还是初学的开发者，我也很开心，我会继续努力下去的\n\n\n\n![](http://op4e089f0.bkt.clouddn.com/postcard.jpg)\n\n### 目前的我\n六月份了，我在忙碌学校期末的事情，六级和期末考试等等的，没有时间更新github和博客，等忙完这一阵子我就会再归来的，加油！\n\n# 附上微信原文地址\n[你的点子将去往何方，澌灭无闻，还是改变世界？](http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&mid=2652043743&idx=1&sn=8cdc7a8e046a2ac88c16d3fe17772031&chksm=808d599ab7fad08c73411fa59bef0ca1e23d53d162a27165ed9e6a62364f020878d546e6497c&mpshare=1&scene=23&srcid=0615JOPHDFPkYQHJnoLS995m#rd)","slug":"THANKS-GOOGLE","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5v000vl0on1rogelej","content":"<p>今天我收到了GOOGLE北京寄给我的IO明信片<br>心里非常激动，那种感觉就像收到明星签名一样<br>写一篇文章记录一下</p>\n<p>我是一枚G粉，之前在谷歌开发者公众账号有一篇文章是《你的点子将去往何方，澌灭无闻，还是改变世界？》在文章底部有个活动是参与评论谈谈你的梦想就有谷歌明信片送，我就抱着试一试的心态写了评论</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170615-201027.png\" alt=\"\"></p>\n<p>结果在众大牛的评论中脱颖而出，也说明了有好多和我一样还是初学的开发者，我也很开心，我会继续努力下去的</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/postcard.jpg\" alt=\"\"></p>\n<h3 id=\"目前的我\"><a href=\"#目前的我\" class=\"headerlink\" title=\"目前的我\"></a>目前的我</h3><p>六月份了，我在忙碌学校期末的事情，六级和期末考试等等的，没有时间更新github和博客，等忙完这一阵子我就会再归来的，加油！</p>\n<h1 id=\"附上微信原文地址\"><a href=\"#附上微信原文地址\" class=\"headerlink\" title=\"附上微信原文地址\"></a>附上微信原文地址</h1><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&mid=2652043743&idx=1&sn=8cdc7a8e046a2ac88c16d3fe17772031&chksm=808d599ab7fad08c73411fa59bef0ca1e23d53d162a27165ed9e6a62364f020878d546e6497c&mpshare=1&scene=23&srcid=0615JOPHDFPkYQHJnoLS995m#rd\" target=\"_blank\" rel=\"noopener\">你的点子将去往何方，澌灭无闻，还是改变世界？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天我收到了GOOGLE北京寄给我的IO明信片<br>心里非常激动，那种感觉就像收到明星签名一样<br>写一篇文章记录一下</p>\n<p>我是一枚G粉，之前在谷歌开发者公众账号有一篇文章是《你的点子将去往何方，澌灭无闻，还是改变世界？》在文章底部有个活动是参与评论谈谈你的梦想就有谷歌明信片送，我就抱着试一试的心态写了评论</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/Screenshot_20170615-201027.png\" alt=\"\"></p>\n<p>结果在众大牛的评论中脱颖而出，也说明了有好多和我一样还是初学的开发者，我也很开心，我会继续努力下去的</p>\n<p><img src=\"http://op4e089f0.bkt.clouddn.com/postcard.jpg\" alt=\"\"></p>\n<h3 id=\"目前的我\"><a href=\"#目前的我\" class=\"headerlink\" title=\"目前的我\"></a>目前的我</h3><p>六月份了，我在忙碌学校期末的事情，六级和期末考试等等的，没有时间更新github和博客，等忙完这一阵子我就会再归来的，加油！</p>\n<h1 id=\"附上微信原文地址\"><a href=\"#附上微信原文地址\" class=\"headerlink\" title=\"附上微信原文地址\"></a>附上微信原文地址</h1><p><a href=\"http://mp.weixin.qq.com/s?__biz=MzAwODY4OTk2Mg==&mid=2652043743&idx=1&sn=8cdc7a8e046a2ac88c16d3fe17772031&chksm=808d599ab7fad08c73411fa59bef0ca1e23d53d162a27165ed9e6a62364f020878d546e6497c&mpshare=1&scene=23&srcid=0615JOPHDFPkYQHJnoLS995m#rd\" target=\"_blank\" rel=\"noopener\">你的点子将去往何方，澌灭无闻，还是改变世界？</a></p>\n"},{"title":"在Android中创建类似Instagram的渐变背景","date":"2017-12-07T08:17:56.000Z","_content":"\n\n\n![1.gif](http://upload-images.jianshu.io/upload_images/5796527-6d380740bd67b361.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我在我最近的项目用到这个效果，给大家分享下\nhttps://github.com/zhaoweihaoChina/hnuplus\n\n#### 1. 在drawable文件夹创建一些渐变颜色的资源\ncolor1.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#614385\"\n        android:endColor=\"#516395\"\n        android:angle=\"0\"/>\n</shape>\n\n```\n\ncolor2.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#5f2c82\"\n        android:endColor=\"#49a09d\"\n        android:angle=\"45\"/>\n</shape>\n```\n\ncolor3.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#4776E6\"\n        android:endColor=\"#8E54E9\"\n        android:angle=\"90\"/>\n</shape>\n```\n\ncolor4.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#7141e2\"\n        android:endColor=\"#d46cb3\"\n        android:angle=\"135\"/>\n</shape>\n```\n\n#### 2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:drawable=\"@drawable/color1\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color2\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color3\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color4\"\n        android:duration=\"10000\" />\n</animation-list>\n```\n\n#### 3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"@drawable/animation_list\"\n    android:id=\"@+id/container\">\n\n    <!-- Child Views -->\n\n</LinearLayout>\n```\n\n#### 4.在你的activity中用AnimationDrawable去实现过渡效果\n```java\nLinearLayout container = (LinearLayout) findViewById(R.id.container);\n\nAnimationDrawable anim = (AnimationDrawable) container.getBackground();\nanim.setEnterFadeDuration(6000);\nanim.setExitFadeDuration(2000);\n\n// 开始播放动画：在onResume方法中开始播放渐变动画\n@Override\nprotected void onResume() {\n    super.onResume();\n    if (anim != null && !anim.isRunning())\n        anim.start();\n}\n      \n// 停止播放动画：在onPause方法中停止播放渐变动画\n@Override\nprotected void onPause() {\n    super.onPause();\n    if (anim != null && anim.isRunning())\n        anim.stop();\n}\n```\n\n### 将状态栏设置透明（去除状态栏）\n\nvalues/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\" />  \n</resources>  \n```\n\n\nvalues-v19/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:windowTranslucentStatus\">true</item>  \n    </style>  \n</resources> \n```\n\n\nvalues-v21/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:statusBarColor\">@android:color/transparent</item>  \n    </style>  \n</resources>  \n```\n\n\nvalues-v23/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:statusBarColor\">@android:color/transparent</item>  \n        <item name=\"android:windowLightStatusBar\">true</item>  \n    </style>  \n</resources> \n```\n\n```java\n\npublic class MainActivity extends AppCompatActivity {  \n  \n    @Override  \n    protected void onCreate(Bundle savedInstanceState) {  \n        super.onCreate(savedInstanceState);  \n  \n        // 加入下面的代码\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {  \n            findViewById(android.R.id.content).setSystemUiVisibility(  \n                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);  \n        }  \n  \n        setContentView(R.layout.activity_splash);  \n    }  \n}  \n```\n\n```xml \n<activity  \n    android:name=\".MainActivity\"  \n    android:theme=\"@style/Theme.AppTheme.TranslucentStatusBar\" /> \n```\n\n### 联系\n邮箱：zhaoweihaochn@foxmail.com\n### 请我喝咖啡\n如果你觉得这个文章对你有帮助，可以请我喝杯咖啡\n![wechatcode.jpg](http://upload-images.jianshu.io/upload_images/5796527-7a6705cb3d2feaa6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/在Android中创建类似Instagram的渐变背景.md","raw":"---\ntitle: 在Android中创建类似Instagram的渐变背景\ndate: 2017-12-07 16:17:56\ntags:\n---\n\n\n\n![1.gif](http://upload-images.jianshu.io/upload_images/5796527-6d380740bd67b361.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我在我最近的项目用到这个效果，给大家分享下\nhttps://github.com/zhaoweihaoChina/hnuplus\n\n#### 1. 在drawable文件夹创建一些渐变颜色的资源\ncolor1.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#614385\"\n        android:endColor=\"#516395\"\n        android:angle=\"0\"/>\n</shape>\n\n```\n\ncolor2.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#5f2c82\"\n        android:endColor=\"#49a09d\"\n        android:angle=\"45\"/>\n</shape>\n```\n\ncolor3.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#4776E6\"\n        android:endColor=\"#8E54E9\"\n        android:angle=\"90\"/>\n</shape>\n```\n\ncolor4.xml\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<shape xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <gradient\n        android:startColor=\"#7141e2\"\n        android:endColor=\"#d46cb3\"\n        android:angle=\"135\"/>\n</shape>\n```\n\n#### 2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<animation-list xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <item\n        android:drawable=\"@drawable/color1\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color2\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color3\"\n        android:duration=\"10000\" />\n    <item\n        android:drawable=\"@drawable/color4\"\n        android:duration=\"10000\" />\n</animation-list>\n```\n\n#### 3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:orientation=\"vertical\"\n    android:background=\"@drawable/animation_list\"\n    android:id=\"@+id/container\">\n\n    <!-- Child Views -->\n\n</LinearLayout>\n```\n\n#### 4.在你的activity中用AnimationDrawable去实现过渡效果\n```java\nLinearLayout container = (LinearLayout) findViewById(R.id.container);\n\nAnimationDrawable anim = (AnimationDrawable) container.getBackground();\nanim.setEnterFadeDuration(6000);\nanim.setExitFadeDuration(2000);\n\n// 开始播放动画：在onResume方法中开始播放渐变动画\n@Override\nprotected void onResume() {\n    super.onResume();\n    if (anim != null && !anim.isRunning())\n        anim.start();\n}\n      \n// 停止播放动画：在onPause方法中停止播放渐变动画\n@Override\nprotected void onPause() {\n    super.onPause();\n    if (anim != null && anim.isRunning())\n        anim.stop();\n}\n```\n\n### 将状态栏设置透明（去除状态栏）\n\nvalues/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\" />  \n</resources>  \n```\n\n\nvalues-v19/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:windowTranslucentStatus\">true</item>  \n    </style>  \n</resources> \n```\n\n\nvalues-v21/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:statusBarColor\">@android:color/transparent</item>  \n    </style>  \n</resources>  \n```\n\n\nvalues-v23/styles.xml\n```xml\n<resources>  \n    <style name=\"Theme.AppTheme.TranslucentStatusBar\" parent=\"Theme.AppCompat.Light.NoActionBar\">  \n        <item name=\"android:statusBarColor\">@android:color/transparent</item>  \n        <item name=\"android:windowLightStatusBar\">true</item>  \n    </style>  \n</resources> \n```\n\n```java\n\npublic class MainActivity extends AppCompatActivity {  \n  \n    @Override  \n    protected void onCreate(Bundle savedInstanceState) {  \n        super.onCreate(savedInstanceState);  \n  \n        // 加入下面的代码\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {  \n            findViewById(android.R.id.content).setSystemUiVisibility(  \n                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);  \n        }  \n  \n        setContentView(R.layout.activity_splash);  \n    }  \n}  \n```\n\n```xml \n<activity  \n    android:name=\".MainActivity\"  \n    android:theme=\"@style/Theme.AppTheme.TranslucentStatusBar\" /> \n```\n\n### 联系\n邮箱：zhaoweihaochn@foxmail.com\n### 请我喝咖啡\n如果你觉得这个文章对你有帮助，可以请我喝杯咖啡\n![wechatcode.jpg](http://upload-images.jianshu.io/upload_images/5796527-7a6705cb3d2feaa6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"在Android中创建类似Instagram的渐变背景","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5x000xl0oney8jfkxk","content":"<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-6d380740bd67b361.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.gif\"></p>\n<p>我在我最近的项目用到这个效果，给大家分享下<br><a href=\"https://github.com/zhaoweihaoChina/hnuplus\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/hnuplus</a></p>\n<h4 id=\"1-在drawable文件夹创建一些渐变颜色的资源\"><a href=\"#1-在drawable文件夹创建一些渐变颜色的资源\" class=\"headerlink\" title=\"1. 在drawable文件夹创建一些渐变颜色的资源\"></a>1. 在drawable文件夹创建一些渐变颜色的资源</h4><p>color1.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#614385\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#516395\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color2.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#5f2c82\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#49a09d\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"45\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color3.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#4776E6\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#8E54E9\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"90\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color4.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#7141e2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#d46cb3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"135\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建一个用到上面创建的渐变色的动画序列，命名为animation-list-xml-放进去drawable文件夹\"><a href=\"#2-创建一个用到上面创建的渐变色的动画序列，命名为animation-list-xml-放进去drawable文件夹\" class=\"headerlink\" title=\"2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹\"></a>2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">animation-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-将上面已经创建好的动画序列应用到你layout的背景顶层的view中\"><a href=\"#3-将上面已经创建好的动画序列应用到你layout的背景顶层的view中\" class=\"headerlink\" title=\"3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中\"></a>3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/animation_list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Child Views --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在你的activity中用AnimationDrawable去实现过渡效果\"><a href=\"#4-在你的activity中用AnimationDrawable去实现过渡效果\" class=\"headerlink\" title=\"4.在你的activity中用AnimationDrawable去实现过渡效果\"></a>4.在你的activity中用AnimationDrawable去实现过渡效果</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinearLayout container = (LinearLayout) findViewById(R.id.container);</span><br><span class=\"line\"></span><br><span class=\"line\">AnimationDrawable anim = (AnimationDrawable) container.getBackground();</span><br><span class=\"line\">anim.setEnterFadeDuration(<span class=\"number\">6000</span>);</span><br><span class=\"line\">anim.setExitFadeDuration(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始播放动画：在onResume方法中开始播放渐变动画</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anim != <span class=\"keyword\">null</span> &amp;&amp; !anim.isRunning())</span><br><span class=\"line\">        anim.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">// 停止播放动画：在onPause方法中停止播放渐变动画</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anim != <span class=\"keyword\">null</span> &amp;&amp; anim.isRunning())</span><br><span class=\"line\">        anim.stop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将状态栏设置透明（去除状态栏）\"><a href=\"#将状态栏设置透明（去除状态栏）\" class=\"headerlink\" title=\"将状态栏设置透明（去除状态栏）\"></a>将状态栏设置透明（去除状态栏）</h3><p>values/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v19/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentStatus\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v21/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v23/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowLightStatusBar\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// 加入下面的代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;  </span><br><span class=\"line\">            findViewById(android.R.id.content).setSystemUiVisibility(  </span><br><span class=\"line\">                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        setContentView(R.layout.activity_splash);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppTheme.TranslucentStatusBar\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>邮箱：<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n<h3 id=\"请我喝咖啡\"><a href=\"#请我喝咖啡\" class=\"headerlink\" title=\"请我喝咖啡\"></a>请我喝咖啡</h3><p>如果你觉得这个文章对你有帮助，可以请我喝杯咖啡<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-7a6705cb3d2feaa6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wechatcode.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-6d380740bd67b361.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.gif\"></p>\n<p>我在我最近的项目用到这个效果，给大家分享下<br><a href=\"https://github.com/zhaoweihaoChina/hnuplus\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweihaoChina/hnuplus</a></p>\n<h4 id=\"1-在drawable文件夹创建一些渐变颜色的资源\"><a href=\"#1-在drawable文件夹创建一些渐变颜色的资源\" class=\"headerlink\" title=\"1. 在drawable文件夹创建一些渐变颜色的资源\"></a>1. 在drawable文件夹创建一些渐变颜色的资源</h4><p>color1.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#614385\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#516395\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"0\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color2.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#5f2c82\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#49a09d\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"45\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color3.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#4776E6\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#8E54E9\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"90\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>color4.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"#7141e2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"#d46cb3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"135\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-创建一个用到上面创建的渐变色的动画序列，命名为animation-list-xml-放进去drawable文件夹\"><a href=\"#2-创建一个用到上面创建的渐变色的动画序列，命名为animation-list-xml-放进去drawable文件夹\" class=\"headerlink\" title=\"2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹\"></a>2. 创建一个用到上面创建的渐变色的动画序列，命名为animation_list.xml,放进去drawable文件夹</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">animation-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/color4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"10000\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-将上面已经创建好的动画序列应用到你layout的背景顶层的view中\"><a href=\"#3-将上面已经创建好的动画序列应用到你layout的背景顶层的view中\" class=\"headerlink\" title=\"3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中\"></a>3. 将上面已经创建好的动画序列应用到你layout的背景顶层的view中</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">\"http://schemas.android.com/tools\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/animation_list\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/container\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Child Views --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-在你的activity中用AnimationDrawable去实现过渡效果\"><a href=\"#4-在你的activity中用AnimationDrawable去实现过渡效果\" class=\"headerlink\" title=\"4.在你的activity中用AnimationDrawable去实现过渡效果\"></a>4.在你的activity中用AnimationDrawable去实现过渡效果</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinearLayout container = (LinearLayout) findViewById(R.id.container);</span><br><span class=\"line\"></span><br><span class=\"line\">AnimationDrawable anim = (AnimationDrawable) container.getBackground();</span><br><span class=\"line\">anim.setEnterFadeDuration(<span class=\"number\">6000</span>);</span><br><span class=\"line\">anim.setExitFadeDuration(<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 开始播放动画：在onResume方法中开始播放渐变动画</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onResume</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onResume();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anim != <span class=\"keyword\">null</span> &amp;&amp; !anim.isRunning())</span><br><span class=\"line\">        anim.start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"comment\">// 停止播放动画：在onPause方法中停止播放渐变动画</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPause</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onPause();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anim != <span class=\"keyword\">null</span> &amp;&amp; anim.isRunning())</span><br><span class=\"line\">        anim.stop();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"将状态栏设置透明（去除状态栏）\"><a href=\"#将状态栏设置透明（去除状态栏）\" class=\"headerlink\" title=\"将状态栏设置透明（去除状态栏）\"></a>将状态栏设置透明（去除状态栏）</h3><p>values/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span> /&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v19/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowTranslucentStatus\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v21/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>values-v23/styles.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"Theme.AppTheme.TranslucentStatusBar\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.NoActionBar\"</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:statusBarColor\"</span>&gt;</span>@android:color/transparent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:windowLightStatusBar\"</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span>  </span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"meta\">@Override</span>  </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// 加入下面的代码</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;  </span><br><span class=\"line\">            findViewById(android.R.id.content).setSystemUiVisibility(  </span><br><span class=\"line\">                    View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LAYOUT_STABLE);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        setContentView(R.layout.activity_splash);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:theme</span>=<span class=\"string\">\"@style/Theme.AppTheme.TranslucentStatusBar\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h3><p>邮箱：<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n<h3 id=\"请我喝咖啡\"><a href=\"#请我喝咖啡\" class=\"headerlink\" title=\"请我喝咖啡\"></a>请我喝咖啡</h3><p>如果你觉得这个文章对你有帮助，可以请我喝杯咖啡<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-7a6705cb3d2feaa6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wechatcode.jpg\"></p>\n"},{"title":"如何启用Shadowsocks的多端口","date":"2019-06-01T03:30:32.000Z","_content":"\n**原文地址(原文目前已经被删除 本文属于备份文章  )：[如何启用Shadowsocks的多端口](https://teddysun.com/532.html)**  \n\n一键脚本默认只会开启单个端口以供使用。之所以这么做，是因为考虑到一般都是个人使用才会自己搭建属于自己的 Shadowsocks 服务端，所以在安装交互的时候，默认只要求输入某个端口即可。但如果你想要小范围内分享，那么你可能需要开启多个端口。 目前主流的四个版本实际上都是支持多端口的，只不过开启的方法不太一样，本文的重点就是写一下针对不同版本的 Shadowsocks 如何开启多端口。\n\n注意：本文是以四合一版的正确安装和使用为前提条件的。\n\n## Shadowsocks-Python\n\nShadowsocks-Python 版的配置文件路径 /etc/shadowsocks-python/config.json，下面以修改该配置文件来说明。 在 Linux 下建议使用 vim 或者 nano 来编辑此配置文件。具体如何使用这两种编辑器，这里不多说明，可自行去搜索相关用法。 Shadowsocks-Python 版多端口配置文件示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"fast_open\": false\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-python restart\n```\n\n## ShadowsocksR\n\nShadowsocksR 版的配置文件路径 /etc/shadowsocks-r/config.json，下面以修改该配置文件来说明。 ShadowsocksR 版多端口配置文件示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"server_ipv6\": \"[::]\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n        \"9000\":\"password0\",\n        \"9001\":\"password1\",\n        \"9002\":\"password2\",\n        \"9003\":\"password3\",\n        \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"protocol\": \"your_protocol\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"your_obfs\",\n    \"obfs_param\": \"\",\n    \"redirect\": \"\",\n    \"dns_ipv6\": false,\n    \"fast_open\": false,\n    \"workers\": 1\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-r restart\n```\n\n## Shadowsocks-Go\n\nShadowsocks-Go 版的配置文件路径 /etc/shadowsocks-go/config.json，下面以修改该配置文件来说明。 Shadowsocks-Go 版多端口配置文件示例：\n\n```javascript\n{\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"method\":\"your_encryption_method\",\n    \"timeout\":300\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-go restart\n```\n\n## Shadowsocks-libev\n\nShadowsocks-libev 版是唯一不能单纯靠修改配置文件来开启多端口的。\n\n不过，开发者单独开发了一个 ss-manager 来管理和开启多端口，其工作原理大致如下：\n\n调用 ss-server 并根据配置文件里的多个端口号，在当前用户目录下生成隐藏文件夹 .shadowsocks 以及拆分配置文件为 .shadowsocks_端口号.conf，并以此创建新的进程，再生成 .shadowsocks_端口号.pid 来保存进程的 pid 信息。 最终，创建出来的 ss-server 进程数和配置文件里的端口数相同。也就是说，每个端口需要开启一个 ss-server 进程。\n\n于是就简单写了一个用于 Shadowsocks-libev 版多用户管理 ss-manager 的启动脚本，可以通过编辑 json 配置文件 /etc/shadowsocks-manager/config.json 的形式，启动和停止多端口的 libev 版服务端。 下面说一下用法。\n\n### 下载该启动脚本并赋予执行权限。\n\n```javascript\n$ wget -O /etc/init.d/shadowsocks-manager https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-manager\n$ chmod 755 /etc/init.d/shadowsocks-manager\n```\n\n### 新建存放配置文件的目录\n\n```javascript\n$ mkdir /etc/shadowsocks-manager\n```\n\n### 创建多端口配置文件，/etc/shadowsocks-manager/config.json\n\n示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"your_encryption_method\",\n    \"nameserver\":\"8.8.8.8\",\n    \"mode\":\"tcp_and_udp\"\n}\n```\n\n关于配置文件，更多选项，请参考：     <https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc>\n\n### 使用启动脚本\n\n```javascript\n启动：/etc/init.d/shadowsocks-manager start\n停止：/etc/init.d/shadowsocks-manager stop\n重启：/etc/init.d/shadowsocks-manager restart\n查看状态：/etc/init.d/shadowsocks-manager status\n```\n\n## 共通步骤\n\n如果你是在 CentOS 系统里运行的，也许会需要将配置文件里对应的端口在防火墙里打开。 CentOS 6 一般是使用 iptables，先确认一下状态：\n\n```javascript\n$ /etc/init.d/iptables status\n```\n\n如果是处于运行中，那么打开新端口的命令如下：\n\n```javascript\n$ iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 新端口号 -j ACCEPT\n$ iptables -I INPUT -m state --state NEW -m udp -p udp --dport 新端口号 -j ACCEPT\n```\n\n保存并重启 iptables，命令如下：\n\n```javascript\n$ /etc/init.d/iptables save\n$ /etc/init.d/iptables restart\n```\n\n显示 iptables 一览，并确认端口是否添加成功：\n\n```javascript\n$ iptables -L -n\n```\n\nCentOS 7 一般是使用 firewalld，先确认一下状态：\n\n```javascript\n$ systemctl status firewalld\n```\n\n如果是处于运行中，那么打开新端口的命令如下：\n\n```javascript\n$ firewall-cmd --permanent --zone=public --add-port=新端口号/tcp\n$ firewall-cmd --permanent --zone=public --add-port=新端口号/udp\n```\n\n重新加载 firewalld，命令如下：\n\n```javascript\n$ firewall-cmd --reload\n```\n\n显示 firewall 一览，并确认端口是否添加成功：\n\n```javascript\n$ firewall-cmd --list-all\n```\n\nDebian 或 Ubuntu 默认一般是不开启防火墙的，当然也有可能出现特殊情况已经开启了，那么同样需要将配置文件里对应的端口在防火墙里打开。 当然，如果你嫌麻烦，那么可以直接将防火墙关闭。 iptables 的关闭方法：\n\n```javascript\n$ /etc/init.d/iptables stop\n```\n\n关闭开机自启动\n\n```javascript\n$ chkconfig iptables off\n```\n\nfirewalld 的关闭方法：\n\n```javascript\n$ systemctl stop firewalld\n```\n\n关闭开机自启动\n\n```javascript\n$ systemctl disable firewalld\n```\n\n另外，如果你使用的是大公司的 Cloud 产品，比如 AWS，Google Cloud，Azure，阿里云等等，也许还需要在后台的控制面板里将对应的通信端口打开。这里就不多说明了，每家的方法大同小异。","source":"_posts/如何启用Shadowsocks的多端口.md","raw":"---\ntitle: '如何启用Shadowsocks的多端口'\ndate: 2019-06-01 11:30:32\ntags: [shadowsocks,outline,翻墙]\ncategories: 翻墙\n---\n\n**原文地址(原文目前已经被删除 本文属于备份文章  )：[如何启用Shadowsocks的多端口](https://teddysun.com/532.html)**  \n\n一键脚本默认只会开启单个端口以供使用。之所以这么做，是因为考虑到一般都是个人使用才会自己搭建属于自己的 Shadowsocks 服务端，所以在安装交互的时候，默认只要求输入某个端口即可。但如果你想要小范围内分享，那么你可能需要开启多个端口。 目前主流的四个版本实际上都是支持多端口的，只不过开启的方法不太一样，本文的重点就是写一下针对不同版本的 Shadowsocks 如何开启多端口。\n\n注意：本文是以四合一版的正确安装和使用为前提条件的。\n\n## Shadowsocks-Python\n\nShadowsocks-Python 版的配置文件路径 /etc/shadowsocks-python/config.json，下面以修改该配置文件来说明。 在 Linux 下建议使用 vim 或者 nano 来编辑此配置文件。具体如何使用这两种编辑器，这里不多说明，可自行去搜索相关用法。 Shadowsocks-Python 版多端口配置文件示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"fast_open\": false\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-python restart\n```\n\n## ShadowsocksR\n\nShadowsocksR 版的配置文件路径 /etc/shadowsocks-r/config.json，下面以修改该配置文件来说明。 ShadowsocksR 版多端口配置文件示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"server_ipv6\": \"[::]\",\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"port_password\":{\n        \"9000\":\"password0\",\n        \"9001\":\"password1\",\n        \"9002\":\"password2\",\n        \"9003\":\"password3\",\n        \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"method\":\"your_encryption_method\",\n    \"protocol\": \"your_protocol\",\n    \"protocol_param\": \"\",\n    \"obfs\": \"your_obfs\",\n    \"obfs_param\": \"\",\n    \"redirect\": \"\",\n    \"dns_ipv6\": false,\n    \"fast_open\": false,\n    \"workers\": 1\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-r restart\n```\n\n## Shadowsocks-Go\n\nShadowsocks-Go 版的配置文件路径 /etc/shadowsocks-go/config.json，下面以修改该配置文件来说明。 Shadowsocks-Go 版多端口配置文件示例：\n\n```javascript\n{\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"method\":\"your_encryption_method\",\n    \"timeout\":300\n}\n```\n\n重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：\n\n```javascript\n$ /etc/init.d/shadowsocks-go restart\n```\n\n## Shadowsocks-libev\n\nShadowsocks-libev 版是唯一不能单纯靠修改配置文件来开启多端口的。\n\n不过，开发者单独开发了一个 ss-manager 来管理和开启多端口，其工作原理大致如下：\n\n调用 ss-server 并根据配置文件里的多个端口号，在当前用户目录下生成隐藏文件夹 .shadowsocks 以及拆分配置文件为 .shadowsocks_端口号.conf，并以此创建新的进程，再生成 .shadowsocks_端口号.pid 来保存进程的 pid 信息。 最终，创建出来的 ss-server 进程数和配置文件里的端口数相同。也就是说，每个端口需要开启一个 ss-server 进程。\n\n于是就简单写了一个用于 Shadowsocks-libev 版多用户管理 ss-manager 的启动脚本，可以通过编辑 json 配置文件 /etc/shadowsocks-manager/config.json 的形式，启动和停止多端口的 libev 版服务端。 下面说一下用法。\n\n### 下载该启动脚本并赋予执行权限。\n\n```javascript\n$ wget -O /etc/init.d/shadowsocks-manager https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-manager\n$ chmod 755 /etc/init.d/shadowsocks-manager\n```\n\n### 新建存放配置文件的目录\n\n```javascript\n$ mkdir /etc/shadowsocks-manager\n```\n\n### 创建多端口配置文件，/etc/shadowsocks-manager/config.json\n\n示例：\n\n```javascript\n{\n    \"server\":\"0.0.0.0\",\n    \"port_password\":{\n         \"9000\":\"password0\",\n         \"9001\":\"password1\",\n         \"9002\":\"password2\",\n         \"9003\":\"password3\",\n         \"9004\":\"password4\"\n    },\n    \"timeout\":300,\n    \"user\":\"nobody\",\n    \"method\":\"your_encryption_method\",\n    \"nameserver\":\"8.8.8.8\",\n    \"mode\":\"tcp_and_udp\"\n}\n```\n\n关于配置文件，更多选项，请参考：     <https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc>\n\n### 使用启动脚本\n\n```javascript\n启动：/etc/init.d/shadowsocks-manager start\n停止：/etc/init.d/shadowsocks-manager stop\n重启：/etc/init.d/shadowsocks-manager restart\n查看状态：/etc/init.d/shadowsocks-manager status\n```\n\n## 共通步骤\n\n如果你是在 CentOS 系统里运行的，也许会需要将配置文件里对应的端口在防火墙里打开。 CentOS 6 一般是使用 iptables，先确认一下状态：\n\n```javascript\n$ /etc/init.d/iptables status\n```\n\n如果是处于运行中，那么打开新端口的命令如下：\n\n```javascript\n$ iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 新端口号 -j ACCEPT\n$ iptables -I INPUT -m state --state NEW -m udp -p udp --dport 新端口号 -j ACCEPT\n```\n\n保存并重启 iptables，命令如下：\n\n```javascript\n$ /etc/init.d/iptables save\n$ /etc/init.d/iptables restart\n```\n\n显示 iptables 一览，并确认端口是否添加成功：\n\n```javascript\n$ iptables -L -n\n```\n\nCentOS 7 一般是使用 firewalld，先确认一下状态：\n\n```javascript\n$ systemctl status firewalld\n```\n\n如果是处于运行中，那么打开新端口的命令如下：\n\n```javascript\n$ firewall-cmd --permanent --zone=public --add-port=新端口号/tcp\n$ firewall-cmd --permanent --zone=public --add-port=新端口号/udp\n```\n\n重新加载 firewalld，命令如下：\n\n```javascript\n$ firewall-cmd --reload\n```\n\n显示 firewall 一览，并确认端口是否添加成功：\n\n```javascript\n$ firewall-cmd --list-all\n```\n\nDebian 或 Ubuntu 默认一般是不开启防火墙的，当然也有可能出现特殊情况已经开启了，那么同样需要将配置文件里对应的端口在防火墙里打开。 当然，如果你嫌麻烦，那么可以直接将防火墙关闭。 iptables 的关闭方法：\n\n```javascript\n$ /etc/init.d/iptables stop\n```\n\n关闭开机自启动\n\n```javascript\n$ chkconfig iptables off\n```\n\nfirewalld 的关闭方法：\n\n```javascript\n$ systemctl stop firewalld\n```\n\n关闭开机自启动\n\n```javascript\n$ systemctl disable firewalld\n```\n\n另外，如果你使用的是大公司的 Cloud 产品，比如 AWS，Google Cloud，Azure，阿里云等等，也许还需要在后台的控制面板里将对应的通信端口打开。这里就不多说明了，每家的方法大同小异。","slug":"如何启用Shadowsocks的多端口","published":1,"updated":"2019-07-21T09:56:12.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc5y000zl0onheng28y3","content":"<p><strong>原文地址(原文目前已经被删除 本文属于备份文章  )：<a href=\"https://teddysun.com/532.html\" target=\"_blank\" rel=\"noopener\">如何启用Shadowsocks的多端口</a></strong>  </p>\n<p>一键脚本默认只会开启单个端口以供使用。之所以这么做，是因为考虑到一般都是个人使用才会自己搭建属于自己的 Shadowsocks 服务端，所以在安装交互的时候，默认只要求输入某个端口即可。但如果你想要小范围内分享，那么你可能需要开启多个端口。 目前主流的四个版本实际上都是支持多端口的，只不过开启的方法不太一样，本文的重点就是写一下针对不同版本的 Shadowsocks 如何开启多端口。</p>\n<p>注意：本文是以四合一版的正确安装和使用为前提条件的。</p>\n<h2 id=\"Shadowsocks-Python\"><a href=\"#Shadowsocks-Python\" class=\"headerlink\" title=\"Shadowsocks-Python\"></a>Shadowsocks-Python</h2><p>Shadowsocks-Python 版的配置文件路径 /etc/shadowsocks-python/config.json，下面以修改该配置文件来说明。 在 Linux 下建议使用 vim 或者 nano 来编辑此配置文件。具体如何使用这两种编辑器，这里不多说明，可自行去搜索相关用法。 Shadowsocks-Python 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-python restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ShadowsocksR\"><a href=\"#ShadowsocksR\" class=\"headerlink\" title=\"ShadowsocksR\"></a>ShadowsocksR</h2><p>ShadowsocksR 版的配置文件路径 /etc/shadowsocks-r/config.json，下面以修改该配置文件来说明。 ShadowsocksR 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server_ipv6\"</span>: <span class=\"string\">\"[::]\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"your_protocol\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"protocol_param\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"obfs\"</span>: <span class=\"string\">\"your_obfs\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"obfs_param\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"redirect\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dns_ipv6\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"workers\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-r restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadowsocks-Go\"><a href=\"#Shadowsocks-Go\" class=\"headerlink\" title=\"Shadowsocks-Go\"></a>Shadowsocks-Go</h2><p>Shadowsocks-Go 版的配置文件路径 /etc/shadowsocks-go/config.json，下面以修改该配置文件来说明。 Shadowsocks-Go 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-go restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadowsocks-libev\"><a href=\"#Shadowsocks-libev\" class=\"headerlink\" title=\"Shadowsocks-libev\"></a>Shadowsocks-libev</h2><p>Shadowsocks-libev 版是唯一不能单纯靠修改配置文件来开启多端口的。</p>\n<p>不过，开发者单独开发了一个 ss-manager 来管理和开启多端口，其工作原理大致如下：</p>\n<p>调用 ss-server 并根据配置文件里的多个端口号，在当前用户目录下生成隐藏文件夹 .shadowsocks 以及拆分配置文件为 .shadowsocks_端口号.conf，并以此创建新的进程，再生成 .shadowsocks_端口号.pid 来保存进程的 pid 信息。 最终，创建出来的 ss-server 进程数和配置文件里的端口数相同。也就是说，每个端口需要开启一个 ss-server 进程。</p>\n<p>于是就简单写了一个用于 Shadowsocks-libev 版多用户管理 ss-manager 的启动脚本，可以通过编辑 json 配置文件 /etc/shadowsocks-manager/config.json 的形式，启动和停止多端口的 libev 版服务端。 下面说一下用法。</p>\n<h3 id=\"下载该启动脚本并赋予执行权限。\"><a href=\"#下载该启动脚本并赋予执行权限。\" class=\"headerlink\" title=\"下载该启动脚本并赋予执行权限。\"></a>下载该启动脚本并赋予执行权限。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -O /etc/init.d/shadowsocks-manager https:<span class=\"comment\">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-manager</span></span><br><span class=\"line\">$ chmod <span class=\"number\">755</span> /etc/init.d/shadowsocks-manager</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建存放配置文件的目录\"><a href=\"#新建存放配置文件的目录\" class=\"headerlink\" title=\"新建存放配置文件的目录\"></a>新建存放配置文件的目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /etc/shadowsocks-manager</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建多端口配置文件，-etc-shadowsocks-manager-config-json\"><a href=\"#创建多端口配置文件，-etc-shadowsocks-manager-config-json\" class=\"headerlink\" title=\"创建多端口配置文件，/etc/shadowsocks-manager/config.json\"></a>创建多端口配置文件，/etc/shadowsocks-manager/config.json</h3><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>:<span class=\"string\">\"nobody\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nameserver\"</span>:<span class=\"string\">\"8.8.8.8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mode\"</span>:<span class=\"string\">\"tcp_and_udp\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于配置文件，更多选项，请参考：     <a href=\"https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc</a></p>\n<h3 id=\"使用启动脚本\"><a href=\"#使用启动脚本\" class=\"headerlink\" title=\"使用启动脚本\"></a>使用启动脚本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/shadowsocks-manager start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks-manager stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks-manager restart</span><br><span class=\"line\">查看状态：/etc/init.d/shadowsocks-manager status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"共通步骤\"><a href=\"#共通步骤\" class=\"headerlink\" title=\"共通步骤\"></a>共通步骤</h2><p>如果你是在 CentOS 系统里运行的，也许会需要将配置文件里对应的端口在防火墙里打开。 CentOS 6 一般是使用 iptables，先确认一下状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables status</span><br></pre></td></tr></table></figure>\n\n<p>如果是处于运行中，那么打开新端口的命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 新端口号 -j ACCEPT</span><br><span class=\"line\">$ iptables -I INPUT -m state --state NEW -m udp -p udp --dport 新端口号 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<p>保存并重启 iptables，命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables save</span><br><span class=\"line\">$ /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure>\n\n<p>显示 iptables 一览，并确认端口是否添加成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n\n<p>CentOS 7 一般是使用 firewalld，先确认一下状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status firewalld</span><br></pre></td></tr></table></figure>\n\n<p>如果是处于运行中，那么打开新端口的命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=新端口号/tcp</span><br><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=新端口号/udp</span><br></pre></td></tr></table></figure>\n\n<p>重新加载 firewalld，命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>显示 firewall 一览，并确认端口是否添加成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --list-all</span><br></pre></td></tr></table></figure>\n\n<p>Debian 或 Ubuntu 默认一般是不开启防火墙的，当然也有可能出现特殊情况已经开启了，那么同样需要将配置文件里对应的端口在防火墙里打开。 当然，如果你嫌麻烦，那么可以直接将防火墙关闭。 iptables 的关闭方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables stop</span><br></pre></td></tr></table></figure>\n\n<p>关闭开机自启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chkconfig iptables off</span><br></pre></td></tr></table></figure>\n\n<p>firewalld 的关闭方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<p>关闭开机自启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl disable firewalld</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果你使用的是大公司的 Cloud 产品，比如 AWS，Google Cloud，Azure，阿里云等等，也许还需要在后台的控制面板里将对应的通信端口打开。这里就不多说明了，每家的方法大同小异。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>原文地址(原文目前已经被删除 本文属于备份文章  )：<a href=\"https://teddysun.com/532.html\" target=\"_blank\" rel=\"noopener\">如何启用Shadowsocks的多端口</a></strong>  </p>\n<p>一键脚本默认只会开启单个端口以供使用。之所以这么做，是因为考虑到一般都是个人使用才会自己搭建属于自己的 Shadowsocks 服务端，所以在安装交互的时候，默认只要求输入某个端口即可。但如果你想要小范围内分享，那么你可能需要开启多个端口。 目前主流的四个版本实际上都是支持多端口的，只不过开启的方法不太一样，本文的重点就是写一下针对不同版本的 Shadowsocks 如何开启多端口。</p>\n<p>注意：本文是以四合一版的正确安装和使用为前提条件的。</p>\n<h2 id=\"Shadowsocks-Python\"><a href=\"#Shadowsocks-Python\" class=\"headerlink\" title=\"Shadowsocks-Python\"></a>Shadowsocks-Python</h2><p>Shadowsocks-Python 版的配置文件路径 /etc/shadowsocks-python/config.json，下面以修改该配置文件来说明。 在 Linux 下建议使用 vim 或者 nano 来编辑此配置文件。具体如何使用这两种编辑器，这里不多说明，可自行去搜索相关用法。 Shadowsocks-Python 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-python restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ShadowsocksR\"><a href=\"#ShadowsocksR\" class=\"headerlink\" title=\"ShadowsocksR\"></a>ShadowsocksR</h2><p>ShadowsocksR 版的配置文件路径 /etc/shadowsocks-r/config.json，下面以修改该配置文件来说明。 ShadowsocksR 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"server_ipv6\"</span>: <span class=\"string\">\"[::]\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"protocol\"</span>: <span class=\"string\">\"your_protocol\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"protocol_param\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"obfs\"</span>: <span class=\"string\">\"your_obfs\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"obfs_param\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"redirect\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dns_ipv6\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"fast_open\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"string\">\"workers\"</span>: <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-r restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadowsocks-Go\"><a href=\"#Shadowsocks-Go\" class=\"headerlink\" title=\"Shadowsocks-Go\"></a>Shadowsocks-Go</h2><p>Shadowsocks-Go 版的配置文件路径 /etc/shadowsocks-go/config.json，下面以修改该配置文件来说明。 Shadowsocks-Go 版多端口配置文件示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重点在于 port_password 字段的修改。 你想要多少端口就添加多少端口，注意需要符合 json 格式，里面的最后一行后面是没有英文逗号的，整个大括号的最后需要有一个英文逗号。 修改完成后，保存配置文件，重启之。命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/shadowsocks-go restart</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Shadowsocks-libev\"><a href=\"#Shadowsocks-libev\" class=\"headerlink\" title=\"Shadowsocks-libev\"></a>Shadowsocks-libev</h2><p>Shadowsocks-libev 版是唯一不能单纯靠修改配置文件来开启多端口的。</p>\n<p>不过，开发者单独开发了一个 ss-manager 来管理和开启多端口，其工作原理大致如下：</p>\n<p>调用 ss-server 并根据配置文件里的多个端口号，在当前用户目录下生成隐藏文件夹 .shadowsocks 以及拆分配置文件为 .shadowsocks_端口号.conf，并以此创建新的进程，再生成 .shadowsocks_端口号.pid 来保存进程的 pid 信息。 最终，创建出来的 ss-server 进程数和配置文件里的端口数相同。也就是说，每个端口需要开启一个 ss-server 进程。</p>\n<p>于是就简单写了一个用于 Shadowsocks-libev 版多用户管理 ss-manager 的启动脚本，可以通过编辑 json 配置文件 /etc/shadowsocks-manager/config.json 的形式，启动和停止多端口的 libev 版服务端。 下面说一下用法。</p>\n<h3 id=\"下载该启动脚本并赋予执行权限。\"><a href=\"#下载该启动脚本并赋予执行权限。\" class=\"headerlink\" title=\"下载该启动脚本并赋予执行权限。\"></a>下载该启动脚本并赋予执行权限。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ wget -O /etc/init.d/shadowsocks-manager https:<span class=\"comment\">//raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-manager</span></span><br><span class=\"line\">$ chmod <span class=\"number\">755</span> /etc/init.d/shadowsocks-manager</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建存放配置文件的目录\"><a href=\"#新建存放配置文件的目录\" class=\"headerlink\" title=\"新建存放配置文件的目录\"></a>新建存放配置文件的目录</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir /etc/shadowsocks-manager</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建多端口配置文件，-etc-shadowsocks-manager-config-json\"><a href=\"#创建多端口配置文件，-etc-shadowsocks-manager-config-json\" class=\"headerlink\" title=\"创建多端口配置文件，/etc/shadowsocks-manager/config.json\"></a>创建多端口配置文件，/etc/shadowsocks-manager/config.json</h3><p>示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"server\"</span>:<span class=\"string\">\"0.0.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">         <span class=\"string\">\"9000\"</span>:<span class=\"string\">\"password0\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9001\"</span>:<span class=\"string\">\"password1\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9002\"</span>:<span class=\"string\">\"password2\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9003\"</span>:<span class=\"string\">\"password3\"</span>,</span><br><span class=\"line\">         <span class=\"string\">\"9004\"</span>:<span class=\"string\">\"password4\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span>:<span class=\"string\">\"nobody\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"method\"</span>:<span class=\"string\">\"your_encryption_method\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"nameserver\"</span>:<span class=\"string\">\"8.8.8.8\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mode\"</span>:<span class=\"string\">\"tcp_and_udp\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于配置文件，更多选项，请参考：     <a href=\"https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-libev/blob/master/doc/shadowsocks-libev.asciidoc</a></p>\n<h3 id=\"使用启动脚本\"><a href=\"#使用启动脚本\" class=\"headerlink\" title=\"使用启动脚本\"></a>使用启动脚本</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/shadowsocks-manager start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks-manager stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks-manager restart</span><br><span class=\"line\">查看状态：/etc/init.d/shadowsocks-manager status</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"共通步骤\"><a href=\"#共通步骤\" class=\"headerlink\" title=\"共通步骤\"></a>共通步骤</h2><p>如果你是在 CentOS 系统里运行的，也许会需要将配置文件里对应的端口在防火墙里打开。 CentOS 6 一般是使用 iptables，先确认一下状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables status</span><br></pre></td></tr></table></figure>\n\n<p>如果是处于运行中，那么打开新端口的命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport 新端口号 -j ACCEPT</span><br><span class=\"line\">$ iptables -I INPUT -m state --state NEW -m udp -p udp --dport 新端口号 -j ACCEPT</span><br></pre></td></tr></table></figure>\n\n<p>保存并重启 iptables，命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables save</span><br><span class=\"line\">$ /etc/init.d/iptables restart</span><br></pre></td></tr></table></figure>\n\n<p>显示 iptables 一览，并确认端口是否添加成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ iptables -L -n</span><br></pre></td></tr></table></figure>\n\n<p>CentOS 7 一般是使用 firewalld，先确认一下状态：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status firewalld</span><br></pre></td></tr></table></figure>\n\n<p>如果是处于运行中，那么打开新端口的命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=新端口号/tcp</span><br><span class=\"line\">$ firewall-cmd --permanent --zone=public --add-port=新端口号/udp</span><br></pre></td></tr></table></figure>\n\n<p>重新加载 firewalld，命令如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>显示 firewall 一览，并确认端口是否添加成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ firewall-cmd --list-all</span><br></pre></td></tr></table></figure>\n\n<p>Debian 或 Ubuntu 默认一般是不开启防火墙的，当然也有可能出现特殊情况已经开启了，那么同样需要将配置文件里对应的端口在防火墙里打开。 当然，如果你嫌麻烦，那么可以直接将防火墙关闭。 iptables 的关闭方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ /etc/init.d/iptables stop</span><br></pre></td></tr></table></figure>\n\n<p>关闭开机自启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ chkconfig iptables off</span><br></pre></td></tr></table></figure>\n\n<p>firewalld 的关闭方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n\n<p>关闭开机自启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl disable firewalld</span><br></pre></td></tr></table></figure>\n\n<p>另外，如果你使用的是大公司的 Cloud 产品，比如 AWS，Google Cloud，Azure，阿里云等等，也许还需要在后台的控制面板里将对应的通信端口打开。这里就不多说明了，每家的方法大同小异。</p>\n"},{"title":"用Kotlin开发，Android Studio配置Kotlin篇","date":"2017-08-13T03:35:23.000Z","_content":"\n- # 前言\n如今J神加入了GOOGLE，并且专注在Kotlin领域，而且今年的I/O大会宣布Kotlin作为官方开发语言，所以以后的趋势可能要用Kotlin进行Android开发，对于初学者来说，现在学习使用Kotlin进行开发很有必要。即使现在Android还不是Kotlin天下，可是在以后谁都说不定对吧。\n\n # Android Studio配置Kotlin\n\n## 第一步：安装Kotlin插件\n*(Android Studio:以下简称AS)*\n由于Kotlin插件只在[AS3.0](https://developer.android.com/studio/preview/index.html)自带。所以之前的版本都必须安装Kotlin插件，在AS中依次点击**File→Settings→Plugins→Install JetBrains plugin**，然后在搜索框填入Kotlin，找到Kotlin点击Install即可(由于我已经安装了，所以我这里没有Install按钮)\n![TIM截图20170813102806.png](http://upload-images.jianshu.io/upload_images/5796527-ddaeb6cc097bdc24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 第二步：创建项目\n创建项目的步骤和之前一样，点击(如果在欢迎界面)Start a new Android Studio project 或者 File →New project，配置和之前一样就好\n### 转换代码\n建立好项目后打开`MainActivity.java`可以按快捷键**Ctrl+Shift+A**或者点击**Help→Find Action**，输入 **Convert Java File to Kotlin File**，又或者点击**Code→ Convert Java File to Kotlin File**都可以将当前java文件转换成kotlin文件\n\n![TIM截图20170813104236.png](http://upload-images.jianshu.io/upload_images/5796527-e0ef520b6bf2ec3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n转换成功后就会发现.java后缀变成了.kt后缀，MainActivity也变成Kotlin语法\n\n![TIM截图20170813104359.png](http://upload-images.jianshu.io/upload_images/5796527-49f3bb348d211230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 在项目中配置Kotlin\n在MainActivity里面随便输入一点东西，AS会在上方会出现一个Configure按钮，点击即可配置Kotlin，或者点击 **Tools→Kotlin→Configure Kotlin in Project**\n\n![TIM截图20170813105024.png](http://upload-images.jianshu.io/upload_images/5796527-535dee76413d9e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在弹出的窗口选择OK即可\n\n![TIM截图20170813105251.png](http://upload-images.jianshu.io/upload_images/5796527-0f40b86db4bdef37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后会提示你更新项目，点击Sync Now即可\n\n# Kotlin在AS中的扩展\n## 添加依赖\n在`build.gradle`文件里添加依赖\n\n    apply plugin: 'kotlin-android-extensions'\n\n\n![TIM截图20170813110211.png](http://upload-images.jianshu.io/upload_images/5796527-d77473662b893c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 使用扩展\n先在`activity_main.xml`中添加一个TextView\n\n    <TextView\n        android:id=\"@+id/hello\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n       />\n\n然后回到`MainAcitivity.kt`\n\n    import kotlinx.android.synthetic.main.activity_main.*//记得添加这个import\n\n    class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        hello.setText(\"Hello Kotlin!\")//直接用id就可以控制，不用findviewById\n    }\n    }\n\n运行在手机\n\n![Screenshot_20170813-110806.png](http://upload-images.jianshu.io/upload_images/5796527-245d6eacbf61bb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用Kotlin扩展将以前java代码简化好多，提高开发效率\n\n更多关于kotlin扩展的解析可以查看[官方文档](http://kotlinlang.org/docs/tutorials/android-plugin.html)\n\n# 其他\n拓展阅读：[Android Frameworks Using Annotation Processing](http://kotlinlang.org/docs/tutorials/android-frameworks.html)\n\n# 联系\n[Github](https://github.com/zhaoweihaoChina)\n[Blog](http://zhaoweihao.me/)\nEmail:zhaoweihaochn@foxmail.com\n\n# 赞赏\n\n![wechatcode.jpg](http://upload-images.jianshu.io/upload_images/5796527-43b1117577a374a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","source":"_posts/用Kotlin开发，Android Studio配置Kotlin篇.md","raw":"---\ntitle: 用Kotlin开发，Android Studio配置Kotlin篇\ndate: 2017-08-13 11:35:23\ntags: [Kotlin]\ncategories: Kotlin\n---\n\n- # 前言\n如今J神加入了GOOGLE，并且专注在Kotlin领域，而且今年的I/O大会宣布Kotlin作为官方开发语言，所以以后的趋势可能要用Kotlin进行Android开发，对于初学者来说，现在学习使用Kotlin进行开发很有必要。即使现在Android还不是Kotlin天下，可是在以后谁都说不定对吧。\n\n # Android Studio配置Kotlin\n\n## 第一步：安装Kotlin插件\n*(Android Studio:以下简称AS)*\n由于Kotlin插件只在[AS3.0](https://developer.android.com/studio/preview/index.html)自带。所以之前的版本都必须安装Kotlin插件，在AS中依次点击**File→Settings→Plugins→Install JetBrains plugin**，然后在搜索框填入Kotlin，找到Kotlin点击Install即可(由于我已经安装了，所以我这里没有Install按钮)\n![TIM截图20170813102806.png](http://upload-images.jianshu.io/upload_images/5796527-ddaeb6cc097bdc24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 第二步：创建项目\n创建项目的步骤和之前一样，点击(如果在欢迎界面)Start a new Android Studio project 或者 File →New project，配置和之前一样就好\n### 转换代码\n建立好项目后打开`MainActivity.java`可以按快捷键**Ctrl+Shift+A**或者点击**Help→Find Action**，输入 **Convert Java File to Kotlin File**，又或者点击**Code→ Convert Java File to Kotlin File**都可以将当前java文件转换成kotlin文件\n\n![TIM截图20170813104236.png](http://upload-images.jianshu.io/upload_images/5796527-e0ef520b6bf2ec3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n转换成功后就会发现.java后缀变成了.kt后缀，MainActivity也变成Kotlin语法\n\n![TIM截图20170813104359.png](http://upload-images.jianshu.io/upload_images/5796527-49f3bb348d211230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n### 在项目中配置Kotlin\n在MainActivity里面随便输入一点东西，AS会在上方会出现一个Configure按钮，点击即可配置Kotlin，或者点击 **Tools→Kotlin→Configure Kotlin in Project**\n\n![TIM截图20170813105024.png](http://upload-images.jianshu.io/upload_images/5796527-535dee76413d9e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在弹出的窗口选择OK即可\n\n![TIM截图20170813105251.png](http://upload-images.jianshu.io/upload_images/5796527-0f40b86db4bdef37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n最后会提示你更新项目，点击Sync Now即可\n\n# Kotlin在AS中的扩展\n## 添加依赖\n在`build.gradle`文件里添加依赖\n\n    apply plugin: 'kotlin-android-extensions'\n\n\n![TIM截图20170813110211.png](http://upload-images.jianshu.io/upload_images/5796527-d77473662b893c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 使用扩展\n先在`activity_main.xml`中添加一个TextView\n\n    <TextView\n        android:id=\"@+id/hello\"\n        android:layout_width=\"fill_parent\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"Hello World!\"\n       />\n\n然后回到`MainAcitivity.kt`\n\n    import kotlinx.android.synthetic.main.activity_main.*//记得添加这个import\n\n    class MainActivity : AppCompatActivity() {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        hello.setText(\"Hello Kotlin!\")//直接用id就可以控制，不用findviewById\n    }\n    }\n\n运行在手机\n\n![Screenshot_20170813-110806.png](http://upload-images.jianshu.io/upload_images/5796527-245d6eacbf61bb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n使用Kotlin扩展将以前java代码简化好多，提高开发效率\n\n更多关于kotlin扩展的解析可以查看[官方文档](http://kotlinlang.org/docs/tutorials/android-plugin.html)\n\n# 其他\n拓展阅读：[Android Frameworks Using Annotation Processing](http://kotlinlang.org/docs/tutorials/android-frameworks.html)\n\n# 联系\n[Github](https://github.com/zhaoweihaoChina)\n[Blog](http://zhaoweihao.me/)\nEmail:zhaoweihaochn@foxmail.com\n\n# 赞赏\n\n![wechatcode.jpg](http://upload-images.jianshu.io/upload_images/5796527-43b1117577a374a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)","slug":"用Kotlin开发，Android Studio配置Kotlin篇","published":1,"updated":"2019-01-21T15:52:07.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc610013l0onhz27hbpp","content":"<ul>\n<li><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如今J神加入了GOOGLE，并且专注在Kotlin领域，而且今年的I/O大会宣布Kotlin作为官方开发语言，所以以后的趋势可能要用Kotlin进行Android开发，对于初学者来说，现在学习使用Kotlin进行开发很有必要。即使现在Android还不是Kotlin天下，可是在以后谁都说不定对吧。</p>\n<h1 id=\"Android-Studio配置Kotlin\"><a href=\"#Android-Studio配置Kotlin\" class=\"headerlink\" title=\"Android Studio配置Kotlin\"></a>Android Studio配置Kotlin</h1></li>\n</ul>\n<h2 id=\"第一步：安装Kotlin插件\"><a href=\"#第一步：安装Kotlin插件\" class=\"headerlink\" title=\"第一步：安装Kotlin插件\"></a>第一步：安装Kotlin插件</h2><p><em>(Android Studio:以下简称AS)</em><br>由于Kotlin插件只在<a href=\"https://developer.android.com/studio/preview/index.html\" target=\"_blank\" rel=\"noopener\">AS3.0</a>自带。所以之前的版本都必须安装Kotlin插件，在AS中依次点击<strong>File→Settings→Plugins→Install JetBrains plugin</strong>，然后在搜索框填入Kotlin，找到Kotlin点击Install即可(由于我已经安装了，所以我这里没有Install按钮)<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-ddaeb6cc097bdc24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813102806.png\"></p>\n<h2 id=\"第二步：创建项目\"><a href=\"#第二步：创建项目\" class=\"headerlink\" title=\"第二步：创建项目\"></a>第二步：创建项目</h2><p>创建项目的步骤和之前一样，点击(如果在欢迎界面)Start a new Android Studio project 或者 File →New project，配置和之前一样就好</p>\n<h3 id=\"转换代码\"><a href=\"#转换代码\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h3><p>建立好项目后打开<code>MainActivity.java</code>可以按快捷键<strong>Ctrl+Shift+A</strong>或者点击<strong>Help→Find Action</strong>，输入 <strong>Convert Java File to Kotlin File</strong>，又或者点击<strong>Code→ Convert Java File to Kotlin File</strong>都可以将当前java文件转换成kotlin文件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-e0ef520b6bf2ec3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813104236.png\"></p>\n<p>转换成功后就会发现.java后缀变成了.kt后缀，MainActivity也变成Kotlin语法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-49f3bb348d211230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813104359.png\"></p>\n<h3 id=\"在项目中配置Kotlin\"><a href=\"#在项目中配置Kotlin\" class=\"headerlink\" title=\"在项目中配置Kotlin\"></a>在项目中配置Kotlin</h3><p>在MainActivity里面随便输入一点东西，AS会在上方会出现一个Configure按钮，点击即可配置Kotlin，或者点击 <strong>Tools→Kotlin→Configure Kotlin in Project</strong></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-535dee76413d9e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813105024.png\"></p>\n<p>在弹出的窗口选择OK即可</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-0f40b86db4bdef37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813105251.png\"></p>\n<p>最后会提示你更新项目，点击Sync Now即可</p>\n<h1 id=\"Kotlin在AS中的扩展\"><a href=\"#Kotlin在AS中的扩展\" class=\"headerlink\" title=\"Kotlin在AS中的扩展\"></a>Kotlin在AS中的扩展</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>在<code>build.gradle</code>文件里添加依赖</p>\n<pre><code>apply plugin: &apos;kotlin-android-extensions&apos;</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d77473662b893c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813110211.png\"></p>\n<h2 id=\"使用扩展\"><a href=\"#使用扩展\" class=\"headerlink\" title=\"使用扩展\"></a>使用扩展</h2><p>先在<code>activity_main.xml</code>中添加一个TextView</p>\n<pre><code>&lt;TextView\n    android:id=&quot;@+id/hello&quot;\n    android:layout_width=&quot;fill_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:text=&quot;Hello World!&quot;\n   /&gt;</code></pre><p>然后回到<code>MainAcitivity.kt</code></p>\n<pre><code>import kotlinx.android.synthetic.main.activity_main.*//记得添加这个import\n\nclass MainActivity : AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    hello.setText(&quot;Hello Kotlin!&quot;)//直接用id就可以控制，不用findviewById\n}\n}</code></pre><p>运行在手机</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-245d6eacbf61bb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170813-110806.png\"></p>\n<p>使用Kotlin扩展将以前java代码简化好多，提高开发效率</p>\n<p>更多关于kotlin扩展的解析可以查看<a href=\"http://kotlinlang.org/docs/tutorials/android-plugin.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>拓展阅读：<a href=\"http://kotlinlang.org/docs/tutorials/android-frameworks.html\" target=\"_blank\" rel=\"noopener\">Android Frameworks Using Annotation Processing</a></p>\n<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p><a href=\"https://github.com/zhaoweihaoChina\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"http://zhaoweihao.me/\" target=\"_blank\" rel=\"noopener\">Blog</a><br>Email:<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-43b1117577a374a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wechatcode.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>如今J神加入了GOOGLE，并且专注在Kotlin领域，而且今年的I/O大会宣布Kotlin作为官方开发语言，所以以后的趋势可能要用Kotlin进行Android开发，对于初学者来说，现在学习使用Kotlin进行开发很有必要。即使现在Android还不是Kotlin天下，可是在以后谁都说不定对吧。</p>\n<h1 id=\"Android-Studio配置Kotlin\"><a href=\"#Android-Studio配置Kotlin\" class=\"headerlink\" title=\"Android Studio配置Kotlin\"></a>Android Studio配置Kotlin</h1></li>\n</ul>\n<h2 id=\"第一步：安装Kotlin插件\"><a href=\"#第一步：安装Kotlin插件\" class=\"headerlink\" title=\"第一步：安装Kotlin插件\"></a>第一步：安装Kotlin插件</h2><p><em>(Android Studio:以下简称AS)</em><br>由于Kotlin插件只在<a href=\"https://developer.android.com/studio/preview/index.html\" target=\"_blank\" rel=\"noopener\">AS3.0</a>自带。所以之前的版本都必须安装Kotlin插件，在AS中依次点击<strong>File→Settings→Plugins→Install JetBrains plugin</strong>，然后在搜索框填入Kotlin，找到Kotlin点击Install即可(由于我已经安装了，所以我这里没有Install按钮)<br><img src=\"http://upload-images.jianshu.io/upload_images/5796527-ddaeb6cc097bdc24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813102806.png\"></p>\n<h2 id=\"第二步：创建项目\"><a href=\"#第二步：创建项目\" class=\"headerlink\" title=\"第二步：创建项目\"></a>第二步：创建项目</h2><p>创建项目的步骤和之前一样，点击(如果在欢迎界面)Start a new Android Studio project 或者 File →New project，配置和之前一样就好</p>\n<h3 id=\"转换代码\"><a href=\"#转换代码\" class=\"headerlink\" title=\"转换代码\"></a>转换代码</h3><p>建立好项目后打开<code>MainActivity.java</code>可以按快捷键<strong>Ctrl+Shift+A</strong>或者点击<strong>Help→Find Action</strong>，输入 <strong>Convert Java File to Kotlin File</strong>，又或者点击<strong>Code→ Convert Java File to Kotlin File</strong>都可以将当前java文件转换成kotlin文件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-e0ef520b6bf2ec3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813104236.png\"></p>\n<p>转换成功后就会发现.java后缀变成了.kt后缀，MainActivity也变成Kotlin语法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-49f3bb348d211230.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813104359.png\"></p>\n<h3 id=\"在项目中配置Kotlin\"><a href=\"#在项目中配置Kotlin\" class=\"headerlink\" title=\"在项目中配置Kotlin\"></a>在项目中配置Kotlin</h3><p>在MainActivity里面随便输入一点东西，AS会在上方会出现一个Configure按钮，点击即可配置Kotlin，或者点击 <strong>Tools→Kotlin→Configure Kotlin in Project</strong></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-535dee76413d9e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813105024.png\"></p>\n<p>在弹出的窗口选择OK即可</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-0f40b86db4bdef37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813105251.png\"></p>\n<p>最后会提示你更新项目，点击Sync Now即可</p>\n<h1 id=\"Kotlin在AS中的扩展\"><a href=\"#Kotlin在AS中的扩展\" class=\"headerlink\" title=\"Kotlin在AS中的扩展\"></a>Kotlin在AS中的扩展</h1><h2 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h2><p>在<code>build.gradle</code>文件里添加依赖</p>\n<pre><code>apply plugin: &apos;kotlin-android-extensions&apos;</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-d77473662b893c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"TIM截图20170813110211.png\"></p>\n<h2 id=\"使用扩展\"><a href=\"#使用扩展\" class=\"headerlink\" title=\"使用扩展\"></a>使用扩展</h2><p>先在<code>activity_main.xml</code>中添加一个TextView</p>\n<pre><code>&lt;TextView\n    android:id=&quot;@+id/hello&quot;\n    android:layout_width=&quot;fill_parent&quot;\n    android:layout_height=&quot;wrap_content&quot;\n    android:text=&quot;Hello World!&quot;\n   /&gt;</code></pre><p>然后回到<code>MainAcitivity.kt</code></p>\n<pre><code>import kotlinx.android.synthetic.main.activity_main.*//记得添加这个import\n\nclass MainActivity : AppCompatActivity() {\n\noverride fun onCreate(savedInstanceState: Bundle?) {\n    super.onCreate(savedInstanceState)\n    setContentView(R.layout.activity_main)\n    hello.setText(&quot;Hello Kotlin!&quot;)//直接用id就可以控制，不用findviewById\n}\n}</code></pre><p>运行在手机</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-245d6eacbf61bb15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Screenshot_20170813-110806.png\"></p>\n<p>使用Kotlin扩展将以前java代码简化好多，提高开发效率</p>\n<p>更多关于kotlin扩展的解析可以查看<a href=\"http://kotlinlang.org/docs/tutorials/android-plugin.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>拓展阅读：<a href=\"http://kotlinlang.org/docs/tutorials/android-frameworks.html\" target=\"_blank\" rel=\"noopener\">Android Frameworks Using Annotation Processing</a></p>\n<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p><a href=\"https://github.com/zhaoweihaoChina\" target=\"_blank\" rel=\"noopener\">Github</a><br><a href=\"http://zhaoweihao.me/\" target=\"_blank\" rel=\"noopener\">Blog</a><br>Email:<a href=\"mailto:zhaoweihaochn@foxmail.com\">zhaoweihaochn@foxmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p><img src=\"http://upload-images.jianshu.io/upload_images/5796527-43b1117577a374a8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"wechatcode.jpg\"></p>\n"},{"title":"纪录博客域名更换","date":"2018-03-29T15:34:10.000Z","_content":"\n\n\n由于旧域名要过期了，五月份就要过期了，所以去狗爹搜了下发现.com居然可以买，而且续费还比.me便宜，就果断从.me更换到.com，我的博客网站由zhaoweihao.me更换到zhaoweihao.com，发篇文章纪录下。","source":"_posts/纪录博客域名更换.md","raw":"---\ntitle: 纪录博客域名更换\ndate: 2018-03-29 23:34:10\ntags:\n---\n\n\n\n由于旧域名要过期了，五月份就要过期了，所以去狗爹搜了下发现.com居然可以买，而且续费还比.me便宜，就果断从.me更换到.com，我的博客网站由zhaoweihao.me更换到zhaoweihao.com，发篇文章纪录下。","slug":"纪录博客域名更换","published":1,"updated":"2019-01-21T15:52:07.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc630016l0oncqlu1wea","content":"<p>由于旧域名要过期了，五月份就要过期了，所以去狗爹搜了下发现.com居然可以买，而且续费还比.me便宜，就果断从.me更换到.com，我的博客网站由zhaoweihao.me更换到zhaoweihao.com，发篇文章纪录下。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于旧域名要过期了，五月份就要过期了，所以去狗爹搜了下发现.com居然可以买，而且续费还比.me便宜，就果断从.me更换到.com，我的博客网站由zhaoweihao.me更换到zhaoweihao.com，发篇文章纪录下。</p>\n"},{"title":"给小白的超简单shadowsocks翻墙教程(outline)","date":"2019-05-22T03:30:32.000Z","_content":"原文地址：https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md  \n\n# 给小白的超简单shadowsocks翻墙教程\n\n# 前言\n\n  由于秋水逸冰大佬的退出，所以旧教程使用的一键安装shadowsocks脚本可能在未来的某一天也不管用了。出于这个原因，我又写了这篇文章用来给大家作为备用教程，这篇文章使用的是[Google Jigsaw](https://jigsaw.google.com/)团队制作的同样也是shadowsocks的一键脚本，由于是Google制作，所以迫于某些压力退出的可能性不大，个人认为可以作为长期的备用教程。\n\n# 开始\n\n## 购买VPS服务器\n\n俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？\n\n### 1、注册并登录\n\nVultr推荐链接：https://www.vultr.com/?ref=7370522\n\n这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；**但是我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以查看这边[文章](https://www.flyzy2005.com/vps/digitalocean-github-student-promo/)。**注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。\n\n![](/images/1.png)\n\n### 2、部署服务器\n\n第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器\n\n![](/images/2.png)\n\n第二步：在打开的页面选择洛杉矶Los Angeles服务器（由于日本服务器滥用导致很多IP被封了，建议电信用户可以选择洛杉矶或者伦敦），如果喜欢其他服务器也可以选择，后续操作是一样一样的\n\n![](/images/super_easy_shadowsocks_tutorial/1.png)\n\n第三步：接下来要注意了，系统最好选择Ubuntu，点击Ubuntu可以下拉选择18.04 x64（建议和我选择一样，避免问题出现）\n\n![](/images/super_easy_shadowsocks_tutorial/2.png)\n\n第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。\n\n![](/images/5.png)\n\n第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署\n\n![](/images/6.png)\n\n第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。\n\n![](/images/7.png)\n\n第七步：复制IP地址和密码，后面有用\n\n![](/images/super_easy_shadowsocks_tutorial/5.png)\n\n第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址(对应上图的IP Address)，例如我服务器IP是78.141.197.87，则ping 78.141.197.87，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。\n\n![](/images/10.png)\n\n好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。\n\n## 在服务器安装ss\n\n因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。\n\n- **如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入**\n\n`ssh root@你的服务器IP地址`\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n\n\n- **如果你是用windows10,可以打开系统自带的powershell工具:**\n\n\n\n\n\n![](/images/powershell_windows_menu.png)\n\n**输入**\n\n`ssh root@你的服务器IP地址`\n\n![](/images/powershell_run.png)\n\n**连接就可以（注意密码粘贴需要使用鼠标右键），然后可以跳过安装并运行xshell这个步骤**\n\n### 安装并运行xshell\n\n**提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商**\n\nwindows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建\n\n![](/images/w-1.png)\n\n接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好\n\n![](/images/w-2.png)\n\n接下来在弹出的窗口填root（默认服务器用户名）\n\n![](/images/w-3.png)\n\n这里就要填入你在上篇复制的服务器密码了\n\n![](/images/w-4.png)\n\n### 安装ss\n\n上面登录成功后如图所示\n\n![](/images/w-5.png)\n\n下面就是整个教程最重要的部分了，感谢Google团队制作的outline（制作的初衷是为了让记者更安全发布新闻的，由于同样使用shadowsocks，所以可以用于翻墙）。\n\n``` bash\nsudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)\"\n```\n\n复制粘贴上面代码到xshell，在xshell要右键粘贴，然后敲回车键，然后就会有一串不知名代码蹦出，停在这里了，这里的意思是问你是否需要安装Docker，输入y回车就行。\n\n![](/images/super_easy_shadowsocks_tutorial/13.png)\n\n这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！复制绿色的那段代码保存起来，后面会用到！\n\n![](/images/super_easy_shadowsocks_tutorial/14.png)\n\n## 下载服务端管理器\n\nwindows版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe\n\nmac版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg\n\nLinux版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage\n\n这里以windows为例，下载后安装完成后选择第四个 set up outline anywhere\n\n![](/images/super_easy_shadowsocks_tutorial/10.png)\n\n将上面保存的绿色代码粘贴到第二个输入框内，然后选择done\n\n![](/images/super_easy_shadowsocks_tutorial/15.png)\n\n添加完服务器后选择加号(Add new key)，添加一个key\n\n![](/images/super_easy_shadowsocks_tutorial/16.png)\n\n名字可以随便起，例如我是在家里用的，叫home，接着点击右方的分享按钮\n\n![](/images/super_easy_shadowsocks_tutorial/17.png)\n\n最后找到copy access key，复制保存蓝色选择部分\n\n![](/images/super_easy_shadowsocks_tutorial/18.png)\n\n## 下载客户端\n\n虽然outline有很多平台的客户端，但是不建议使用outline作为客户端，因为没有pac功能，导致所有流量都会经过服务器，上国内网站会比较慢。客户端推荐使用shadowsocks官方客户端。\n\n下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：\n\nWindows：https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip\n\nMAC:https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip\n\nAndroid:https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk\n\nLinux:https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\n\nIOS: \n\n由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号\n\n建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。\n\n**建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷**\n\n步骤：\n\n1.获取一个国区以外的账号\n\n注册国外appid教程：https://www.zhihu.com/question/26458172\n\n（相关注册外区账号教程很多，可以自行搜索）\n\n**由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。**\n\n2.在APPStore中切换为国区以外账号\n\n3.在AppStore搜索**Potatso Lite**安装\n\n注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite\n- [Potatso Lite](https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8)\n\n下面以windows为例演示：\n\n安装完成后打开应用  \n\n确保你已经复制了上文蓝色部分内容，然后右击小飞机，选择服务器-从剪贴板导入URL\n\n![](/images/super_easy_shadowsocks_tutorial/19.png)\n\n接着点击确定\n\n![](/images/super_easy_shadowsocks_tutorial/20.png)\n\n最后确保打开了PAC模式\n\n![](/images/super_easy_shadowsocks_tutorial/21.png)\n\n- 这里简要说一下PAC模式和全局模式问题：\n\nPAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP\n\n全局就是全部走服务器IP\n\n这里建议选择PAC模式，PAC的地址都是保存在[gfwlist](https://github.com/gfwlist/gfwlist)\n\n希望大家遇到PAC无法访问的网站多上去提issues。\n\n### 神圣时刻\n\n接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了\n\n![](/images/super_easy_shadowsocks_tutorial/22.png)\n\n# 讨论\n## Discord\n**我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论**\n[![alt text](/images/discord.svg  \"discordapp\")](https://discord.gg/wHFxCVk)\n\n# 建议\n\n如果大家对这篇文章有任何疑问都可以提[issues](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues)，如果你有其他更简单或者其他方法翻墙也可以pull requests。\n\n# 关于\n\n我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧\n\n📮我的邮箱：zhaoweihao.dev@gmail.com\n\n\n\n# 赞赏\n\n作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！","source":"_posts/给小白的超简单shadowsocks翻墙教程(outline).md","raw":"---\ntitle: '给小白的超简单shadowsocks翻墙教程(outline)'\ndate: 2019-05-22 11:30:32\ntags: [shadowsocks,outline,翻墙]\ncategories: 翻墙\n---\n原文地址：https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md  \n\n# 给小白的超简单shadowsocks翻墙教程\n\n# 前言\n\n  由于秋水逸冰大佬的退出，所以旧教程使用的一键安装shadowsocks脚本可能在未来的某一天也不管用了。出于这个原因，我又写了这篇文章用来给大家作为备用教程，这篇文章使用的是[Google Jigsaw](https://jigsaw.google.com/)团队制作的同样也是shadowsocks的一键脚本，由于是Google制作，所以迫于某些压力退出的可能性不大，个人认为可以作为长期的备用教程。\n\n# 开始\n\n## 购买VPS服务器\n\n俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？\n\n### 1、注册并登录\n\nVultr推荐链接：https://www.vultr.com/?ref=7370522\n\n这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；**但是我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以查看这边[文章](https://www.flyzy2005.com/vps/digitalocean-github-student-promo/)。**注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。\n\n![](/images/1.png)\n\n### 2、部署服务器\n\n第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器\n\n![](/images/2.png)\n\n第二步：在打开的页面选择洛杉矶Los Angeles服务器（由于日本服务器滥用导致很多IP被封了，建议电信用户可以选择洛杉矶或者伦敦），如果喜欢其他服务器也可以选择，后续操作是一样一样的\n\n![](/images/super_easy_shadowsocks_tutorial/1.png)\n\n第三步：接下来要注意了，系统最好选择Ubuntu，点击Ubuntu可以下拉选择18.04 x64（建议和我选择一样，避免问题出现）\n\n![](/images/super_easy_shadowsocks_tutorial/2.png)\n\n第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。\n\n![](/images/5.png)\n\n第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署\n\n![](/images/6.png)\n\n第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。\n\n![](/images/7.png)\n\n第七步：复制IP地址和密码，后面有用\n\n![](/images/super_easy_shadowsocks_tutorial/5.png)\n\n第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址(对应上图的IP Address)，例如我服务器IP是78.141.197.87，则ping 78.141.197.87，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。\n\n![](/images/10.png)\n\n好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。\n\n## 在服务器安装ss\n\n因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。\n\n- **如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入**\n\n`ssh root@你的服务器IP地址`\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n\n\n- **如果你是用windows10,可以打开系统自带的powershell工具:**\n\n\n\n\n\n![](/images/powershell_windows_menu.png)\n\n**输入**\n\n`ssh root@你的服务器IP地址`\n\n![](/images/powershell_run.png)\n\n**连接就可以（注意密码粘贴需要使用鼠标右键），然后可以跳过安装并运行xshell这个步骤**\n\n### 安装并运行xshell\n\n**提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商**\n\nwindows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建\n\n![](/images/w-1.png)\n\n接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好\n\n![](/images/w-2.png)\n\n接下来在弹出的窗口填root（默认服务器用户名）\n\n![](/images/w-3.png)\n\n这里就要填入你在上篇复制的服务器密码了\n\n![](/images/w-4.png)\n\n### 安装ss\n\n上面登录成功后如图所示\n\n![](/images/w-5.png)\n\n下面就是整个教程最重要的部分了，感谢Google团队制作的outline（制作的初衷是为了让记者更安全发布新闻的，由于同样使用shadowsocks，所以可以用于翻墙）。\n\n``` bash\nsudo bash -c \"$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)\"\n```\n\n复制粘贴上面代码到xshell，在xshell要右键粘贴，然后敲回车键，然后就会有一串不知名代码蹦出，停在这里了，这里的意思是问你是否需要安装Docker，输入y回车就行。\n\n![](/images/super_easy_shadowsocks_tutorial/13.png)\n\n这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！复制绿色的那段代码保存起来，后面会用到！\n\n![](/images/super_easy_shadowsocks_tutorial/14.png)\n\n## 下载服务端管理器\n\nwindows版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe\n\nmac版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg\n\nLinux版：https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage\n\n这里以windows为例，下载后安装完成后选择第四个 set up outline anywhere\n\n![](/images/super_easy_shadowsocks_tutorial/10.png)\n\n将上面保存的绿色代码粘贴到第二个输入框内，然后选择done\n\n![](/images/super_easy_shadowsocks_tutorial/15.png)\n\n添加完服务器后选择加号(Add new key)，添加一个key\n\n![](/images/super_easy_shadowsocks_tutorial/16.png)\n\n名字可以随便起，例如我是在家里用的，叫home，接着点击右方的分享按钮\n\n![](/images/super_easy_shadowsocks_tutorial/17.png)\n\n最后找到copy access key，复制保存蓝色选择部分\n\n![](/images/super_easy_shadowsocks_tutorial/18.png)\n\n## 下载客户端\n\n虽然outline有很多平台的客户端，但是不建议使用outline作为客户端，因为没有pac功能，导致所有流量都会经过服务器，上国内网站会比较慢。客户端推荐使用shadowsocks官方客户端。\n\n下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：\n\nWindows：https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip\n\nMAC:https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip\n\nAndroid:https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk\n\nLinux:https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\n\nIOS: \n\n由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号\n\n建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。\n\n**建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷**\n\n步骤：\n\n1.获取一个国区以外的账号\n\n注册国外appid教程：https://www.zhihu.com/question/26458172\n\n（相关注册外区账号教程很多，可以自行搜索）\n\n**由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。**\n\n2.在APPStore中切换为国区以外账号\n\n3.在AppStore搜索**Potatso Lite**安装\n\n注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite\n- [Potatso Lite](https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8)\n\n下面以windows为例演示：\n\n安装完成后打开应用  \n\n确保你已经复制了上文蓝色部分内容，然后右击小飞机，选择服务器-从剪贴板导入URL\n\n![](/images/super_easy_shadowsocks_tutorial/19.png)\n\n接着点击确定\n\n![](/images/super_easy_shadowsocks_tutorial/20.png)\n\n最后确保打开了PAC模式\n\n![](/images/super_easy_shadowsocks_tutorial/21.png)\n\n- 这里简要说一下PAC模式和全局模式问题：\n\nPAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP\n\n全局就是全部走服务器IP\n\n这里建议选择PAC模式，PAC的地址都是保存在[gfwlist](https://github.com/gfwlist/gfwlist)\n\n希望大家遇到PAC无法访问的网站多上去提issues。\n\n### 神圣时刻\n\n接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了\n\n![](/images/super_easy_shadowsocks_tutorial/22.png)\n\n# 讨论\n## Discord\n**我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论**\n[![alt text](/images/discord.svg  \"discordapp\")](https://discord.gg/wHFxCVk)\n\n# 建议\n\n如果大家对这篇文章有任何疑问都可以提[issues](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues)，如果你有其他更简单或者其他方法翻墙也可以pull requests。\n\n# 关于\n\n我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧\n\n📮我的邮箱：zhaoweihao.dev@gmail.com\n\n\n\n# 赞赏\n\n作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！","slug":"给小白的超简单shadowsocks翻墙教程(outline)","published":1,"updated":"2019-07-21T09:56:12.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc64001al0on65wfha3h","content":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md</a>  </p>\n<h1 id=\"给小白的超简单shadowsocks翻墙教程\"><a href=\"#给小白的超简单shadowsocks翻墙教程\" class=\"headerlink\" title=\"给小白的超简单shadowsocks翻墙教程\"></a>给小白的超简单shadowsocks翻墙教程</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>  由于秋水逸冰大佬的退出，所以旧教程使用的一键安装shadowsocks脚本可能在未来的某一天也不管用了。出于这个原因，我又写了这篇文章用来给大家作为备用教程，这篇文章使用的是<a href=\"https://jigsaw.google.com/\" target=\"_blank\" rel=\"noopener\">Google Jigsaw</a>团队制作的同样也是shadowsocks的一键脚本，由于是Google制作，所以迫于某些压力退出的可能性不大，个人认为可以作为长期的备用教程。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"购买VPS服务器\"><a href=\"#购买VPS服务器\" class=\"headerlink\" title=\"购买VPS服务器\"></a>购买VPS服务器</h2><p>俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？</p>\n<h3 id=\"1、注册并登录\"><a href=\"#1、注册并登录\" class=\"headerlink\" title=\"1、注册并登录\"></a>1、注册并登录</h3><p>Vultr推荐链接：<a href=\"https://www.vultr.com/?ref=7370522\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7370522</a></p>\n<p>这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；<strong>但是我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以查看这边<a href=\"https://www.flyzy2005.com/vps/digitalocean-github-student-promo/\" target=\"_blank\" rel=\"noopener\">文章</a>。</strong>注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。</p>\n<p><img src=\"/images/1.png\" alt=\"\"></p>\n<h3 id=\"2、部署服务器\"><a href=\"#2、部署服务器\" class=\"headerlink\" title=\"2、部署服务器\"></a>2、部署服务器</h3><p>第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器</p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<p>第二步：在打开的页面选择洛杉矶Los Angeles服务器（由于日本服务器滥用导致很多IP被封了，建议电信用户可以选择洛杉矶或者伦敦），如果喜欢其他服务器也可以选择，后续操作是一样一样的</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/1.png\" alt=\"\"></p>\n<p>第三步：接下来要注意了，系统最好选择Ubuntu，点击Ubuntu可以下拉选择18.04 x64（建议和我选择一样，避免问题出现）</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/2.png\" alt=\"\"></p>\n<p>第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。</p>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<p>第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署</p>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p>第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。</p>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<p>第七步：复制IP地址和密码，后面有用</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/5.png\" alt=\"\"></p>\n<p>第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址(对应上图的IP Address)，例如我服务器IP是78.141.197.87，则ping 78.141.197.87，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。</p>\n<p><img src=\"/images/10.png\" alt=\"\"></p>\n<p>好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。</p>\n<h2 id=\"在服务器安装ss\"><a href=\"#在服务器安装ss\" class=\"headerlink\" title=\"在服务器安装ss\"></a>在服务器安装ss</h2><p>因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。</p>\n<ul>\n<li><strong>如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入</strong></li>\n</ul>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<ul>\n<li><strong>如果你是用windows10,可以打开系统自带的powershell工具:</strong></li>\n</ul>\n<p><img src=\"/images/powershell_windows_menu.png\" alt=\"\"></p>\n<p><strong>输入</strong></p>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><img src=\"/images/powershell_run.png\" alt=\"\"></p>\n<p><strong>连接就可以（注意密码粘贴需要使用鼠标右键），然后可以跳过安装并运行xshell这个步骤</strong></p>\n<h3 id=\"安装并运行xshell\"><a href=\"#安装并运行xshell\" class=\"headerlink\" title=\"安装并运行xshell\"></a>安装并运行xshell</h3><p><strong>提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商</strong></p>\n<p>windows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建</p>\n<p><img src=\"/images/w-1.png\" alt=\"\"></p>\n<p>接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好</p>\n<p><img src=\"/images/w-2.png\" alt=\"\"></p>\n<p>接下来在弹出的窗口填root（默认服务器用户名）</p>\n<p><img src=\"/images/w-3.png\" alt=\"\"></p>\n<p>这里就要填入你在上篇复制的服务器密码了</p>\n<p><img src=\"/images/w-4.png\" alt=\"\"></p>\n<h3 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h3><p>上面登录成功后如图所示</p>\n<p><img src=\"/images/w-5.png\" alt=\"\"></p>\n<p>下面就是整个教程最重要的部分了，感谢Google团队制作的outline（制作的初衷是为了让记者更安全发布新闻的，由于同样使用shadowsocks，所以可以用于翻墙）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bash -c <span class=\"string\">\"<span class=\"variable\">$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>复制粘贴上面代码到xshell，在xshell要右键粘贴，然后敲回车键，然后就会有一串不知名代码蹦出，停在这里了，这里的意思是问你是否需要安装Docker，输入y回车就行。</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/13.png\" alt=\"\"></p>\n<p>这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！复制绿色的那段代码保存起来，后面会用到！</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/14.png\" alt=\"\"></p>\n<h2 id=\"下载服务端管理器\"><a href=\"#下载服务端管理器\" class=\"headerlink\" title=\"下载服务端管理器\"></a>下载服务端管理器</h2><p>windows版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe</a></p>\n<p>mac版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg</a></p>\n<p>Linux版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage</a></p>\n<p>这里以windows为例，下载后安装完成后选择第四个 set up outline anywhere</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/10.png\" alt=\"\"></p>\n<p>将上面保存的绿色代码粘贴到第二个输入框内，然后选择done</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/15.png\" alt=\"\"></p>\n<p>添加完服务器后选择加号(Add new key)，添加一个key</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/16.png\" alt=\"\"></p>\n<p>名字可以随便起，例如我是在家里用的，叫home，接着点击右方的分享按钮</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/17.png\" alt=\"\"></p>\n<p>最后找到copy access key，复制保存蓝色选择部分</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/18.png\" alt=\"\"></p>\n<h2 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h2><p>虽然outline有很多平台的客户端，但是不建议使用outline作为客户端，因为没有pac功能，导致所有流量都会经过服务器，上国内网站会比较慢。客户端推荐使用shadowsocks官方客户端。</p>\n<p>下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：</p>\n<p>Windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip</a></p>\n<p>MAC:<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip</a></p>\n<p>Android:<a href=\"https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk</a></p>\n<p>Linux:<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a></p>\n<p>IOS: </p>\n<p>由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号</p>\n<p>建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。</p>\n<p><strong>建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷</strong></p>\n<p>步骤：</p>\n<p>1.获取一个国区以外的账号</p>\n<p>注册国外appid教程：<a href=\"https://www.zhihu.com/question/26458172\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26458172</a></p>\n<p>（相关注册外区账号教程很多，可以自行搜索）</p>\n<p><strong>由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。</strong></p>\n<p>2.在APPStore中切换为国区以外账号</p>\n<p>3.在AppStore搜索<strong>Potatso Lite</strong>安装</p>\n<p>注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8\" target=\"_blank\" rel=\"noopener\">Potatso Lite</a></li>\n</ul>\n<p>下面以windows为例演示：</p>\n<p>安装完成后打开应用  </p>\n<p>确保你已经复制了上文蓝色部分内容，然后右击小飞机，选择服务器-从剪贴板导入URL</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/19.png\" alt=\"\"></p>\n<p>接着点击确定</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/20.png\" alt=\"\"></p>\n<p>最后确保打开了PAC模式</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/21.png\" alt=\"\"></p>\n<ul>\n<li>这里简要说一下PAC模式和全局模式问题：</li>\n</ul>\n<p>PAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP</p>\n<p>全局就是全部走服务器IP</p>\n<p>这里建议选择PAC模式，PAC的地址都是保存在<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a></p>\n<p>希望大家遇到PAC无法访问的网站多上去提issues。</p>\n<h3 id=\"神圣时刻\"><a href=\"#神圣时刻\" class=\"headerlink\" title=\"神圣时刻\"></a>神圣时刻</h3><p>接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/22.png\" alt=\"\"></p>\n<h1 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h1><h2 id=\"Discord\"><a href=\"#Discord\" class=\"headerlink\" title=\"Discord\"></a>Discord</h2><p><strong>我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论</strong><br><a href=\"https://discord.gg/wHFxCVk\" target=\"_blank\" rel=\"noopener\"><img src=\"/images/discord.svg\" alt=\"alt text\" title=\"discordapp\"></a></p>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>如果大家对这篇文章有任何疑问都可以提<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues\" target=\"_blank\" rel=\"noopener\">issues</a>，如果你有其他更简单或者其他方法翻墙也可以pull requests。</p>\n<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧</p>\n<p>📮我的邮箱：<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p>作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Shadowsocks-Tutorial/blob/master/super_easy_shadowsocks_tutorial.md</a>  </p>\n<h1 id=\"给小白的超简单shadowsocks翻墙教程\"><a href=\"#给小白的超简单shadowsocks翻墙教程\" class=\"headerlink\" title=\"给小白的超简单shadowsocks翻墙教程\"></a>给小白的超简单shadowsocks翻墙教程</h1><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>  由于秋水逸冰大佬的退出，所以旧教程使用的一键安装shadowsocks脚本可能在未来的某一天也不管用了。出于这个原因，我又写了这篇文章用来给大家作为备用教程，这篇文章使用的是<a href=\"https://jigsaw.google.com/\" target=\"_blank\" rel=\"noopener\">Google Jigsaw</a>团队制作的同样也是shadowsocks的一键脚本，由于是Google制作，所以迫于某些压力退出的可能性不大，个人认为可以作为长期的备用教程。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"购买VPS服务器\"><a href=\"#购买VPS服务器\" class=\"headerlink\" title=\"购买VPS服务器\"></a>购买VPS服务器</h2><p>俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？</p>\n<h3 id=\"1、注册并登录\"><a href=\"#1、注册并登录\" class=\"headerlink\" title=\"1、注册并登录\"></a>1、注册并登录</h3><p>Vultr推荐链接：<a href=\"https://www.vultr.com/?ref=7370522\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7370522</a></p>\n<p>这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；<strong>但是我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以查看这边<a href=\"https://www.flyzy2005.com/vps/digitalocean-github-student-promo/\" target=\"_blank\" rel=\"noopener\">文章</a>。</strong>注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。</p>\n<p><img src=\"/images/1.png\" alt=\"\"></p>\n<h3 id=\"2、部署服务器\"><a href=\"#2、部署服务器\" class=\"headerlink\" title=\"2、部署服务器\"></a>2、部署服务器</h3><p>第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器</p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<p>第二步：在打开的页面选择洛杉矶Los Angeles服务器（由于日本服务器滥用导致很多IP被封了，建议电信用户可以选择洛杉矶或者伦敦），如果喜欢其他服务器也可以选择，后续操作是一样一样的</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/1.png\" alt=\"\"></p>\n<p>第三步：接下来要注意了，系统最好选择Ubuntu，点击Ubuntu可以下拉选择18.04 x64（建议和我选择一样，避免问题出现）</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/2.png\" alt=\"\"></p>\n<p>第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。</p>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<p>第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署</p>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p>第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。</p>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<p>第七步：复制IP地址和密码，后面有用</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/5.png\" alt=\"\"></p>\n<p>第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址(对应上图的IP Address)，例如我服务器IP是78.141.197.87，则ping 78.141.197.87，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。</p>\n<p><img src=\"/images/10.png\" alt=\"\"></p>\n<p>好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。</p>\n<h2 id=\"在服务器安装ss\"><a href=\"#在服务器安装ss\" class=\"headerlink\" title=\"在服务器安装ss\"></a>在服务器安装ss</h2><p>因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。</p>\n<ul>\n<li><strong>如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入</strong></li>\n</ul>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<ul>\n<li><strong>如果你是用windows10,可以打开系统自带的powershell工具:</strong></li>\n</ul>\n<p><img src=\"/images/powershell_windows_menu.png\" alt=\"\"></p>\n<p><strong>输入</strong></p>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><img src=\"/images/powershell_run.png\" alt=\"\"></p>\n<p><strong>连接就可以（注意密码粘贴需要使用鼠标右键），然后可以跳过安装并运行xshell这个步骤</strong></p>\n<h3 id=\"安装并运行xshell\"><a href=\"#安装并运行xshell\" class=\"headerlink\" title=\"安装并运行xshell\"></a>安装并运行xshell</h3><p><strong>提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商</strong></p>\n<p>windows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建</p>\n<p><img src=\"/images/w-1.png\" alt=\"\"></p>\n<p>接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好</p>\n<p><img src=\"/images/w-2.png\" alt=\"\"></p>\n<p>接下来在弹出的窗口填root（默认服务器用户名）</p>\n<p><img src=\"/images/w-3.png\" alt=\"\"></p>\n<p>这里就要填入你在上篇复制的服务器密码了</p>\n<p><img src=\"/images/w-4.png\" alt=\"\"></p>\n<h3 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h3><p>上面登录成功后如图所示</p>\n<p><img src=\"/images/w-5.png\" alt=\"\"></p>\n<p>下面就是整个教程最重要的部分了，感谢Google团队制作的outline（制作的初衷是为了让记者更安全发布新闻的，由于同样使用shadowsocks，所以可以用于翻墙）。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo bash -c <span class=\"string\">\"<span class=\"variable\">$(wget -qO- https://raw.githubusercontent.com/Jigsaw-Code/outline-server/master/src/server_manager/install_scripts/install_server.sh)</span>\"</span></span><br></pre></td></tr></table></figure>\n\n<p>复制粘贴上面代码到xshell，在xshell要右键粘贴，然后敲回车键，然后就会有一串不知名代码蹦出，停在这里了，这里的意思是问你是否需要安装Docker，输入y回车就行。</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/13.png\" alt=\"\"></p>\n<p>这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！复制绿色的那段代码保存起来，后面会用到！</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/14.png\" alt=\"\"></p>\n<h2 id=\"下载服务端管理器\"><a href=\"#下载服务端管理器\" class=\"headerlink\" title=\"下载服务端管理器\"></a>下载服务端管理器</h2><p>windows版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.exe</a></p>\n<p>mac版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.dmg</a></p>\n<p>Linux版：<a href=\"https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/manager/stable/Outline-Manager.AppImage</a></p>\n<p>这里以windows为例，下载后安装完成后选择第四个 set up outline anywhere</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/10.png\" alt=\"\"></p>\n<p>将上面保存的绿色代码粘贴到第二个输入框内，然后选择done</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/15.png\" alt=\"\"></p>\n<p>添加完服务器后选择加号(Add new key)，添加一个key</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/16.png\" alt=\"\"></p>\n<p>名字可以随便起，例如我是在家里用的，叫home，接着点击右方的分享按钮</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/17.png\" alt=\"\"></p>\n<p>最后找到copy access key，复制保存蓝色选择部分</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/18.png\" alt=\"\"></p>\n<h2 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h2><p>虽然outline有很多平台的客户端，但是不建议使用outline作为客户端，因为没有pac功能，导致所有流量都会经过服务器，上国内网站会比较慢。客户端推荐使用shadowsocks官方客户端。</p>\n<p>下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：</p>\n<p>Windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-windows/releases/download/4.1.6/Shadowsocks-4.1.6.zip</a></p>\n<p>MAC:<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/ShadowsocksX-NG/releases/download/v1.8.2/ShadowsocksX-NG.app.1.8.2.zip</a></p>\n<p>Android:<a href=\"https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-android/releases/download/v4.7.4/shadowsocks--universal-4.7.4.apk</a></p>\n<p>Linux:<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a></p>\n<p>IOS: </p>\n<p>由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号</p>\n<p>建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。</p>\n<p><strong>建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷</strong></p>\n<p>步骤：</p>\n<p>1.获取一个国区以外的账号</p>\n<p>注册国外appid教程：<a href=\"https://www.zhihu.com/question/26458172\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26458172</a></p>\n<p>（相关注册外区账号教程很多，可以自行搜索）</p>\n<p><strong>由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。</strong></p>\n<p>2.在APPStore中切换为国区以外账号</p>\n<p>3.在AppStore搜索<strong>Potatso Lite</strong>安装</p>\n<p>注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8\" target=\"_blank\" rel=\"noopener\">Potatso Lite</a></li>\n</ul>\n<p>下面以windows为例演示：</p>\n<p>安装完成后打开应用  </p>\n<p>确保你已经复制了上文蓝色部分内容，然后右击小飞机，选择服务器-从剪贴板导入URL</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/19.png\" alt=\"\"></p>\n<p>接着点击确定</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/20.png\" alt=\"\"></p>\n<p>最后确保打开了PAC模式</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/21.png\" alt=\"\"></p>\n<ul>\n<li>这里简要说一下PAC模式和全局模式问题：</li>\n</ul>\n<p>PAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP</p>\n<p>全局就是全部走服务器IP</p>\n<p>这里建议选择PAC模式，PAC的地址都是保存在<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a></p>\n<p>希望大家遇到PAC无法访问的网站多上去提issues。</p>\n<h3 id=\"神圣时刻\"><a href=\"#神圣时刻\" class=\"headerlink\" title=\"神圣时刻\"></a>神圣时刻</h3><p>接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了</p>\n<p><img src=\"/images/super_easy_shadowsocks_tutorial/22.png\" alt=\"\"></p>\n<h1 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h1><h2 id=\"Discord\"><a href=\"#Discord\" class=\"headerlink\" title=\"Discord\"></a>Discord</h2><p><strong>我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论</strong><br><a href=\"https://discord.gg/wHFxCVk\" target=\"_blank\" rel=\"noopener\"><img src=\"/images/discord.svg\" alt=\"alt text\" title=\"discordapp\"></a></p>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>如果大家对这篇文章有任何疑问都可以提<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues\" target=\"_blank\" rel=\"noopener\">issues</a>，如果你有其他更简单或者其他方法翻墙也可以pull requests。</p>\n<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧</p>\n<p>📮我的邮箱：<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p>作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！</p>\n"},{"title":"给小白的Shadowsocks翻墙教程(一键脚本)","date":"2019-05-21T03:30:32.000Z","_content":"原文地址：https://github.com/zhaoweih/Shadowsocks-Tutorial  \n\n# 前言\n\n为什么要做这个库？因为有句话说“不会翻墙的程序员不是好程序员”，但是某些原因，翻墙可是越来越难了，我之前是用某灯，但是自从上个月开始某灯也不稳定了；我还以为可以和某灯相宿相飞一段时间的，后来就投靠了Shadowsocks了，为什么会选择Shadowsocks呢，因为可以自己搭建服务器，不再受牵制，而且由于是个人服务器被封IP的几率也不会很大；当然你也可以和自己信任的人共享使用，但是Shadowsocks的教程网络上真是参次不齐，很容易误导那些只想翻墙而不是要了解它原理的人，所以我就蹦出个想法：做个几乎是一键式的傻瓜Shadowsocks（以下简称ss）搭建教程给小白们，让大家都能共享自由的互联网。\n\n# 开始\n\n## 购买VPS服务器\n\n俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？\n\n### 1、注册并登录\n\nVultr推荐链接：https://www.vultr.com/?ref=7370522\n\n这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；**但是后面我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以关注后面。**注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。\n\n![](/images/1.png)\n\n### 2、部署服务器\n\n第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器\n\n![](/images/2.png)\n\n第二步：在打开的页面选择Tokyo日本服务器，如果喜欢其他服务器也可以选择，后续操作是一样一样的\n\n![](/images/3.png)\n\n第三步：接下来要注意了，系统最好选择CentOS 6，点击CentOS可以下拉选择6\n\n![](/images/4.png)\n\n第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。\n\n![](/images/5.png)\n\n第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署\n\n![](/images/6.png)\n\n第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。\n\n![](/images/7.png)\n\n第七步：复制IP地址和密码，后面有用\n\n![](/images/8.png)\n\n第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址，例如我服务器IP是8.8.8.8，则ping 8.8.8.8，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。\n\n![](/images/10.png)\n\n好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。\n\n## 在服务器安装ss\n\n因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。\n\n- **如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入**\n\n`ssh root@你的服务器IP地址`\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n\n\n- **如果你是用windows10,可以打开系统自带的powershell工具:**\n\n\n\n\n\n![](/images/powershell_windows_menu.png)\n\n**输入**\n\n`ssh root@你的服务器IP地址`\n\n![](/images/powershell_run.png)\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n### 安装并运行xshell\n\n**提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商**\n\nwindows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建\n\n![](/images/w-1.png)\n\n接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好\n\n![](/images/w-2.png)\n\n接下来在弹出的窗口填root（默认服务器用户名）\n\n![](/images/w-3.png)\n\n这里就要填入你在上篇复制的服务器密码了\n\n![](/images/w-4.png)\n\n### 安装ss\n\n上面登录成功后如图所示\n\n![](/images/w-5.png)\n\n下面就是精髓的部分了，感谢[@teddysun](https://github.com/teddysun)大佬制作的一键安装脚本，具体更多细节可查看博客：https://teddysun.com/486.html  (由于大佬的[退出](https://teddysun.com/548.html),所以下面的命令目前还可以使用，但是版本已经不再更新)\n\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n复制粘贴上面代码到xshell，在xshell要右键粘贴，然后就会有一大串不知名代码蹦出，停在这里了\n\n![](/images/w-6.png)\n\n这时候按一下Enter回车键它又可以继续了～\n\n接着又蹦出些东西，是让我们选择ss的服务器端，这里我选择go版本的，输入3按回车\n\n![](/images/w-7.png)\n\n如同往常，接下来是要填入ss客户端登录的密码，这里我随意填：abc123456\n\n![](/images/w-8.png)\n\n接下来是输入端口号（1-65535任意数字），这里我填默认的\n\n![](/images/w-9.png)\n\n接下来是选择加密方式，默认就好，按回车\n\n![](/images/w-10.png)\n\n接着又是反手一个回车就好\n\n![](/images/w-11.png)\n\n这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！\n\n这个最好截图一下，以防忘记了。\n\n我就当大家英文水平还好吧，下面说的就是你的服务器IP，服务器端端口，密码，加密方式。\n\n![](/images/w-12.png)\n\n## 下载客户端\n\n如果你跟着我到了这一步就代表安装好了服务器端，但是我们的电脑手机作为客户端也是需要安装客户端软件的。下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：\n\nWindows：https://github.com/shadowsocks/shadowsocks-windows/releases\n\nMAC:https://github.com/shadowsocks/ShadowsocksX-NG/releases\n\nAndroid:https://github.com/shadowsocks/shadowsocks-android/releases\n\nLinux:https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\n\nIOS: \n\n由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号\n\n建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。\n\n**建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷**\n\n步骤：\n\n1.获取一个国区以外的账号\n\n注册国外appid教程：https://www.zhihu.com/question/26458172\n\n（相关注册外区账号教程很多，可以自行搜索）\n\n**由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。**\n\n2.在APPStore中切换为国区以外账号\n\n3.在AppStore搜索**Potatso Lite**安装\n\n注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite\n- [Potatso Lite](https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8)\n- [Wingy](https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911)\n- [Big Boss](http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks)\n\n\n\n下面以windows为例演示：\n\n打开上方网址下载客户端：\n\n![](/images/w-13.png)\n\n接着安装打开后配置服务器：\n\n还记得上面建议保存的图片吗？这里就用到了，服务器IP，端口，密码，加密方式，然后点击确定\n\n![](/images/w-14.png)\n\n\n\n接着启用系统代理：\n\n![](/images/w-15.png)\n\n\n\n- 这里简要说一下PAC模式和全局模式问题：\n\nPAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP\n\n全局就是全部走服务器IP\n\n这里建议选择PAC模式，PAC的地址都是保存在[gfwlist](https://github.com/gfwlist/gfwlist)\n\n希望大家遇到PAC无法访问的网站多上去提issues。\n\n### 神圣时刻\n\n接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了\n\n![](/images/w-16.png)\n\n# 最后\n\n最后，这里我们的任务完成了，但是如果你想优化一下服务器连接，可以安装BBR加速。具体可以看这篇文章：[文章](https://teddysun.com/489.html)\n\n> 使用root用户登录，运行以下命令：\n>\n> ```bsh\n> wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n> ```\n>\n> 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。\n\n# 更新\n## 190519更新  \n添加备用教程  \n[给小白的超简单shadowsocks翻墙教程](./super_easy_shadowsocks_tutorial.md)\n\n## 190518更新  \n[增加AWS安装EPEL的说明 #8](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues/8)\n\n## 190507更新  \n如果需要设置多端口，可以参考以下文章  \n[如何启用 Shadowsocks 的多端口](https://teddysun.com/532.html)\n\n## 190505更新\n如果只是需要临时使用，可以尝试免费的节点  \nhttps://free1.gyteng.com/\n\n## 190203更新\n如果想要测试服务器的下载速度和运行速度，可以查看这篇文章:[文章](https://teddysun.com/444.html)\n>仅需要一行命令\n>```bsh\n>wget -qO- bench.sh | bash\n>```\n\n我的一些服务器测试速度，希望对大家选择服务器时有用:\n- digitalocean新加坡 5美金一个月\n![](/images/do_singapore.png)\n- vpsserver日本东京 4.9美金一个月\n![](/images/vpsserver_jp.png)\n- hostus香港 2.95美金一个月\n![](/images/hostus_hk.png)\n- aws亚马逊韩国 免费一年EC2\n![](/images/aws_kr.png)\n\n## 180624更新\n如果要PAC自定义规则，即譬如你要上的网站不在PAC目录里，可以自己添加\n譬如我要加github进入PAC自定义协议里\n格式如下：\n\n```\n||github.com\n```\n\n添加进去后,**记得重启一下Shadowsocks让它生效**\n\napi.github.com \n\ngithub.com/zhaoweih\n\n等等包含github.com的URL都会走服务器IP\n\n# Q&A\n汇总一些邮件反馈的问题\n\n**[已解决]1.问题：-bash: wget: command not found\n环境：服务器：linode，新加坡服务器，cent os7**  \n\n可以参照这篇文章安装wget后尝试：https://www.wn789.com/5624.html\n\n\n\n**[已解决]2.问题:当访问Google学术时，会提示 : \n\"We are sorry, but your computer or network may be sending automated queries. To protect our users, we can't process your request right now \" **  \n\n由于谷歌有自己的一套反代理爬虫的机制，所以很多 VPS 的 ip 会被谷歌检测到是代理，遇到这种情况可以用更换服务器即可，如果没有其他服务器可用，可以用[谷歌学术镜像](https://lai.yuweining.cn/archives/2112/)。\n\n**[已解决]3.aws ec2报错Install EPEL repository failed的解决办法 **  \n\n参考文章：http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/\n\n# 讨论\n## Telegram\n**应小伙伴要求，添加telegram(点击下面链接加入channel)**\n\nhttps://t.me/joinchat/AAAAAExNMb2bCOpY276nMA\n\n## Discord\n**我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论**\n[![alt text](/images/discord.svg  \"discordapp\")](https://discord.gg/wHFxCVk)\n\n# 更多\n**如果想详细了解有关shadowsocks翻墙知识的小伙伴可以查看下面文章**\n- [浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别](https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b)\n\n**由于现在很多大牌服务器IP被墙，建议不喜欢折腾的小伙伴可以尝试找别人一起合租VPS（btw：合租需要自己去掂量对方真实性，这里只是推荐一些VPS合租网站，对真实性无法保证)**\n\n- [VPS合租网](https://www.vpshz.com/)\n\n# 建议\n\n如果大家对这篇文章有任何疑问都可以提[issues](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues)，如果你有其他更简单或者其他方法翻墙也可以pull requests。\n\n**关于大学生领取Github包50美金DO优惠劵教程过阵子再更新。有感兴趣的同学可以自行搜索查看先。**\n\n# 关于\n\n我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧\n\n📮我的邮箱：zhaoweihao.dev@gmail.com\n\n\n\n# 赞赏\n\n作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！\n","source":"_posts/给小白的Shadowsocks翻墙教程(一键脚本).md","raw":"---\ntitle: '给小白的Shadowsocks翻墙教程(一键脚本)'\ndate: 2019-05-21 11:30:32\ntags: [shadowsocks,翻墙]\ncategories: 翻墙\n---\n原文地址：https://github.com/zhaoweih/Shadowsocks-Tutorial  \n\n# 前言\n\n为什么要做这个库？因为有句话说“不会翻墙的程序员不是好程序员”，但是某些原因，翻墙可是越来越难了，我之前是用某灯，但是自从上个月开始某灯也不稳定了；我还以为可以和某灯相宿相飞一段时间的，后来就投靠了Shadowsocks了，为什么会选择Shadowsocks呢，因为可以自己搭建服务器，不再受牵制，而且由于是个人服务器被封IP的几率也不会很大；当然你也可以和自己信任的人共享使用，但是Shadowsocks的教程网络上真是参次不齐，很容易误导那些只想翻墙而不是要了解它原理的人，所以我就蹦出个想法：做个几乎是一键式的傻瓜Shadowsocks（以下简称ss）搭建教程给小白们，让大家都能共享自由的互联网。\n\n# 开始\n\n## 购买VPS服务器\n\n俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？\n\n### 1、注册并登录\n\nVultr推荐链接：https://www.vultr.com/?ref=7370522\n\n这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；**但是后面我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以关注后面。**注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。\n\n![](/images/1.png)\n\n### 2、部署服务器\n\n第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器\n\n![](/images/2.png)\n\n第二步：在打开的页面选择Tokyo日本服务器，如果喜欢其他服务器也可以选择，后续操作是一样一样的\n\n![](/images/3.png)\n\n第三步：接下来要注意了，系统最好选择CentOS 6，点击CentOS可以下拉选择6\n\n![](/images/4.png)\n\n第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。\n\n![](/images/5.png)\n\n第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署\n\n![](/images/6.png)\n\n第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。\n\n![](/images/7.png)\n\n第七步：复制IP地址和密码，后面有用\n\n![](/images/8.png)\n\n第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址，例如我服务器IP是8.8.8.8，则ping 8.8.8.8，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。\n\n![](/images/10.png)\n\n好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。\n\n## 在服务器安装ss\n\n因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。\n\n- **如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入**\n\n`ssh root@你的服务器IP地址`\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n\n\n- **如果你是用windows10,可以打开系统自带的powershell工具:**\n\n\n\n\n\n![](/images/powershell_windows_menu.png)\n\n**输入**\n\n`ssh root@你的服务器IP地址`\n\n![](/images/powershell_run.png)\n\n**连接就可以，然后可以跳过安装并运行xshell这个步骤**\n\n### 安装并运行xshell\n\n**提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商**\n\nwindows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建\n\n![](/images/w-1.png)\n\n接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好\n\n![](/images/w-2.png)\n\n接下来在弹出的窗口填root（默认服务器用户名）\n\n![](/images/w-3.png)\n\n这里就要填入你在上篇复制的服务器密码了\n\n![](/images/w-4.png)\n\n### 安装ss\n\n上面登录成功后如图所示\n\n![](/images/w-5.png)\n\n下面就是精髓的部分了，感谢[@teddysun](https://github.com/teddysun)大佬制作的一键安装脚本，具体更多细节可查看博客：https://teddysun.com/486.html  (由于大佬的[退出](https://teddysun.com/548.html),所以下面的命令目前还可以使用，但是版本已经不再更新)\n\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n\n复制粘贴上面代码到xshell，在xshell要右键粘贴，然后就会有一大串不知名代码蹦出，停在这里了\n\n![](/images/w-6.png)\n\n这时候按一下Enter回车键它又可以继续了～\n\n接着又蹦出些东西，是让我们选择ss的服务器端，这里我选择go版本的，输入3按回车\n\n![](/images/w-7.png)\n\n如同往常，接下来是要填入ss客户端登录的密码，这里我随意填：abc123456\n\n![](/images/w-8.png)\n\n接下来是输入端口号（1-65535任意数字），这里我填默认的\n\n![](/images/w-9.png)\n\n接下来是选择加密方式，默认就好，按回车\n\n![](/images/w-10.png)\n\n接着又是反手一个回车就好\n\n![](/images/w-11.png)\n\n这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！\n\n这个最好截图一下，以防忘记了。\n\n我就当大家英文水平还好吧，下面说的就是你的服务器IP，服务器端端口，密码，加密方式。\n\n![](/images/w-12.png)\n\n## 下载客户端\n\n如果你跟着我到了这一步就代表安装好了服务器端，但是我们的电脑手机作为客户端也是需要安装客户端软件的。下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：\n\nWindows：https://github.com/shadowsocks/shadowsocks-windows/releases\n\nMAC:https://github.com/shadowsocks/ShadowsocksX-NG/releases\n\nAndroid:https://github.com/shadowsocks/shadowsocks-android/releases\n\nLinux:https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\n\nIOS: \n\n由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号\n\n建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。\n\n**建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷**\n\n步骤：\n\n1.获取一个国区以外的账号\n\n注册国外appid教程：https://www.zhihu.com/question/26458172\n\n（相关注册外区账号教程很多，可以自行搜索）\n\n**由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。**\n\n2.在APPStore中切换为国区以外账号\n\n3.在AppStore搜索**Potatso Lite**安装\n\n注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite\n- [Potatso Lite](https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8)\n- [Wingy](https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911)\n- [Big Boss](http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks)\n\n\n\n下面以windows为例演示：\n\n打开上方网址下载客户端：\n\n![](/images/w-13.png)\n\n接着安装打开后配置服务器：\n\n还记得上面建议保存的图片吗？这里就用到了，服务器IP，端口，密码，加密方式，然后点击确定\n\n![](/images/w-14.png)\n\n\n\n接着启用系统代理：\n\n![](/images/w-15.png)\n\n\n\n- 这里简要说一下PAC模式和全局模式问题：\n\nPAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP\n\n全局就是全部走服务器IP\n\n这里建议选择PAC模式，PAC的地址都是保存在[gfwlist](https://github.com/gfwlist/gfwlist)\n\n希望大家遇到PAC无法访问的网站多上去提issues。\n\n### 神圣时刻\n\n接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了\n\n![](/images/w-16.png)\n\n# 最后\n\n最后，这里我们的任务完成了，但是如果你想优化一下服务器连接，可以安装BBR加速。具体可以看这篇文章：[文章](https://teddysun.com/489.html)\n\n> 使用root用户登录，运行以下命令：\n>\n> ```bsh\n> wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n> ```\n>\n> 安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。\n\n# 更新\n## 190519更新  \n添加备用教程  \n[给小白的超简单shadowsocks翻墙教程](./super_easy_shadowsocks_tutorial.md)\n\n## 190518更新  \n[增加AWS安装EPEL的说明 #8](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues/8)\n\n## 190507更新  \n如果需要设置多端口，可以参考以下文章  \n[如何启用 Shadowsocks 的多端口](https://teddysun.com/532.html)\n\n## 190505更新\n如果只是需要临时使用，可以尝试免费的节点  \nhttps://free1.gyteng.com/\n\n## 190203更新\n如果想要测试服务器的下载速度和运行速度，可以查看这篇文章:[文章](https://teddysun.com/444.html)\n>仅需要一行命令\n>```bsh\n>wget -qO- bench.sh | bash\n>```\n\n我的一些服务器测试速度，希望对大家选择服务器时有用:\n- digitalocean新加坡 5美金一个月\n![](/images/do_singapore.png)\n- vpsserver日本东京 4.9美金一个月\n![](/images/vpsserver_jp.png)\n- hostus香港 2.95美金一个月\n![](/images/hostus_hk.png)\n- aws亚马逊韩国 免费一年EC2\n![](/images/aws_kr.png)\n\n## 180624更新\n如果要PAC自定义规则，即譬如你要上的网站不在PAC目录里，可以自己添加\n譬如我要加github进入PAC自定义协议里\n格式如下：\n\n```\n||github.com\n```\n\n添加进去后,**记得重启一下Shadowsocks让它生效**\n\napi.github.com \n\ngithub.com/zhaoweih\n\n等等包含github.com的URL都会走服务器IP\n\n# Q&A\n汇总一些邮件反馈的问题\n\n**[已解决]1.问题：-bash: wget: command not found\n环境：服务器：linode，新加坡服务器，cent os7**  \n\n可以参照这篇文章安装wget后尝试：https://www.wn789.com/5624.html\n\n\n\n**[已解决]2.问题:当访问Google学术时，会提示 : \n\"We are sorry, but your computer or network may be sending automated queries. To protect our users, we can't process your request right now \" **  \n\n由于谷歌有自己的一套反代理爬虫的机制，所以很多 VPS 的 ip 会被谷歌检测到是代理，遇到这种情况可以用更换服务器即可，如果没有其他服务器可用，可以用[谷歌学术镜像](https://lai.yuweining.cn/archives/2112/)。\n\n**[已解决]3.aws ec2报错Install EPEL repository failed的解决办法 **  \n\n参考文章：http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/\n\n# 讨论\n## Telegram\n**应小伙伴要求，添加telegram(点击下面链接加入channel)**\n\nhttps://t.me/joinchat/AAAAAExNMb2bCOpY276nMA\n\n## Discord\n**我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论**\n[![alt text](/images/discord.svg  \"discordapp\")](https://discord.gg/wHFxCVk)\n\n# 更多\n**如果想详细了解有关shadowsocks翻墙知识的小伙伴可以查看下面文章**\n- [浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别](https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b)\n\n**由于现在很多大牌服务器IP被墙，建议不喜欢折腾的小伙伴可以尝试找别人一起合租VPS（btw：合租需要自己去掂量对方真实性，这里只是推荐一些VPS合租网站，对真实性无法保证)**\n\n- [VPS合租网](https://www.vpshz.com/)\n\n# 建议\n\n如果大家对这篇文章有任何疑问都可以提[issues](https://github.com/zhaoweih/Shadowsocks-Tutorial/issues)，如果你有其他更简单或者其他方法翻墙也可以pull requests。\n\n**关于大学生领取Github包50美金DO优惠劵教程过阵子再更新。有感兴趣的同学可以自行搜索查看先。**\n\n# 关于\n\n我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧\n\n📮我的邮箱：zhaoweihao.dev@gmail.com\n\n\n\n# 赞赏\n\n作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！\n","slug":"给小白的Shadowsocks翻墙教程(一键脚本)","published":1,"updated":"2019-07-21T09:56:12.039Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc65001bl0ondfw65a80","content":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Shadowsocks-Tutorial</a>  </p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要做这个库？因为有句话说“不会翻墙的程序员不是好程序员”，但是某些原因，翻墙可是越来越难了，我之前是用某灯，但是自从上个月开始某灯也不稳定了；我还以为可以和某灯相宿相飞一段时间的，后来就投靠了Shadowsocks了，为什么会选择Shadowsocks呢，因为可以自己搭建服务器，不再受牵制，而且由于是个人服务器被封IP的几率也不会很大；当然你也可以和自己信任的人共享使用，但是Shadowsocks的教程网络上真是参次不齐，很容易误导那些只想翻墙而不是要了解它原理的人，所以我就蹦出个想法：做个几乎是一键式的傻瓜Shadowsocks（以下简称ss）搭建教程给小白们，让大家都能共享自由的互联网。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"购买VPS服务器\"><a href=\"#购买VPS服务器\" class=\"headerlink\" title=\"购买VPS服务器\"></a>购买VPS服务器</h2><p>俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？</p>\n<h3 id=\"1、注册并登录\"><a href=\"#1、注册并登录\" class=\"headerlink\" title=\"1、注册并登录\"></a>1、注册并登录</h3><p>Vultr推荐链接：<a href=\"https://www.vultr.com/?ref=7370522\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7370522</a></p>\n<p>这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；<strong>但是后面我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以关注后面。</strong>注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。</p>\n<p><img src=\"/images/1.png\" alt=\"\"></p>\n<h3 id=\"2、部署服务器\"><a href=\"#2、部署服务器\" class=\"headerlink\" title=\"2、部署服务器\"></a>2、部署服务器</h3><p>第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器</p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<p>第二步：在打开的页面选择Tokyo日本服务器，如果喜欢其他服务器也可以选择，后续操作是一样一样的</p>\n<p><img src=\"/images/3.png\" alt=\"\"></p>\n<p>第三步：接下来要注意了，系统最好选择CentOS 6，点击CentOS可以下拉选择6</p>\n<p><img src=\"/images/4.png\" alt=\"\"></p>\n<p>第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。</p>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<p>第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署</p>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p>第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。</p>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<p>第七步：复制IP地址和密码，后面有用</p>\n<p><img src=\"/images/8.png\" alt=\"\"></p>\n<p>第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址，例如我服务器IP是8.8.8.8，则ping 8.8.8.8，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。</p>\n<p><img src=\"/images/10.png\" alt=\"\"></p>\n<p>好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。</p>\n<h2 id=\"在服务器安装ss\"><a href=\"#在服务器安装ss\" class=\"headerlink\" title=\"在服务器安装ss\"></a>在服务器安装ss</h2><p>因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。</p>\n<ul>\n<li><strong>如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入</strong></li>\n</ul>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<ul>\n<li><strong>如果你是用windows10,可以打开系统自带的powershell工具:</strong></li>\n</ul>\n<p><img src=\"/images/powershell_windows_menu.png\" alt=\"\"></p>\n<p><strong>输入</strong></p>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><img src=\"/images/powershell_run.png\" alt=\"\"></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<h3 id=\"安装并运行xshell\"><a href=\"#安装并运行xshell\" class=\"headerlink\" title=\"安装并运行xshell\"></a>安装并运行xshell</h3><p><strong>提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商</strong></p>\n<p>windows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建</p>\n<p><img src=\"/images/w-1.png\" alt=\"\"></p>\n<p>接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好</p>\n<p><img src=\"/images/w-2.png\" alt=\"\"></p>\n<p>接下来在弹出的窗口填root（默认服务器用户名）</p>\n<p><img src=\"/images/w-3.png\" alt=\"\"></p>\n<p>这里就要填入你在上篇复制的服务器密码了</p>\n<p><img src=\"/images/w-4.png\" alt=\"\"></p>\n<h3 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h3><p>上面登录成功后如图所示</p>\n<p><img src=\"/images/w-5.png\" alt=\"\"></p>\n<p>下面就是精髓的部分了，感谢<a href=\"https://github.com/teddysun\" target=\"_blank\" rel=\"noopener\">@teddysun</a>大佬制作的一键安装脚本，具体更多细节可查看博客：<a href=\"https://teddysun.com/486.html\" target=\"_blank\" rel=\"noopener\">https://teddysun.com/486.html</a>  (由于大佬的<a href=\"https://teddysun.com/548.html\" target=\"_blank\" rel=\"noopener\">退出</a>,所以下面的命令目前还可以使用，但是版本已经不再更新)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n\n<p>复制粘贴上面代码到xshell，在xshell要右键粘贴，然后就会有一大串不知名代码蹦出，停在这里了</p>\n<p><img src=\"/images/w-6.png\" alt=\"\"></p>\n<p>这时候按一下Enter回车键它又可以继续了～</p>\n<p>接着又蹦出些东西，是让我们选择ss的服务器端，这里我选择go版本的，输入3按回车</p>\n<p><img src=\"/images/w-7.png\" alt=\"\"></p>\n<p>如同往常，接下来是要填入ss客户端登录的密码，这里我随意填：abc123456</p>\n<p><img src=\"/images/w-8.png\" alt=\"\"></p>\n<p>接下来是输入端口号（1-65535任意数字），这里我填默认的</p>\n<p><img src=\"/images/w-9.png\" alt=\"\"></p>\n<p>接下来是选择加密方式，默认就好，按回车</p>\n<p><img src=\"/images/w-10.png\" alt=\"\"></p>\n<p>接着又是反手一个回车就好</p>\n<p><img src=\"/images/w-11.png\" alt=\"\"></p>\n<p>这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！</p>\n<p>这个最好截图一下，以防忘记了。</p>\n<p>我就当大家英文水平还好吧，下面说的就是你的服务器IP，服务器端端口，密码，加密方式。</p>\n<p><img src=\"/images/w-12.png\" alt=\"\"></p>\n<h2 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h2><p>如果你跟着我到了这一步就代表安装好了服务器端，但是我们的电脑手机作为客户端也是需要安装客户端软件的。下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：</p>\n<p>Windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n<p>MAC:<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p>\n<p>Android:<a href=\"https://github.com/shadowsocks/shadowsocks-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-android/releases</a></p>\n<p>Linux:<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a></p>\n<p>IOS: </p>\n<p>由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号</p>\n<p>建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。</p>\n<p><strong>建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷</strong></p>\n<p>步骤：</p>\n<p>1.获取一个国区以外的账号</p>\n<p>注册国外appid教程：<a href=\"https://www.zhihu.com/question/26458172\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26458172</a></p>\n<p>（相关注册外区账号教程很多，可以自行搜索）</p>\n<p><strong>由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。</strong></p>\n<p>2.在APPStore中切换为国区以外账号</p>\n<p>3.在AppStore搜索<strong>Potatso Lite</strong>安装</p>\n<p>注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8\" target=\"_blank\" rel=\"noopener\">Potatso Lite</a></li>\n<li><a href=\"https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911\" target=\"_blank\" rel=\"noopener\">Wingy</a></li>\n<li><a href=\"http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks\" target=\"_blank\" rel=\"noopener\">Big Boss</a></li>\n</ul>\n<p>下面以windows为例演示：</p>\n<p>打开上方网址下载客户端：</p>\n<p><img src=\"/images/w-13.png\" alt=\"\"></p>\n<p>接着安装打开后配置服务器：</p>\n<p>还记得上面建议保存的图片吗？这里就用到了，服务器IP，端口，密码，加密方式，然后点击确定</p>\n<p><img src=\"/images/w-14.png\" alt=\"\"></p>\n<p>接着启用系统代理：</p>\n<p><img src=\"/images/w-15.png\" alt=\"\"></p>\n<ul>\n<li>这里简要说一下PAC模式和全局模式问题：</li>\n</ul>\n<p>PAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP</p>\n<p>全局就是全部走服务器IP</p>\n<p>这里建议选择PAC模式，PAC的地址都是保存在<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a></p>\n<p>希望大家遇到PAC无法访问的网站多上去提issues。</p>\n<h3 id=\"神圣时刻\"><a href=\"#神圣时刻\" class=\"headerlink\" title=\"神圣时刻\"></a>神圣时刻</h3><p>接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了</p>\n<p><img src=\"/images/w-16.png\" alt=\"\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最后，这里我们的任务完成了，但是如果你想优化一下服务器连接，可以安装BBR加速。具体可以看这篇文章：<a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</p>\n</blockquote>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><h2 id=\"190519更新\"><a href=\"#190519更新\" class=\"headerlink\" title=\"190519更新\"></a>190519更新</h2><p>添加备用教程<br><a href=\"./super_easy_shadowsocks_tutorial.md\">给小白的超简单shadowsocks翻墙教程</a></p>\n<h2 id=\"190518更新\"><a href=\"#190518更新\" class=\"headerlink\" title=\"190518更新\"></a>190518更新</h2><p><a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues/8\" target=\"_blank\" rel=\"noopener\">增加AWS安装EPEL的说明 #8</a></p>\n<h2 id=\"190507更新\"><a href=\"#190507更新\" class=\"headerlink\" title=\"190507更新\"></a>190507更新</h2><p>如果需要设置多端口，可以参考以下文章<br><a href=\"https://teddysun.com/532.html\" target=\"_blank\" rel=\"noopener\">如何启用 Shadowsocks 的多端口</a></p>\n<h2 id=\"190505更新\"><a href=\"#190505更新\" class=\"headerlink\" title=\"190505更新\"></a>190505更新</h2><p>如果只是需要临时使用，可以尝试免费的节点<br><a href=\"https://free1.gyteng.com/\" target=\"_blank\" rel=\"noopener\">https://free1.gyteng.com/</a></p>\n<h2 id=\"190203更新\"><a href=\"#190203更新\" class=\"headerlink\" title=\"190203更新\"></a>190203更新</h2><p>如果想要测试服务器的下载速度和运行速度，可以查看这篇文章:<a href=\"https://teddysun.com/444.html\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>仅需要一行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我的一些服务器测试速度，希望对大家选择服务器时有用:</p>\n<ul>\n<li>digitalocean新加坡 5美金一个月<br><img src=\"/images/do_singapore.png\" alt=\"\"></li>\n<li>vpsserver日本东京 4.9美金一个月<br><img src=\"/images/vpsserver_jp.png\" alt=\"\"></li>\n<li>hostus香港 2.95美金一个月<br><img src=\"/images/hostus_hk.png\" alt=\"\"></li>\n<li>aws亚马逊韩国 免费一年EC2<br><img src=\"/images/aws_kr.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"180624更新\"><a href=\"#180624更新\" class=\"headerlink\" title=\"180624更新\"></a>180624更新</h2><p>如果要PAC自定义规则，即譬如你要上的网站不在PAC目录里，可以自己添加<br>譬如我要加github进入PAC自定义协议里<br>格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">||github.com</span><br></pre></td></tr></table></figure>\n\n<p>添加进去后,<strong>记得重启一下Shadowsocks让它生效</strong></p>\n<p>api.github.com </p>\n<p>github.com/zhaoweih</p>\n<p>等等包含github.com的URL都会走服务器IP</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><p>汇总一些邮件反馈的问题</p>\n<p><strong>[已解决]1.问题：-bash: wget: command not found<br>环境：服务器：linode，新加坡服务器，cent os7</strong>  </p>\n<p>可以参照这篇文章安装wget后尝试：<a href=\"https://www.wn789.com/5624.html\" target=\"_blank\" rel=\"noopener\">https://www.wn789.com/5624.html</a></p>\n<p>**[已解决]2.问题:当访问Google学术时，会提示 :<br>“We are sorry, but your computer or network may be sending automated queries. To protect our users, we can’t process your request right now “ **  </p>\n<p>由于谷歌有自己的一套反代理爬虫的机制，所以很多 VPS 的 ip 会被谷歌检测到是代理，遇到这种情况可以用更换服务器即可，如果没有其他服务器可用，可以用<a href=\"https://lai.yuweining.cn/archives/2112/\" target=\"_blank\" rel=\"noopener\">谷歌学术镜像</a>。</p>\n<p>**[已解决]3.aws ec2报错Install EPEL repository failed的解决办法 **  </p>\n<p>参考文章：<a href=\"http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/\" target=\"_blank\" rel=\"noopener\">http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</a></p>\n<h1 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h1><h2 id=\"Telegram\"><a href=\"#Telegram\" class=\"headerlink\" title=\"Telegram\"></a>Telegram</h2><p><strong>应小伙伴要求，添加telegram(点击下面链接加入channel)</strong></p>\n<p><a href=\"https://t.me/joinchat/AAAAAExNMb2bCOpY276nMA\" target=\"_blank\" rel=\"noopener\">https://t.me/joinchat/AAAAAExNMb2bCOpY276nMA</a></p>\n<h2 id=\"Discord\"><a href=\"#Discord\" class=\"headerlink\" title=\"Discord\"></a>Discord</h2><p><strong>我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论</strong><br><a href=\"https://discord.gg/wHFxCVk\" target=\"_blank\" rel=\"noopener\"><img src=\"/images/discord.svg\" alt=\"alt text\" title=\"discordapp\"></a></p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p><strong>如果想详细了解有关shadowsocks翻墙知识的小伙伴可以查看下面文章</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b\" target=\"_blank\" rel=\"noopener\">浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别</a></li>\n</ul>\n<p><strong>由于现在很多大牌服务器IP被墙，建议不喜欢折腾的小伙伴可以尝试找别人一起合租VPS（btw：合租需要自己去掂量对方真实性，这里只是推荐一些VPS合租网站，对真实性无法保证)</strong></p>\n<ul>\n<li><a href=\"https://www.vpshz.com/\" target=\"_blank\" rel=\"noopener\">VPS合租网</a></li>\n</ul>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>如果大家对这篇文章有任何疑问都可以提<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues\" target=\"_blank\" rel=\"noopener\">issues</a>，如果你有其他更简单或者其他方法翻墙也可以pull requests。</p>\n<p><strong>关于大学生领取Github包50美金DO优惠劵教程过阵子再更新。有感兴趣的同学可以自行搜索查看先。</strong></p>\n<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧</p>\n<p>📮我的邮箱：<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p>作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Shadowsocks-Tutorial</a>  </p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>为什么要做这个库？因为有句话说“不会翻墙的程序员不是好程序员”，但是某些原因，翻墙可是越来越难了，我之前是用某灯，但是自从上个月开始某灯也不稳定了；我还以为可以和某灯相宿相飞一段时间的，后来就投靠了Shadowsocks了，为什么会选择Shadowsocks呢，因为可以自己搭建服务器，不再受牵制，而且由于是个人服务器被封IP的几率也不会很大；当然你也可以和自己信任的人共享使用，但是Shadowsocks的教程网络上真是参次不齐，很容易误导那些只想翻墙而不是要了解它原理的人，所以我就蹦出个想法：做个几乎是一键式的傻瓜Shadowsocks（以下简称ss）搭建教程给小白们，让大家都能共享自由的互联网。</p>\n<h1 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h1><h2 id=\"购买VPS服务器\"><a href=\"#购买VPS服务器\" class=\"headerlink\" title=\"购买VPS服务器\"></a>购买VPS服务器</h2><p>俗话说，万事起头难。想想倒也是这样，也不是说购买VPS服务器有多难，是接受它比较难，我当时也是一个还没买过服务器的小白，对于第一次尝试的东西都没有底，怎么敢随意下手。好了，你现在可以放心了，据我使用，Vultr和DigitalOcean这两个服务商都是可以随时部署随时摧毁服务器，是按每小时计费的，一个月是5美金，大概0.007美金一小时，就算你创建一个服务器IP刚好是被某墙屏蔽了，那就删掉也只是扣0.1美金，作为一个穷学生的我都能接受了，你还犹豫吗？</p>\n<h3 id=\"1、注册并登录\"><a href=\"#1、注册并登录\" class=\"headerlink\" title=\"1、注册并登录\"></a>1、注册并登录</h3><p>Vultr推荐链接：<a href=\"https://www.vultr.com/?ref=7370522\" target=\"_blank\" rel=\"noopener\">https://www.vultr.com/?ref=7370522</a></p>\n<p>这里我比较推荐Vultr，为什么呢？因为他有日本服务器，延迟低，掉包也低；<strong>但是后面我会推荐大学生使用DigitalOcean（以下简称DO），因为Github学生包有DO优惠劵，但是只限于大学生领取，如果是学生可以关注后面。</strong>注册登录后先充值5美金，用paypal绑定国内银行卡可以最低充值5美金，当然也有支付宝，支付宝要最低10美金。</p>\n<p><img src=\"/images/1.png\" alt=\"\"></p>\n<h3 id=\"2、部署服务器\"><a href=\"#2、部署服务器\" class=\"headerlink\" title=\"2、部署服务器\"></a>2、部署服务器</h3><p>第一步：在个人页面点击Servers然后再点右面的➕号按钮添加一个服务器</p>\n<p><img src=\"/images/2.png\" alt=\"\"></p>\n<p>第二步：在打开的页面选择Tokyo日本服务器，如果喜欢其他服务器也可以选择，后续操作是一样一样的</p>\n<p><img src=\"/images/3.png\" alt=\"\"></p>\n<p>第三步：接下来要注意了，系统最好选择CentOS 6，点击CentOS可以下拉选择6</p>\n<p><img src=\"/images/4.png\" alt=\"\"></p>\n<p>第四步：选择套餐，当然ss不需要配置太高的服务器，最低配置5美金一个月的就可以了，反正我每次看2.5美金都是卖光的，如果你能看到那赶紧选啊，千年一遇。</p>\n<p><img src=\"/images/5.png\" alt=\"\"></p>\n<p>第五步：接着就是部署起来了，当然你也可以给服务器起个名字再部署</p>\n<p><img src=\"/images/6.png\" alt=\"\"></p>\n<p>第六步：接着等待服务器启动完成，看到Status是绿色的Running就是启动完成了，这个过程大概需要1-3分钟。</p>\n<p><img src=\"/images/7.png\" alt=\"\"></p>\n<p>第七步：复制IP地址和密码，后面有用</p>\n<p><img src=\"/images/8.png\" alt=\"\"></p>\n<p>第八步：启动完成后，当然测试一下有没有被封掉IP了，打开命令管理器或者终端，输入 ping+你的IP地址，例如我服务器IP是8.8.8.8，则ping 8.8.8.8，如果出现下图的返回信息则这个IP是可以用的，偶尔一个request timeout也是可以的，是掉包现象，如果出现一直request timeout就把这服务器删掉重新部署吧。</p>\n<p><img src=\"/images/10.png\" alt=\"\"></p>\n<p>好了，到此为止最困难的事情已经过去了，后面都是一键式的了，喝杯茶🍵再继续。</p>\n<h2 id=\"在服务器安装ss\"><a href=\"#在服务器安装ss\" class=\"headerlink\" title=\"在服务器安装ss\"></a>在服务器安装ss</h2><p>因为我是用mac的，考虑到大多数人还是使用windows为主，我就把我的旧电脑给翻出来开机继续做教程。基于windows 7。</p>\n<ul>\n<li><strong>如果你是用mac，那恭喜你，下面连接的步骤直接打开终端输入</strong></li>\n</ul>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<ul>\n<li><strong>如果你是用windows10,可以打开系统自带的powershell工具:</strong></li>\n</ul>\n<p><img src=\"/images/powershell_windows_menu.png\" alt=\"\"></p>\n<p><strong>输入</strong></p>\n<p><code>ssh root@你的服务器IP地址</code></p>\n<p><img src=\"/images/powershell_run.png\" alt=\"\"></p>\n<p><strong>连接就可以，然后可以跳过安装并运行xshell这个步骤</strong></p>\n<h3 id=\"安装并运行xshell\"><a href=\"#安装并运行xshell\" class=\"headerlink\" title=\"安装并运行xshell\"></a>安装并运行xshell</h3><p><strong>提示：如果服务器可以ping通，但xshell无法连接说明服务器被封端口了（很多vultr日本服务器有这种状况），请更换其他地区服务器或者更换服务器商</strong></p>\n<p>windows下ssh连接需要下载Xshell，百度搜一搜就能下载了，当然你也可以用其他的，这里以Xshell为例，安装好Xshell后点击文件-新建</p>\n<p><img src=\"/images/w-1.png\" alt=\"\"></p>\n<p>接下来配置连接,名称随便起，主机填写你的服务器IP地址，下面都默认就好</p>\n<p><img src=\"/images/w-2.png\" alt=\"\"></p>\n<p>接下来在弹出的窗口填root（默认服务器用户名）</p>\n<p><img src=\"/images/w-3.png\" alt=\"\"></p>\n<p>这里就要填入你在上篇复制的服务器密码了</p>\n<p><img src=\"/images/w-4.png\" alt=\"\"></p>\n<h3 id=\"安装ss\"><a href=\"#安装ss\" class=\"headerlink\" title=\"安装ss\"></a>安装ss</h3><p>上面登录成功后如图所示</p>\n<p><img src=\"/images/w-5.png\" alt=\"\"></p>\n<p>下面就是精髓的部分了，感谢<a href=\"https://github.com/teddysun\" target=\"_blank\" rel=\"noopener\">@teddysun</a>大佬制作的一键安装脚本，具体更多细节可查看博客：<a href=\"https://teddysun.com/486.html\" target=\"_blank\" rel=\"noopener\">https://teddysun.com/486.html</a>  (由于大佬的<a href=\"https://teddysun.com/548.html\" target=\"_blank\" rel=\"noopener\">退出</a>,所以下面的命令目前还可以使用，但是版本已经不再更新)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;teddysun&#x2F;shadowsocks_install&#x2F;master&#x2F;shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">.&#x2F;shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n\n<p>复制粘贴上面代码到xshell，在xshell要右键粘贴，然后就会有一大串不知名代码蹦出，停在这里了</p>\n<p><img src=\"/images/w-6.png\" alt=\"\"></p>\n<p>这时候按一下Enter回车键它又可以继续了～</p>\n<p>接着又蹦出些东西，是让我们选择ss的服务器端，这里我选择go版本的，输入3按回车</p>\n<p><img src=\"/images/w-7.png\" alt=\"\"></p>\n<p>如同往常，接下来是要填入ss客户端登录的密码，这里我随意填：abc123456</p>\n<p><img src=\"/images/w-8.png\" alt=\"\"></p>\n<p>接下来是输入端口号（1-65535任意数字），这里我填默认的</p>\n<p><img src=\"/images/w-9.png\" alt=\"\"></p>\n<p>接下来是选择加密方式，默认就好，按回车</p>\n<p><img src=\"/images/w-10.png\" alt=\"\"></p>\n<p>接着又是反手一个回车就好</p>\n<p><img src=\"/images/w-11.png\" alt=\"\"></p>\n<p>这里可能需要等待一会，看到下图就是大功告成了。干杯🍻！</p>\n<p>这个最好截图一下，以防忘记了。</p>\n<p>我就当大家英文水平还好吧，下面说的就是你的服务器IP，服务器端端口，密码，加密方式。</p>\n<p><img src=\"/images/w-12.png\" alt=\"\"></p>\n<h2 id=\"下载客户端\"><a href=\"#下载客户端\" class=\"headerlink\" title=\"下载客户端\"></a>下载客户端</h2><p>如果你跟着我到了这一步就代表安装好了服务器端，但是我们的电脑手机作为客户端也是需要安装客户端软件的。下面是各个终端的下载地址（我用过Windows,MAC,Android,IOS操作起来都是差不多的。）：</p>\n<p>Windows：<a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-windows/releases</a></p>\n<p>MAC:<a href=\"https://github.com/shadowsocks/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/ShadowsocksX-NG/releases</a></p>\n<p>Android:<a href=\"https://github.com/shadowsocks/shadowsocks-android/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-android/releases</a></p>\n<p>Linux:<a href=\"https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation\" target=\"_blank\" rel=\"noopener\">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a></p>\n<p>IOS: </p>\n<p>由于国区APP下架VPN类APP，包括支持ss类的APP，所以需要切换账号</p>\n<p>建议注册一个国外账号，不要国内账号换区，这样既可以需要下载国内APP时切换国区账号，需要下载国外APP时切换外区账号。</p>\n<p><strong>建议不想折腾的可以淘宝买一个国外App Store账号，便宜方便快捷</strong></p>\n<p>步骤：</p>\n<p>1.获取一个国区以外的账号</p>\n<p>注册国外appid教程：<a href=\"https://www.zhihu.com/question/26458172\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/26458172</a></p>\n<p>（相关注册外区账号教程很多，可以自行搜索）</p>\n<p><strong>由于苹果的新政策，注册apple id在付款方式选择的时候非当地ip无法选择none选项，例如我注册英国区账号，需要ip为英国才可以。即在注册时要搭梯子，对应ip注册。</strong></p>\n<p>2.在APPStore中切换为国区以外账号</p>\n<p>3.在AppStore搜索<strong>Potatso Lite</strong>安装</p>\n<p>注：或者其他支持shadowsocks的APP也可以，这里比较推荐Potatso Lite</p>\n<ul>\n<li><a href=\"https://itunes.apple.com/us/app/potatso-lite/id1239860606?mt=8\" target=\"_blank\" rel=\"noopener\">Potatso Lite</a></li>\n<li><a href=\"https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911\" target=\"_blank\" rel=\"noopener\">Wingy</a></li>\n<li><a href=\"http://apt.thebigboss.org/onepackage.php?bundleid=com.linusyang.shadowsocks\" target=\"_blank\" rel=\"noopener\">Big Boss</a></li>\n</ul>\n<p>下面以windows为例演示：</p>\n<p>打开上方网址下载客户端：</p>\n<p><img src=\"/images/w-13.png\" alt=\"\"></p>\n<p>接着安装打开后配置服务器：</p>\n<p>还记得上面建议保存的图片吗？这里就用到了，服务器IP，端口，密码，加密方式，然后点击确定</p>\n<p><img src=\"/images/w-14.png\" alt=\"\"></p>\n<p>接着启用系统代理：</p>\n<p><img src=\"/images/w-15.png\" alt=\"\"></p>\n<ul>\n<li>这里简要说一下PAC模式和全局模式问题：</li>\n</ul>\n<p>PAC模式就是访问国内网站会走国内IP，访问被封的网站走服务器IP</p>\n<p>全局就是全部走服务器IP</p>\n<p>这里建议选择PAC模式，PAC的地址都是保存在<a href=\"https://github.com/gfwlist/gfwlist\" target=\"_blank\" rel=\"noopener\">gfwlist</a></p>\n<p>希望大家遇到PAC无法访问的网站多上去提issues。</p>\n<h3 id=\"神圣时刻\"><a href=\"#神圣时刻\" class=\"headerlink\" title=\"神圣时刻\"></a>神圣时刻</h3><p>接着最神圣的时刻来了，在浏览器输入google.com，回车，蹦，谷歌回来了</p>\n<p><img src=\"/images/w-16.png\" alt=\"\"></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>最后，这里我们的任务完成了，但是如果你想优化一下服务器连接，可以安装BBR加速。具体可以看这篇文章：<a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>使用root用户登录，运行以下命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https:&#x2F;&#x2F;github.com&#x2F;teddysun&#x2F;across&#x2F;raw&#x2F;master&#x2F;bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; .&#x2F;bbr.sh</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，脚本会提示需要重启 VPS，输入 y 并回车后重启。</p>\n</blockquote>\n<h1 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h1><h2 id=\"190519更新\"><a href=\"#190519更新\" class=\"headerlink\" title=\"190519更新\"></a>190519更新</h2><p>添加备用教程<br><a href=\"./super_easy_shadowsocks_tutorial.md\">给小白的超简单shadowsocks翻墙教程</a></p>\n<h2 id=\"190518更新\"><a href=\"#190518更新\" class=\"headerlink\" title=\"190518更新\"></a>190518更新</h2><p><a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues/8\" target=\"_blank\" rel=\"noopener\">增加AWS安装EPEL的说明 #8</a></p>\n<h2 id=\"190507更新\"><a href=\"#190507更新\" class=\"headerlink\" title=\"190507更新\"></a>190507更新</h2><p>如果需要设置多端口，可以参考以下文章<br><a href=\"https://teddysun.com/532.html\" target=\"_blank\" rel=\"noopener\">如何启用 Shadowsocks 的多端口</a></p>\n<h2 id=\"190505更新\"><a href=\"#190505更新\" class=\"headerlink\" title=\"190505更新\"></a>190505更新</h2><p>如果只是需要临时使用，可以尝试免费的节点<br><a href=\"https://free1.gyteng.com/\" target=\"_blank\" rel=\"noopener\">https://free1.gyteng.com/</a></p>\n<h2 id=\"190203更新\"><a href=\"#190203更新\" class=\"headerlink\" title=\"190203更新\"></a>190203更新</h2><p>如果想要测试服务器的下载速度和运行速度，可以查看这篇文章:<a href=\"https://teddysun.com/444.html\" target=\"_blank\" rel=\"noopener\">文章</a></p>\n<blockquote>\n<p>仅需要一行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;wget -qO- bench.sh | bash</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>我的一些服务器测试速度，希望对大家选择服务器时有用:</p>\n<ul>\n<li>digitalocean新加坡 5美金一个月<br><img src=\"/images/do_singapore.png\" alt=\"\"></li>\n<li>vpsserver日本东京 4.9美金一个月<br><img src=\"/images/vpsserver_jp.png\" alt=\"\"></li>\n<li>hostus香港 2.95美金一个月<br><img src=\"/images/hostus_hk.png\" alt=\"\"></li>\n<li>aws亚马逊韩国 免费一年EC2<br><img src=\"/images/aws_kr.png\" alt=\"\"></li>\n</ul>\n<h2 id=\"180624更新\"><a href=\"#180624更新\" class=\"headerlink\" title=\"180624更新\"></a>180624更新</h2><p>如果要PAC自定义规则，即譬如你要上的网站不在PAC目录里，可以自己添加<br>譬如我要加github进入PAC自定义协议里<br>格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">||github.com</span><br></pre></td></tr></table></figure>\n\n<p>添加进去后,<strong>记得重启一下Shadowsocks让它生效</strong></p>\n<p>api.github.com </p>\n<p>github.com/zhaoweih</p>\n<p>等等包含github.com的URL都会走服务器IP</p>\n<h1 id=\"Q-amp-A\"><a href=\"#Q-amp-A\" class=\"headerlink\" title=\"Q&amp;A\"></a>Q&amp;A</h1><p>汇总一些邮件反馈的问题</p>\n<p><strong>[已解决]1.问题：-bash: wget: command not found<br>环境：服务器：linode，新加坡服务器，cent os7</strong>  </p>\n<p>可以参照这篇文章安装wget后尝试：<a href=\"https://www.wn789.com/5624.html\" target=\"_blank\" rel=\"noopener\">https://www.wn789.com/5624.html</a></p>\n<p>**[已解决]2.问题:当访问Google学术时，会提示 :<br>“We are sorry, but your computer or network may be sending automated queries. To protect our users, we can’t process your request right now “ **  </p>\n<p>由于谷歌有自己的一套反代理爬虫的机制，所以很多 VPS 的 ip 会被谷歌检测到是代理，遇到这种情况可以用更换服务器即可，如果没有其他服务器可用，可以用<a href=\"https://lai.yuweining.cn/archives/2112/\" target=\"_blank\" rel=\"noopener\">谷歌学术镜像</a>。</p>\n<p>**[已解决]3.aws ec2报错Install EPEL repository failed的解决办法 **  </p>\n<p>参考文章：<a href=\"http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/\" target=\"_blank\" rel=\"noopener\">http://blog.openpilot.cc/archives/aws-ec2%E6%8A%A5%E9%94%99install-epel-repository-failed%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</a></p>\n<h1 id=\"讨论\"><a href=\"#讨论\" class=\"headerlink\" title=\"讨论\"></a>讨论</h1><h2 id=\"Telegram\"><a href=\"#Telegram\" class=\"headerlink\" title=\"Telegram\"></a>Telegram</h2><p><strong>应小伙伴要求，添加telegram(点击下面链接加入channel)</strong></p>\n<p><a href=\"https://t.me/joinchat/AAAAAExNMb2bCOpY276nMA\" target=\"_blank\" rel=\"noopener\">https://t.me/joinchat/AAAAAExNMb2bCOpY276nMA</a></p>\n<h2 id=\"Discord\"><a href=\"#Discord\" class=\"headerlink\" title=\"Discord\"></a>Discord</h2><p><strong>我创建了一个discord聊天室，遇到问题的小伙伴可以一起讨论</strong><br><a href=\"https://discord.gg/wHFxCVk\" target=\"_blank\" rel=\"noopener\"><img src=\"/images/discord.svg\" alt=\"alt text\" title=\"discordapp\"></a></p>\n<h1 id=\"更多\"><a href=\"#更多\" class=\"headerlink\" title=\"更多\"></a>更多</h1><p><strong>如果想详细了解有关shadowsocks翻墙知识的小伙伴可以查看下面文章</strong></p>\n<ul>\n<li><a href=\"https://medium.com/@thomas_summon/%E6%B5%85%E8%B0%88vpn-vps-proxy%E4%BB%A5%E5%8F%8Ashadowsocks%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB%E5%92%8C%E5%8C%BA%E5%88%AB-b0198f92db1b\" target=\"_blank\" rel=\"noopener\">浅谈vpn、vps、Proxy以及shadowsocks之间的联系和区别</a></li>\n</ul>\n<p><strong>由于现在很多大牌服务器IP被墙，建议不喜欢折腾的小伙伴可以尝试找别人一起合租VPS（btw：合租需要自己去掂量对方真实性，这里只是推荐一些VPS合租网站，对真实性无法保证)</strong></p>\n<ul>\n<li><a href=\"https://www.vpshz.com/\" target=\"_blank\" rel=\"noopener\">VPS合租网</a></li>\n</ul>\n<h1 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h1><p>如果大家对这篇文章有任何疑问都可以提<a href=\"https://github.com/zhaoweih/Shadowsocks-Tutorial/issues\" target=\"_blank\" rel=\"noopener\">issues</a>，如果你有其他更简单或者其他方法翻墙也可以pull requests。</p>\n<p><strong>关于大学生领取Github包50美金DO优惠劵教程过阵子再更新。有感兴趣的同学可以自行搜索查看先。</strong></p>\n<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><p>我是一名普通的大学学生，一个追求自由的少年，如果想要找我，可以给我发邮件📧</p>\n<p>📮我的邮箱：<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n<h1 id=\"赞赏\"><a href=\"#赞赏\" class=\"headerlink\" title=\"赞赏\"></a>赞赏</h1><p>作为学生我目前生活还是蛮自如的，有吃的有喝的，就不用赞赏了。喜欢就给我个star或者fork一下吧❤️，谢谢！</p>\n"},{"title":"自建ssr服务器教程","date":"2017-11-03T16:33:50.000Z","_content":"\n\n\n- **原文地址：[自建ssr服务器教程](https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B)**\n\n**2017年10月31日对教程细节方面进行补充，方便新手。**\n\n------\n\n**自建ss/ssr教程很简单，整个教程分三步**：\n\n第一步：购买VPS服务器\n\n第二步：一键部署VPS服务器\n\n第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）\n\n------\n\n**第一步：购买VPS服务器**\n\nVPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高。\n\nvultr注册地址： http://www.vultr.com/?ref=7048874 （全球15个服务器位置可选，KVM框架） \n\n虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。\n\n注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(**2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右**），使用paypal有信用卡即可。paypal注册地址：https://www.paypal.com （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）\n\n2.5美元/月的服务器配置信息：单核  512M内存  20G SSD硬盘   100M带宽   500G流量/月   \n\n5美元/月的服务器配置信息：单核   1G内存   25G SSD硬盘   100M带宽    1000G流量/月  \n\n10美元/月的服务器配置信息：单核  2G内存   40G SSD硬盘   100M带宽    2000G流量/月  \n\n20美元/月的服务器配置信息：2cpu  4G内存   60G SSD硬盘   100M带宽    3000G流量/月  \n\n40美元/月的服务器配置信息：4cpu  8G内存   100G SSD硬盘   100M带宽   4000G流量/月  \n\n**vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，很方便。温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，所以最好亲测一下。**\n\n**计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算**。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。\n\n如图：\n\n![](https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png)\n\n购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)等，近期不推荐用洛杉矶和日本的服务器，因为这两个地区近期能够开到的好ip的可能性很低。**推荐选择CentOS 6.X64位的系统（系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰ssr的正常连接！）**。完成购买后，找到系统的密码记下来，部署服务器时需要用到。如图：\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程01.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程02.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程04.png)\n\n**默认是centos7系统，点击图中的CentOS几个字，会弹出centos6，然后选中它！vps操作系统不要选cento7，因为选它很可能会影响ssr的正常连接。**\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程05.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程06.png)\n\n------\n\n**第二步：部署VPS服务器**\n\n购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：\n\n[国外云盘下载](https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe) 提取密码：666\n\n[百度软件中心](http://rj.baidu.com/soft/detail/15201.html?ald)\n\n如果你是苹果电脑操作系统，请自行搜索并下载能远程连接vps服务器的软件的MAC版，关键词可以这样搜索“Mac OS X 平台有哪些好用的 SSH 客户端\"\n\n------\n\n部署教程：\n\n下载xshell软件并安装后，打开软件\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png)\n\n选择文件，新建\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png)\n\n随便取个名字，然后把你的服务器ip填上\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png)\n\n连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的cent系统的密码。\n\n**如果开好了服务器，发现xshell死活连不上，多半是开的服务器ip被墙了，遇到这种情况，把服务器删掉，重新开个新的服务器即可，可以是同地区的也可以选择其它地区。**\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell15.png)\n\n连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。\n\n**分享两个好用的代码，选择其中一个即可。建议两个脚本先大致都看一下功能,然后再选择。**\n\n【第1个一键部署ssr代码】\n\nyum -y install wget\n\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\n\nchmod +x shadowsocksR.sh\n\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n———————————————————代码分割线————————————————\n\n上面的代码总共有4行（显示5行），复制时要一起复制下来，以下脚本类似。如果要卸载直接输入命令：./shadowsocks-go.sh uninstall\n\n**演示开始：复制代码粘贴到vps服务器里，按回车键，进入部署。**\n\n按照如下提示，输入想设置的**密码**，按回车键进入下一步 (**密码建议用字母，图中的密码只是作为演示用**)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/1.png)\n\n按照如下提示，输入想设置的**端口**（3～4位即可），按回车键进入下一步\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/2.png)\n\n按照如下提示，选择想设置的**加密方式**，括号里面是默认的加密方式，想设置默认的话直接按回车键。这里选择数字2（和默认一样）的aes-256-cfb的加密方式\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/3.png)\n\n按照如下提示，选择项设置的**协议插件**，默然的是origin（支持SS客户端，不推荐），我们选择SSR客户端的协议插件：3\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/4.png)\n\n按照如下提示，选择项设置的**混淆插件**，默然的是plain（支持SS客户端，不推荐），我们选择SSR客户端的混淆插件：6\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/5.png)\n\n按照如下提示，按任意键进行自动部署\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/6.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/7.png)\n\n上图表示部署成功。从上往下依次为SSR帐号的IP、端口、密码、协议插件、混淆插件和加密方式。\n\n最后可以重启服务器确保部署生效。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。\n\n这个脚本的图文演示就结束了，图中的IP仅作演示用，教程发布后会失效。有人想了，我以后有想修改密码或者端口的需求怎么办？这个脚本修改密码和端口不是很方便，需要把最初的部署代码重新输入一遍，即从头到尾部署一遍即可。\n\n**下面再分享第二个脚本，这个脚本装一遍即可，方便以后想修改密码、端口什么的，而且功能更多。**\n\n【第2个一键部署ssr代码】\n\nCentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本：\n\nyum -y install wget\n\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n备用下载地址：\n\nyum -y install wget\n\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n———————————————————代码分割线————————————————\n\n复制上面的代码到VPS服务器里，安装脚本后，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png)\n\n如上图出现管理界面后，**输入数字1来安装SSR服务端**。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/9.png)\n\n根据上图提示，依次输入自己想设置的**端口和密码** (**密码建议用字母，图中的密码只是作为演示用**)，回车键用于确认\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/10.png)\n\n如上图，选择想设置的**加密方式**，比如10，按回车键确认\n\n接下来是选择**协议插件**，如下图：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/12.png)\n\n选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端，可以根据需求进行选择，原则上不推荐使用SS客户端，演示选择n\n\n之后进行混淆插件的设置，如下面\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/13.png)\n\n进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png)\n\n之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png)\n\n耐心等待一会，出现下面的界面即部署完成：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/17.png)\n\n根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png)\n\n**第2个脚本的演示结束。**\n\n------\n\n**第三步：一键加速VPS服务器**\n\n此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。\n\n按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：\n\n【谷歌BBR加速教程】\n\nyum -y install wget\n\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n\n把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。\n\n演示开始，如图：\n\n复制并粘贴代码后，按回车键确认\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png)\n\n如下图提示，按任意键继续部署\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png)\n\n部署到上图这个位置的时候，等待3～6分钟\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png)\n\n最后输入y重启服务器或者手动输入代码reboot来确保加速生效。\n\n------\n\n【SSR客户端下载】\n\nWindows SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases) [备用下载地址](https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z)\n\nMAC SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases) [备用下载地址](https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482)\n\n[Linux客户端一键安装配置使用脚本(使用方法见注释)](https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr) 或者采用图形界面的[linux ssr客户端](https://github.com/erguotou520/electron-ssr/releases)\n\n安卓 SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/shadowsocksr-android/releases) [备用下载地址](https://nofile.io/f/GRWw7PbADrc#1c6c32f969e7f5d9) \n\n苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，请用美区的appid账号来下载，网络上有申请国外appid的教程或者淘宝购买。\n\n**有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子**：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/25.png)\n\n在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。\n\n启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择\"全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）\n\n如果想国外网站走SSR代理，国内网站不走SSR代理，那么SSR客户端可以设置为”PAC模式“，但是此时浏览器要设置为系统代理才行。\n\n![ssr9000](https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png)\n\n------\n\n**常见问题参考解决方法**：\n\n1、用了一段时间发现ssr账号用不了了？\n\n多半是被墙了，即ip失效。首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，很简单。vultr服务商是折算成小时计费，且开通和删除服务器非常方便（新服务器即新ip。大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供更换1次ip的服务，如果你买的是别家的vps，一定要了解是否能够更换ip，假如不能，那么万一你的ip不幸被墙，钱就打水漂了）。\n\n2、刚搭建好的ssr账号，ip能ping通，但是还是用不了？\n\n首选，排除杀毒软件的干扰，尤其是国产杀毒软件，包括但不限于360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即127.0.0.1 1080端口。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。\n\n3、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。\n\n4、小知识：vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。\n\n5、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般10美元的服务器可以同时支持100人在线使用。\n\n> 鸣谢参考教程：[秋水逸冰](https://teddysun.com/392.html)  [91yun](https://www.91yun.co/archives/5174)  [doub.bid](https://doub.bid/ss-jc42/)\n\n------\n\n","source":"_posts/自建ssr服务器教程.md","raw":"---\ntitle: 自建ssr服务器教程\ndate: 2017-11-04 00:33:50\ntags: [ssr服务器]\n\n---\n\n\n\n- **原文地址：[自建ssr服务器教程](https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B)**\n\n**2017年10月31日对教程细节方面进行补充，方便新手。**\n\n------\n\n**自建ss/ssr教程很简单，整个教程分三步**：\n\n第一步：购买VPS服务器\n\n第二步：一键部署VPS服务器\n\n第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）\n\n------\n\n**第一步：购买VPS服务器**\n\nVPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高。\n\nvultr注册地址： http://www.vultr.com/?ref=7048874 （全球15个服务器位置可选，KVM框架） \n\n虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。\n\n注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(**2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右**），使用paypal有信用卡即可。paypal注册地址：https://www.paypal.com （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）\n\n2.5美元/月的服务器配置信息：单核  512M内存  20G SSD硬盘   100M带宽   500G流量/月   \n\n5美元/月的服务器配置信息：单核   1G内存   25G SSD硬盘   100M带宽    1000G流量/月  \n\n10美元/月的服务器配置信息：单核  2G内存   40G SSD硬盘   100M带宽    2000G流量/月  \n\n20美元/月的服务器配置信息：2cpu  4G内存   60G SSD硬盘   100M带宽    3000G流量/月  \n\n40美元/月的服务器配置信息：4cpu  8G内存   100G SSD硬盘   100M带宽   4000G流量/月  \n\n**vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，很方便。温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，所以最好亲测一下。**\n\n**计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算**。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。\n\n如图：\n\n![](https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png)\n\n购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)等，近期不推荐用洛杉矶和日本的服务器，因为这两个地区近期能够开到的好ip的可能性很低。**推荐选择CentOS 6.X64位的系统（系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰ssr的正常连接！）**。完成购买后，找到系统的密码记下来，部署服务器时需要用到。如图：\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程01.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程02.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程04.png)\n\n**默认是centos7系统，点击图中的CentOS几个字，会弹出centos6，然后选中它！vps操作系统不要选cento7，因为选它很可能会影响ssr的正常连接。**\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程05.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac教程06.png)\n\n------\n\n**第二步：部署VPS服务器**\n\n购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：\n\n[国外云盘下载](https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe) 提取密码：666\n\n[百度软件中心](http://rj.baidu.com/soft/detail/15201.html?ald)\n\n如果你是苹果电脑操作系统，请自行搜索并下载能远程连接vps服务器的软件的MAC版，关键词可以这样搜索“Mac OS X 平台有哪些好用的 SSH 客户端\"\n\n------\n\n部署教程：\n\n下载xshell软件并安装后，打开软件\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png)\n\n选择文件，新建\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png)\n\n随便取个名字，然后把你的服务器ip填上\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png)\n\n连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的cent系统的密码。\n\n**如果开好了服务器，发现xshell死活连不上，多半是开的服务器ip被墙了，遇到这种情况，把服务器删掉，重新开个新的服务器即可，可以是同地区的也可以选择其它地区。**\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell15.png)\n\n连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。\n\n**分享两个好用的代码，选择其中一个即可。建议两个脚本先大致都看一下功能,然后再选择。**\n\n【第1个一键部署ssr代码】\n\nyum -y install wget\n\nwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\n\nchmod +x shadowsocksR.sh\n\n./shadowsocksR.sh 2>&1 | tee shadowsocksR.log\n\n———————————————————代码分割线————————————————\n\n上面的代码总共有4行（显示5行），复制时要一起复制下来，以下脚本类似。如果要卸载直接输入命令：./shadowsocks-go.sh uninstall\n\n**演示开始：复制代码粘贴到vps服务器里，按回车键，进入部署。**\n\n按照如下提示，输入想设置的**密码**，按回车键进入下一步 (**密码建议用字母，图中的密码只是作为演示用**)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/1.png)\n\n按照如下提示，输入想设置的**端口**（3～4位即可），按回车键进入下一步\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/2.png)\n\n按照如下提示，选择想设置的**加密方式**，括号里面是默认的加密方式，想设置默认的话直接按回车键。这里选择数字2（和默认一样）的aes-256-cfb的加密方式\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/3.png)\n\n按照如下提示，选择项设置的**协议插件**，默然的是origin（支持SS客户端，不推荐），我们选择SSR客户端的协议插件：3\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/4.png)\n\n按照如下提示，选择项设置的**混淆插件**，默然的是plain（支持SS客户端，不推荐），我们选择SSR客户端的混淆插件：6\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/5.png)\n\n按照如下提示，按任意键进行自动部署\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/6.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/7.png)\n\n上图表示部署成功。从上往下依次为SSR帐号的IP、端口、密码、协议插件、混淆插件和加密方式。\n\n最后可以重启服务器确保部署生效。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。\n\n这个脚本的图文演示就结束了，图中的IP仅作演示用，教程发布后会失效。有人想了，我以后有想修改密码或者端口的需求怎么办？这个脚本修改密码和端口不是很方便，需要把最初的部署代码重新输入一遍，即从头到尾部署一遍即可。\n\n**下面再分享第二个脚本，这个脚本装一遍即可，方便以后想修改密码、端口什么的，而且功能更多。**\n\n【第2个一键部署ssr代码】\n\nCentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本：\n\nyum -y install wget\n\nwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n备用下载地址：\n\nyum -y install wget\n\nwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh && chmod +x ssr.sh && bash ssr.sh\n\n———————————————————代码分割线————————————————\n\n复制上面的代码到VPS服务器里，安装脚本后，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png)\n\n如上图出现管理界面后，**输入数字1来安装SSR服务端**。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/9.png)\n\n根据上图提示，依次输入自己想设置的**端口和密码** (**密码建议用字母，图中的密码只是作为演示用**)，回车键用于确认\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/10.png)\n\n如上图，选择想设置的**加密方式**，比如10，按回车键确认\n\n接下来是选择**协议插件**，如下图：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/12.png)\n\n选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端，可以根据需求进行选择，原则上不推荐使用SS客户端，演示选择n\n\n之后进行混淆插件的设置，如下面\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/13.png)\n\n进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png)\n\n之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png)\n\n耐心等待一会，出现下面的界面即部署完成：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/17.png)\n\n根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png)\n\n**第2个脚本的演示结束。**\n\n------\n\n**第三步：一键加速VPS服务器**\n\n此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。\n\n按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：\n\n【谷歌BBR加速教程】\n\nyum -y install wget\n\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n\n把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。\n\n演示开始，如图：\n\n复制并粘贴代码后，按回车键确认\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png)\n\n如下图提示，按任意键继续部署\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png)\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png)\n\n部署到上图这个位置的时候，等待3～6分钟\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png)\n\n最后输入y重启服务器或者手动输入代码reboot来确保加速生效。\n\n------\n\n【SSR客户端下载】\n\nWindows SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases) [备用下载地址](https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z)\n\nMAC SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases) [备用下载地址](https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482)\n\n[Linux客户端一键安装配置使用脚本(使用方法见注释)](https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr) 或者采用图形界面的[linux ssr客户端](https://github.com/erguotou520/electron-ssr/releases)\n\n安卓 SSR客户端 [下载地址](https://github.com/shadowsocksr-backup/shadowsocksr-android/releases) [备用下载地址](https://nofile.io/f/GRWw7PbADrc#1c6c32f969e7f5d9) \n\n苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，请用美区的appid账号来下载，网络上有申请国外appid的教程或者淘宝购买。\n\n**有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子**：\n\n![](https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/25.png)\n\n在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。\n\n启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择\"全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）\n\n如果想国外网站走SSR代理，国内网站不走SSR代理，那么SSR客户端可以设置为”PAC模式“，但是此时浏览器要设置为系统代理才行。\n\n![ssr9000](https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png)\n\n------\n\n**常见问题参考解决方法**：\n\n1、用了一段时间发现ssr账号用不了了？\n\n多半是被墙了，即ip失效。首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，很简单。vultr服务商是折算成小时计费，且开通和删除服务器非常方便（新服务器即新ip。大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供更换1次ip的服务，如果你买的是别家的vps，一定要了解是否能够更换ip，假如不能，那么万一你的ip不幸被墙，钱就打水漂了）。\n\n2、刚搭建好的ssr账号，ip能ping通，但是还是用不了？\n\n首选，排除杀毒软件的干扰，尤其是国产杀毒软件，包括但不限于360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即127.0.0.1 1080端口。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。\n\n3、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。\n\n4、小知识：vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。\n\n5、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般10美元的服务器可以同时支持100人在线使用。\n\n> 鸣谢参考教程：[秋水逸冰](https://teddysun.com/392.html)  [91yun](https://www.91yun.co/archives/5174)  [doub.bid](https://doub.bid/ss-jc42/)\n\n------\n\n","slug":"自建ssr服务器教程","published":1,"updated":"2019-01-21T15:52:07.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc67001gl0onbpw53d21","content":"<ul>\n<li><strong>原文地址：<a href=\"https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">自建ssr服务器教程</a></strong></li>\n</ul>\n<p><strong>2017年10月31日对教程细节方面进行补充，方便新手。</strong></p>\n<hr>\n<p><strong>自建ss/ssr教程很简单，整个教程分三步</strong>：</p>\n<p>第一步：购买VPS服务器</p>\n<p>第二步：一键部署VPS服务器</p>\n<p>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</p>\n<hr>\n<p><strong>第一步：购买VPS服务器</strong></p>\n<p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高。</p>\n<p>vultr注册地址： <a href=\"http://www.vultr.com/?ref=7048874\" target=\"_blank\" rel=\"noopener\">http://www.vultr.com/?ref=7048874</a> （全球15个服务器位置可选，KVM框架） </p>\n<p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p>\n<p>注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(<strong>2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右</strong>），使用paypal有信用卡即可。paypal注册地址：<a href=\"https://www.paypal.com\" target=\"_blank\" rel=\"noopener\">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）</p>\n<p>2.5美元/月的服务器配置信息：单核  512M内存  20G SSD硬盘   100M带宽   500G流量/月   </p>\n<p>5美元/月的服务器配置信息：单核   1G内存   25G SSD硬盘   100M带宽    1000G流量/月  </p>\n<p>10美元/月的服务器配置信息：单核  2G内存   40G SSD硬盘   100M带宽    2000G流量/月  </p>\n<p>20美元/月的服务器配置信息：2cpu  4G内存   60G SSD硬盘   100M带宽    3000G流量/月  </p>\n<p>40美元/月的服务器配置信息：4cpu  8G内存   100G SSD硬盘   100M带宽   4000G流量/月  </p>\n<p><strong>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，很方便。温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，所以最好亲测一下。</strong></p>\n<p><strong>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算</strong>。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。</p>\n<p>如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png\" alt=\"\"></p>\n<p>购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)等，近期不推荐用洛杉矶和日本的服务器，因为这两个地区近期能够开到的好ip的可能性很低。<strong>推荐选择CentOS 6.X64位的系统（系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰ssr的正常连接！）</strong>。完成购买后，找到系统的密码记下来，部署服务器时需要用到。如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B01.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B02.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B04.png\" alt=\"\"></p>\n<p><strong>默认是centos7系统，点击图中的CentOS几个字，会弹出centos6，然后选中它！vps操作系统不要选cento7，因为选它很可能会影响ssr的正常连接。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B05.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B06.png\" alt=\"\"></p>\n<hr>\n<p><strong>第二步：部署VPS服务器</strong></p>\n<p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p>\n<p><a href=\"https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe\" target=\"_blank\" rel=\"noopener\">国外云盘下载</a> 提取密码：666</p>\n<p><a href=\"http://rj.baidu.com/soft/detail/15201.html?ald\" target=\"_blank\" rel=\"noopener\">百度软件中心</a></p>\n<p>如果你是苹果电脑操作系统，请自行搜索并下载能远程连接vps服务器的软件的MAC版，关键词可以这样搜索“Mac OS X 平台有哪些好用的 SSH 客户端”</p>\n<hr>\n<p>部署教程：</p>\n<p>下载xshell软件并安装后，打开软件</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png\" alt=\"\"></p>\n<p>选择文件，新建</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png\" alt=\"\"></p>\n<p>随便取个名字，然后把你的服务器ip填上</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png\" alt=\"\"></p>\n<p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的cent系统的密码。</p>\n<p><strong>如果开好了服务器，发现xshell死活连不上，多半是开的服务器ip被墙了，遇到这种情况，把服务器删掉，重新开个新的服务器即可，可以是同地区的也可以选择其它地区。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell15.png\" alt=\"\"></p>\n<p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p>\n<p><strong>分享两个好用的代码，选择其中一个即可。建议两个脚本先大致都看一下功能,然后再选择。</strong></p>\n<p>【第1个一键部署ssr代码】</p>\n<p>yum -y install wget</p>\n<p>wget –no-check-certificate <a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</a></p>\n<p>chmod +x shadowsocksR.sh</p>\n<p>./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</p>\n<p>———————————————————代码分割线————————————————</p>\n<p>上面的代码总共有4行（显示5行），复制时要一起复制下来，以下脚本类似。如果要卸载直接输入命令：./shadowsocks-go.sh uninstall</p>\n<p><strong>演示开始：复制代码粘贴到vps服务器里，按回车键，进入部署。</strong></p>\n<p>按照如下提示，输入想设置的<strong>密码</strong>，按回车键进入下一步 (<strong>密码建议用字母，图中的密码只是作为演示用</strong>)</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/1.png\" alt=\"\"></p>\n<p>按照如下提示，输入想设置的<strong>端口</strong>（3～4位即可），按回车键进入下一步</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/2.png\" alt=\"\"></p>\n<p>按照如下提示，选择想设置的<strong>加密方式</strong>，括号里面是默认的加密方式，想设置默认的话直接按回车键。这里选择数字2（和默认一样）的aes-256-cfb的加密方式</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/3.png\" alt=\"\"></p>\n<p>按照如下提示，选择项设置的<strong>协议插件</strong>，默然的是origin（支持SS客户端，不推荐），我们选择SSR客户端的协议插件：3</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/4.png\" alt=\"\"></p>\n<p>按照如下提示，选择项设置的<strong>混淆插件</strong>，默然的是plain（支持SS客户端，不推荐），我们选择SSR客户端的混淆插件：6</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/5.png\" alt=\"\"></p>\n<p>按照如下提示，按任意键进行自动部署</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/6.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/7.png\" alt=\"\"></p>\n<p>上图表示部署成功。从上往下依次为SSR帐号的IP、端口、密码、协议插件、混淆插件和加密方式。</p>\n<p>最后可以重启服务器确保部署生效。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p>\n<p>这个脚本的图文演示就结束了，图中的IP仅作演示用，教程发布后会失效。有人想了，我以后有想修改密码或者端口的需求怎么办？这个脚本修改密码和端口不是很方便，需要把最初的部署代码重新输入一遍，即从头到尾部署一遍即可。</p>\n<p><strong>下面再分享第二个脚本，这个脚本装一遍即可，方便以后想修改密码、端口什么的，而且功能更多。</strong></p>\n<p>【第2个一键部署ssr代码】</p>\n<p>CentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本：</p>\n<p>yum -y install wget</p>\n<p>wget -N –no-check-certificate <a href=\"https://softs.fun/Bash/ssr.sh\" target=\"_blank\" rel=\"noopener\">https://softs.fun/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>\n<p>备用下载地址：</p>\n<p>yum -y install wget</p>\n<p>wget -N –no-check-certificate <a href=\"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>\n<p>———————————————————代码分割线————————————————</p>\n<p>复制上面的代码到VPS服务器里，安装脚本后，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png\" alt=\"\"></p>\n<p>如上图出现管理界面后，<strong>输入数字1来安装SSR服务端</strong>。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/9.png\" alt=\"\"></p>\n<p>根据上图提示，依次输入自己想设置的<strong>端口和密码</strong> (<strong>密码建议用字母，图中的密码只是作为演示用</strong>)，回车键用于确认</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/10.png\" alt=\"\"></p>\n<p>如上图，选择想设置的<strong>加密方式</strong>，比如10，按回车键确认</p>\n<p>接下来是选择<strong>协议插件</strong>，如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/12.png\" alt=\"\"></p>\n<p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端，可以根据需求进行选择，原则上不推荐使用SS客户端，演示选择n</p>\n<p>之后进行混淆插件的设置，如下面</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/13.png\" alt=\"\"></p>\n<p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png\" alt=\"\"></p>\n<p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png\" alt=\"\"></p>\n<p>耐心等待一会，出现下面的界面即部署完成：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/17.png\" alt=\"\"></p>\n<p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png\" alt=\"\"></p>\n<p><strong>第2个脚本的演示结束。</strong></p>\n<hr>\n<p><strong>第三步：一键加速VPS服务器</strong></p>\n<p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p>\n<p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p>\n<p>【谷歌BBR加速教程】</p>\n<p>yum -y install wget</p>\n<p>wget –no-check-certificate <a href=\"https://github.com/teddysun/across/raw/master/bbr.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/teddysun/across/raw/master/bbr.sh</a></p>\n<p>chmod +x bbr.sh</p>\n<p>./bbr.sh</p>\n<p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p>\n<p>演示开始，如图：</p>\n<p>复制并粘贴代码后，按回车键确认</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png\" alt=\"\"></p>\n<p>如下图提示，按任意键继续部署</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png\" alt=\"\"></p>\n<p>部署到上图这个位置的时候，等待3～6分钟</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png\" alt=\"\"></p>\n<p>最后输入y重启服务器或者手动输入代码reboot来确保加速生效。</p>\n<hr>\n<p>【SSR客户端下载】</p>\n<p>Windows SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z\" target=\"_blank\" rel=\"noopener\">备用下载地址</a></p>\n<p>MAC SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482\" target=\"_blank\" rel=\"noopener\">备用下载地址</a></p>\n<p><a href=\"https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr\" target=\"_blank\" rel=\"noopener\">Linux客户端一键安装配置使用脚本(使用方法见注释)</a> 或者采用图形界面的<a href=\"https://github.com/erguotou520/electron-ssr/releases\" target=\"_blank\" rel=\"noopener\">linux ssr客户端</a></p>\n<p>安卓 SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/shadowsocksr-android/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/GRWw7PbADrc#1c6c32f969e7f5d9\" target=\"_blank\" rel=\"noopener\">备用下载地址</a> </p>\n<p>苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，请用美区的appid账号来下载，网络上有申请国外appid的教程或者淘宝购买。</p>\n<p><strong>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/25.png\" alt=\"\"></p>\n<p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p>\n<p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择”全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）</p>\n<p>如果想国外网站走SSR代理，国内网站不走SSR代理，那么SSR客户端可以设置为”PAC模式“，但是此时浏览器要设置为系统代理才行。</p>\n<p><img src=\"https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png\" alt=\"ssr9000\"></p>\n<hr>\n<p><strong>常见问题参考解决方法</strong>：</p>\n<p>1、用了一段时间发现ssr账号用不了了？</p>\n<p>多半是被墙了，即ip失效。首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，很简单。vultr服务商是折算成小时计费，且开通和删除服务器非常方便（新服务器即新ip。大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供更换1次ip的服务，如果你买的是别家的vps，一定要了解是否能够更换ip，假如不能，那么万一你的ip不幸被墙，钱就打水漂了）。</p>\n<p>2、刚搭建好的ssr账号，ip能ping通，但是还是用不了？</p>\n<p>首选，排除杀毒软件的干扰，尤其是国产杀毒软件，包括但不限于360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即127.0.0.1 1080端口。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。</p>\n<p>3、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。</p>\n<p>4、小知识：vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。</p>\n<p>5、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般10美元的服务器可以同时支持100人在线使用。</p>\n<blockquote>\n<p>鸣谢参考教程：<a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a>  <a href=\"https://www.91yun.co/archives/5174\" target=\"_blank\" rel=\"noopener\">91yun</a>  <a href=\"https://doub.bid/ss-jc42/\" target=\"_blank\" rel=\"noopener\">doub.bid</a></p>\n</blockquote>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>原文地址：<a href=\"https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B\" target=\"_blank\" rel=\"noopener\">自建ssr服务器教程</a></strong></li>\n</ul>\n<p><strong>2017年10月31日对教程细节方面进行补充，方便新手。</strong></p>\n<hr>\n<p><strong>自建ss/ssr教程很简单，整个教程分三步</strong>：</p>\n<p>第一步：购买VPS服务器</p>\n<p>第二步：一键部署VPS服务器</p>\n<p>第三步：一键加速VPS服务器 （谷歌BBR加速，推荐）</p>\n<hr>\n<p><strong>第一步：购买VPS服务器</strong></p>\n<p>VPS服务器需要选择国外的，首选国际知名的vultr，速度不错、稳定且性价比高。</p>\n<p>vultr注册地址： <a href=\"http://www.vultr.com/?ref=7048874\" target=\"_blank\" rel=\"noopener\">http://www.vultr.com/?ref=7048874</a> （全球15个服务器位置可选，KVM框架） </p>\n<p>虽然是英文界面，但是现在的浏览器都有网页翻译功能，鼠标点击右键，选择网页翻译即可翻译成中文。</p>\n<p>注册并邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(<strong>2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右</strong>），使用paypal有信用卡即可。paypal注册地址：<a href=\"https://www.paypal.com\" target=\"_blank\" rel=\"noopener\">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）</p>\n<p>2.5美元/月的服务器配置信息：单核  512M内存  20G SSD硬盘   100M带宽   500G流量/月   </p>\n<p>5美元/月的服务器配置信息：单核   1G内存   25G SSD硬盘   100M带宽    1000G流量/月  </p>\n<p>10美元/月的服务器配置信息：单核  2G内存   40G SSD硬盘   100M带宽    2000G流量/月  </p>\n<p>20美元/月的服务器配置信息：2cpu  4G内存   60G SSD硬盘   100M带宽    3000G流量/月  </p>\n<p>40美元/月的服务器配置信息：4cpu  8G内存   100G SSD硬盘   100M带宽   4000G流量/月  </p>\n<p><strong>vultr实际上是折算成小时来计费的，比如服务器是5美元1个月，那么每小时收费为5/30/24=0.0069美元 会自动从账号中扣费，只要保证账号有钱即可。如果你部署的服务器实测后不理想，你可以把它删掉（destroy），重新换个地区的服务器来部署，很方便。温馨提醒：同样的服务器位置，不同的宽带类型和地区所搭建的账号的翻墙速度会不同，所以最好亲测一下。</strong></p>\n<p><strong>计费从你开通服务器开始算的，不管你有没有使用，即使服务器处于关机状态仍然会计费，如果你没有开通服务器就不算</strong>。比如你今天早上开通了服务器，但你有事情，晚上才部署，那么这段时间是会计费的。同理，如果你早上删掉服务器，第二天才开通新的服务器，那么这段时间是不会计费的。</p>\n<p>如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/pac2/master/pp100.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/pac2/master/pp101.png\" alt=\"\"></p>\n<p>购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)等，近期不推荐用洛杉矶和日本的服务器，因为这两个地区近期能够开到的好ip的可能性很低。<strong>推荐选择CentOS 6.X64位的系统（系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰ssr的正常连接！）</strong>。完成购买后，找到系统的密码记下来，部署服务器时需要用到。如图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B01.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B02.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B04.png\" alt=\"\"></p>\n<p><strong>默认是centos7系统，点击图中的CentOS几个字，会弹出centos6，然后选中它！vps操作系统不要选cento7，因为选它很可能会影响ssr的正常连接。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B05.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/crp_up/master/pac%E6%95%99%E7%A8%8B06.png\" alt=\"\"></p>\n<hr>\n<p><strong>第二步：部署VPS服务器</strong></p>\n<p>购买服务器后，需要部署一下。因为你买的是虚拟东西，而且又远在国外，我们需要一个叫Xshell的软件来远程部署。Xshell windows版下载地址：</p>\n<p><a href=\"https://nofile.io/f/eb5dUzYMQK4/Xshell_setup_wm.exe\" target=\"_blank\" rel=\"noopener\">国外云盘下载</a> 提取密码：666</p>\n<p><a href=\"http://rj.baidu.com/soft/detail/15201.html?ald\" target=\"_blank\" rel=\"noopener\">百度软件中心</a></p>\n<p>如果你是苹果电脑操作系统，请自行搜索并下载能远程连接vps服务器的软件的MAC版，关键词可以这样搜索“Mac OS X 平台有哪些好用的 SSH 客户端”</p>\n<hr>\n<p>部署教程：</p>\n<p>下载xshell软件并安装后，打开软件</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell11.png\" alt=\"\"></p>\n<p>选择文件，新建</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell12.png\" alt=\"\"></p>\n<p>随便取个名字，然后把你的服务器ip填上</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell13.png\" alt=\"\"></p>\n<p>连接国外ip即服务器时，软件会先后提醒你输入用户名和密码，用户名linux系统默认都是root，密码是购买服务器后的cent系统的密码。</p>\n<p><strong>如果开好了服务器，发现xshell死活连不上，多半是开的服务器ip被墙了，遇到这种情况，把服务器删掉，重新开个新的服务器即可，可以是同地区的也可以选择其它地区。</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell14.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/xshell15.png\" alt=\"\"></p>\n<p>连接成功后，会出现如上图所示，之后就可以复制粘贴代码部署了。</p>\n<p><strong>分享两个好用的代码，选择其中一个即可。建议两个脚本先大致都看一下功能,然后再选择。</strong></p>\n<p>【第1个一键部署ssr代码】</p>\n<p>yum -y install wget</p>\n<p>wget –no-check-certificate <a href=\"https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh</a></p>\n<p>chmod +x shadowsocksR.sh</p>\n<p>./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</p>\n<p>———————————————————代码分割线————————————————</p>\n<p>上面的代码总共有4行（显示5行），复制时要一起复制下来，以下脚本类似。如果要卸载直接输入命令：./shadowsocks-go.sh uninstall</p>\n<p><strong>演示开始：复制代码粘贴到vps服务器里，按回车键，进入部署。</strong></p>\n<p>按照如下提示，输入想设置的<strong>密码</strong>，按回车键进入下一步 (<strong>密码建议用字母，图中的密码只是作为演示用</strong>)</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/1.png\" alt=\"\"></p>\n<p>按照如下提示，输入想设置的<strong>端口</strong>（3～4位即可），按回车键进入下一步</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/2.png\" alt=\"\"></p>\n<p>按照如下提示，选择想设置的<strong>加密方式</strong>，括号里面是默认的加密方式，想设置默认的话直接按回车键。这里选择数字2（和默认一样）的aes-256-cfb的加密方式</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/3.png\" alt=\"\"></p>\n<p>按照如下提示，选择项设置的<strong>协议插件</strong>，默然的是origin（支持SS客户端，不推荐），我们选择SSR客户端的协议插件：3</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/4.png\" alt=\"\"></p>\n<p>按照如下提示，选择项设置的<strong>混淆插件</strong>，默然的是plain（支持SS客户端，不推荐），我们选择SSR客户端的混淆插件：6</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/5.png\" alt=\"\"></p>\n<p>按照如下提示，按任意键进行自动部署</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/6.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/7.png\" alt=\"\"></p>\n<p>上图表示部署成功。从上往下依次为SSR帐号的IP、端口、密码、协议插件、混淆插件和加密方式。</p>\n<p>最后可以重启服务器确保部署生效。重启需要在命令栏里输入reboot ，输入命令后稍微等待一会服务器就会自动重启，一般重启过程需要2～5分钟，重启过程中Xshell会自动断开连接，等VPS重启好后才可以用Xshell软件进行连接。如果部署过程中卡在某个位置超过10分钟，可以用xshell软件断开，然后重新连接你的ip，再复制代码进行部署。</p>\n<p>这个脚本的图文演示就结束了，图中的IP仅作演示用，教程发布后会失效。有人想了，我以后有想修改密码或者端口的需求怎么办？这个脚本修改密码和端口不是很方便，需要把最初的部署代码重新输入一遍，即从头到尾部署一遍即可。</p>\n<p><strong>下面再分享第二个脚本，这个脚本装一遍即可，方便以后想修改密码、端口什么的，而且功能更多。</strong></p>\n<p>【第2个一键部署ssr代码】</p>\n<p>CentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本：</p>\n<p>yum -y install wget</p>\n<p>wget -N –no-check-certificate <a href=\"https://softs.fun/Bash/ssr.sh\" target=\"_blank\" rel=\"noopener\">https://softs.fun/Bash/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>\n<p>备用下载地址：</p>\n<p>yum -y install wget</p>\n<p>wget -N –no-check-certificate <a href=\"https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh\" target=\"_blank\" rel=\"noopener\">https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh</a> &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</p>\n<p>———————————————————代码分割线————————————————</p>\n<p>复制上面的代码到VPS服务器里，安装脚本后，以后只需要运行这个快捷命令就可以出现下图的界面进行设置，快捷管理命令为：bash ssr.sh</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/8.png\" alt=\"\"></p>\n<p>如上图出现管理界面后，<strong>输入数字1来安装SSR服务端</strong>。如果输入1后不能进入下一步，那么请退出xshell，重新连接vps服务器，然后输入快捷管理命令bash ssr.sh 再尝试。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/9.png\" alt=\"\"></p>\n<p>根据上图提示，依次输入自己想设置的<strong>端口和密码</strong> (<strong>密码建议用字母，图中的密码只是作为演示用</strong>)，回车键用于确认</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/10.png\" alt=\"\"></p>\n<p>如上图，选择想设置的<strong>加密方式</strong>，比如10，按回车键确认</p>\n<p>接下来是选择<strong>协议插件</strong>，如下图：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/11.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/12.png\" alt=\"\"></p>\n<p>选择并确认后，会出现上图的界面，提示你是否选择兼容原版，这里的原版指的是SS客户端，可以根据需求进行选择，原则上不推荐使用SS客户端，演示选择n</p>\n<p>之后进行混淆插件的设置，如下面</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/13.png\" alt=\"\"></p>\n<p>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，即直接敲回车键。</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/14.png\" alt=\"\"></p>\n<p>之后代码就正式自动部署了，到下图所示的位置，提示你下载文件，输入：y</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/15.png\" alt=\"\"></p>\n<p>耐心等待一会，出现下面的界面即部署完成：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/16.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/17.png\" alt=\"\"></p>\n<p>根据上图就可以看到自己设置的SSR账号信息，包括IP、端口、密码、加密方式、协议插件、混淆插件。如果之后想修改账号信息，直接输入快捷管理命令：bash ssr.sh 进入管理界面，选择相应的数字来进行一键修改。例如：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/22.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/23.png\" alt=\"\"></p>\n<p><strong>第2个脚本的演示结束。</strong></p>\n<hr>\n<p><strong>第三步：一键加速VPS服务器</strong></p>\n<p>此加速教程为谷歌BBR加速,Vultr的服务器框架可以装BBR加速，加速后对速度的提升很明显，所以推荐部署加速脚本。该加速方法是开机自动启动，部署一次就可以了。</p>\n<p>按照第二步的步骤，连接服务器ip，登录成功后，在命令栏里粘贴以下代码：</p>\n<p>【谷歌BBR加速教程】</p>\n<p>yum -y install wget</p>\n<p>wget –no-check-certificate <a href=\"https://github.com/teddysun/across/raw/master/bbr.sh\" target=\"_blank\" rel=\"noopener\">https://github.com/teddysun/across/raw/master/bbr.sh</a></p>\n<p>chmod +x bbr.sh</p>\n<p>./bbr.sh</p>\n<p>把上面整个代码复制后粘贴进去，不动的时候按回车，然后耐心等待，最后重启vps服务器即可。</p>\n<p>演示开始，如图：</p>\n<p>复制并粘贴代码后，按回车键确认</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/18.png\" alt=\"\"></p>\n<p>如下图提示，按任意键继续部署</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/19.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/20.png\" alt=\"\"></p>\n<p>部署到上图这个位置的时候，等待3～6分钟</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/21.png\" alt=\"\"></p>\n<p>最后输入y重启服务器或者手动输入代码reboot来确保加速生效。</p>\n<hr>\n<p>【SSR客户端下载】</p>\n<p>Windows SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/6Jm7WJCyOVv/ShadowsocksR-4.7.0-win.7z\" target=\"_blank\" rel=\"noopener\">备用下载地址</a></p>\n<p>MAC SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/jgMWFwCBonU#ab0d3c3b6ac54482\" target=\"_blank\" rel=\"noopener\">备用下载地址</a></p>\n<p><a href=\"https://github.com/the0demiurge/CharlesScripts/blob/master/charles/bin/ssr\" target=\"_blank\" rel=\"noopener\">Linux客户端一键安装配置使用脚本(使用方法见注释)</a> 或者采用图形界面的<a href=\"https://github.com/erguotou520/electron-ssr/releases\" target=\"_blank\" rel=\"noopener\">linux ssr客户端</a></p>\n<p>安卓 SSR客户端 <a href=\"https://github.com/shadowsocksr-backup/shadowsocksr-android/releases\" target=\"_blank\" rel=\"noopener\">下载地址</a> <a href=\"https://nofile.io/f/GRWw7PbADrc#1c6c32f969e7f5d9\" target=\"_blank\" rel=\"noopener\">备用下载地址</a> </p>\n<p>苹果手机SSR客户端：Potatso Lite、Potatso、shadowrocket都可以作为SSR客户端，但这些软件目前已经在国内的app商店下架，请用美区的appid账号来下载，网络上有申请国外appid的教程或者淘宝购买。</p>\n<p><strong>有了账号后，打开SSR客户端，填上信息，这里以windows版的SSR客户端为例子</strong>：</p>\n<p><img src=\"https://raw.githubusercontent.com/Alvin9999/PAC/master/ss/25.png\" alt=\"\"></p>\n<p>在对应的位置，填上服务器ip、服务器端口、密码、加密方式、协议和混淆，最后将浏览器的代理设置为（http）127.0.0.1和1080即可。账号的端口号就是你自己设置的，而要上网的浏览器的端口号是1080，固定的，谷歌浏览器可以通过 SwitchyOmega 插件来设置。</p>\n<p>启动SSR客户端后，右键SSR客户端图标，选择第一个“系统代理模式”，里面有3个子选项，选择”全局模式“，之后就可以用浏览器设置好了的代理模式（http）127.0.0.1和1080翻墙，此模式下所有的网站都会走SSR代理。（适合新手）</p>\n<p>如果想国外网站走SSR代理，国内网站不走SSR代理，那么SSR客户端可以设置为”PAC模式“，但是此时浏览器要设置为系统代理才行。</p>\n<p><img src=\"https://user-images.githubusercontent.com/12132898/32225069-cfe6195a-be7e-11e7-99e0-e2fa98f93b1f.png\" alt=\"ssr9000\"></p>\n<hr>\n<p><strong>常见问题参考解决方法</strong>：</p>\n<p>1、用了一段时间发现ssr账号用不了了？</p>\n<p>多半是被墙了，即ip失效。首先ping一下自己的ip，看看能不能ping的通，ping不通那么就是ip被墙了，遇到这种情况重新部署一个新的服务器，新的服务器就是新的ip。关于怎么ping ip的方法，可以自行网上搜索，很简单。vultr服务商是折算成小时计费，且开通和删除服务器非常方便（新服务器即新ip。大多数vps服务商都没有这样的服务，一般的vps服务商可能会提供更换1次ip的服务，如果你买的是别家的vps，一定要了解是否能够更换ip，假如不能，那么万一你的ip不幸被墙，钱就打水漂了）。</p>\n<p>2、刚搭建好的ssr账号，ip能ping通，但是还是用不了？</p>\n<p>首选，排除杀毒软件的干扰，尤其是国产杀毒软件，包括但不限于360安全卫生、360杀毒软件、腾讯管家、金山卫生等。这些东西很容易干扰翻墙上网，如果你的电脑安装了这样的东西，建议至少翻墙时别用。其次，检查下SSR信息是否填写正确。浏览器的代理方式是否是ssr代理，即127.0.0.1 1080端口。如果以上条件都排除，还是用不了，那么可以更换端口、加密方式、协议、混淆，或者更换服务器位置。</p>\n<p>3、vps的服务器操作系统不要用的太高，太高可能会因为系统的防火墙问题导致搭建的SSR账号连不上，如果你用的centos系统，建议用centos6，不要用centos7。如果你前面不小心装了centos7系统，那么只能重装系统或者重新部署新的vps服务器。</p>\n<p>4、小知识：vultr服务商提供的vps服务器是单向流量计算，有的vps服务商是双向流量计算，单向流量计算对于用户来说更实惠。因为我们是在vps服务器上部署SSR服务端后，再用SSR客户端翻墙，所以SSR服务端就相当于中转，比如我们看一个视频，必然会产生流量，假如消耗流量80M，那么VPS服务器会产生上传80M和下载80M流量，vultr服务商只计算单向的80M流量。如果是双向计算流量，那么会计算为160M流量。</p>\n<p>5、如果你想把搭建的账号给多人使用，不用额外设置端口，因为一个账号就可以多人使用。一般10美元的服务器可以同时支持100人在线使用。</p>\n<blockquote>\n<p>鸣谢参考教程：<a href=\"https://teddysun.com/392.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a>  <a href=\"https://www.91yun.co/archives/5174\" target=\"_blank\" rel=\"noopener\">91yun</a>  <a href=\"https://doub.bid/ss-jc42/\" target=\"_blank\" rel=\"noopener\">doub.bid</a></p>\n</blockquote>\n<hr>\n"},{"title":"记今天-收到来自amazon的offer","date":"2017-05-24T15:38:05.000Z","_content":"\n# 前因后果\n  今天很开心，也很惊讶，因为下午在freecodecamp学习的时候收到一个邮件，让我惊喜万分，打开一开是来自amazon的offer，我激动了很久啊，一开始以为是诈骗邮件，去google查了一下，这个邮箱是真的，是真的一个amazon人事部给我发的邮件，好了~先缓一缓。\n### 附上截图：\n  ![](http://op4e089f0.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170524234404.jpg)\n  \n  \n邮件内容大概就是说他在我的github看到我的项目，觉得我有能力胜任他们的工作需求，想请我参加他们在北京召办的private面试会议，但是具体工作地点是在外国。<br>\n\n我这么激动呢是因为有人欣赏我了，我很开心，但是这个job我不能接，我目前还是一名大二学生，我觉得目前最重要的还是完成学业继续学习提升自己，对于工作机遇我觉得以后应该还会有吧。而且我目前的水平我并不认为自己可以胜任这份工作，我还需要继续提升自己，所以我趁睡觉前用google translate加上自己蹩脚的四级英语勉勉强强写了一封礼貌的拒绝信，希望那位先生心里会好受点吧\n\n## 最后说一下\n我在临睡觉前写这么一篇文章也是主要纪念一下自己今天收到offer信的激动啊，还有我最近在freecodecamp学习编程语言，喜欢的小伙伴也可以加入,github搜freecodecampcn就可以了。\n\n- 最后附上一张《缘之空》的穹妹照做福利，不知道会不会被block掉\n献给绅士们\n![](http://op4e089f0.bkt.clouddn.com/1%20%282%29.jpg)","source":"_posts/记今天-收到来自amazon的offer.md","raw":"---\ntitle: 记今天-收到来自amazon的offer\ndate: 2017-05-24 23:38:05\ntags: [offer,note]\ncategories: note\n---\n\n# 前因后果\n  今天很开心，也很惊讶，因为下午在freecodecamp学习的时候收到一个邮件，让我惊喜万分，打开一开是来自amazon的offer，我激动了很久啊，一开始以为是诈骗邮件，去google查了一下，这个邮箱是真的，是真的一个amazon人事部给我发的邮件，好了~先缓一缓。\n### 附上截图：\n  ![](http://op4e089f0.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170524234404.jpg)\n  \n  \n邮件内容大概就是说他在我的github看到我的项目，觉得我有能力胜任他们的工作需求，想请我参加他们在北京召办的private面试会议，但是具体工作地点是在外国。<br>\n\n我这么激动呢是因为有人欣赏我了，我很开心，但是这个job我不能接，我目前还是一名大二学生，我觉得目前最重要的还是完成学业继续学习提升自己，对于工作机遇我觉得以后应该还会有吧。而且我目前的水平我并不认为自己可以胜任这份工作，我还需要继续提升自己，所以我趁睡觉前用google translate加上自己蹩脚的四级英语勉勉强强写了一封礼貌的拒绝信，希望那位先生心里会好受点吧\n\n## 最后说一下\n我在临睡觉前写这么一篇文章也是主要纪念一下自己今天收到offer信的激动啊，还有我最近在freecodecamp学习编程语言，喜欢的小伙伴也可以加入,github搜freecodecampcn就可以了。\n\n- 最后附上一张《缘之空》的穹妹照做福利，不知道会不会被block掉\n献给绅士们\n![](http://op4e089f0.bkt.clouddn.com/1%20%282%29.jpg)","slug":"记今天-收到来自amazon的offer","published":1,"updated":"2019-01-21T15:52:07.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc68001il0ona65xh81c","content":"<h1 id=\"前因后果\"><a href=\"#前因后果\" class=\"headerlink\" title=\"前因后果\"></a>前因后果</h1><p>  今天很开心，也很惊讶，因为下午在freecodecamp学习的时候收到一个邮件，让我惊喜万分，打开一开是来自amazon的offer，我激动了很久啊，一开始以为是诈骗邮件，去google查了一下，这个邮箱是真的，是真的一个amazon人事部给我发的邮件，好了~先缓一缓。</p>\n<h3 id=\"附上截图：\"><a href=\"#附上截图：\" class=\"headerlink\" title=\"附上截图：\"></a>附上截图：</h3><p>  <img src=\"http://op4e089f0.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170524234404.jpg\" alt=\"\"></p>\n<p>邮件内容大概就是说他在我的github看到我的项目，觉得我有能力胜任他们的工作需求，想请我参加他们在北京召办的private面试会议，但是具体工作地点是在外国。<br></p>\n<p>我这么激动呢是因为有人欣赏我了，我很开心，但是这个job我不能接，我目前还是一名大二学生，我觉得目前最重要的还是完成学业继续学习提升自己，对于工作机遇我觉得以后应该还会有吧。而且我目前的水平我并不认为自己可以胜任这份工作，我还需要继续提升自己，所以我趁睡觉前用google translate加上自己蹩脚的四级英语勉勉强强写了一封礼貌的拒绝信，希望那位先生心里会好受点吧</p>\n<h2 id=\"最后说一下\"><a href=\"#最后说一下\" class=\"headerlink\" title=\"最后说一下\"></a>最后说一下</h2><p>我在临睡觉前写这么一篇文章也是主要纪念一下自己今天收到offer信的激动啊，还有我最近在freecodecamp学习编程语言，喜欢的小伙伴也可以加入,github搜freecodecampcn就可以了。</p>\n<ul>\n<li>最后附上一张《缘之空》的穹妹照做福利，不知道会不会被block掉<br>献给绅士们<br><img src=\"http://op4e089f0.bkt.clouddn.com/1%20%282%29.jpg\" alt=\"\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前因后果\"><a href=\"#前因后果\" class=\"headerlink\" title=\"前因后果\"></a>前因后果</h1><p>  今天很开心，也很惊讶，因为下午在freecodecamp学习的时候收到一个邮件，让我惊喜万分，打开一开是来自amazon的offer，我激动了很久啊，一开始以为是诈骗邮件，去google查了一下，这个邮箱是真的，是真的一个amazon人事部给我发的邮件，好了~先缓一缓。</p>\n<h3 id=\"附上截图：\"><a href=\"#附上截图：\" class=\"headerlink\" title=\"附上截图：\"></a>附上截图：</h3><p>  <img src=\"http://op4e089f0.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20170524234404.jpg\" alt=\"\"></p>\n<p>邮件内容大概就是说他在我的github看到我的项目，觉得我有能力胜任他们的工作需求，想请我参加他们在北京召办的private面试会议，但是具体工作地点是在外国。<br></p>\n<p>我这么激动呢是因为有人欣赏我了，我很开心，但是这个job我不能接，我目前还是一名大二学生，我觉得目前最重要的还是完成学业继续学习提升自己，对于工作机遇我觉得以后应该还会有吧。而且我目前的水平我并不认为自己可以胜任这份工作，我还需要继续提升自己，所以我趁睡觉前用google translate加上自己蹩脚的四级英语勉勉强强写了一封礼貌的拒绝信，希望那位先生心里会好受点吧</p>\n<h2 id=\"最后说一下\"><a href=\"#最后说一下\" class=\"headerlink\" title=\"最后说一下\"></a>最后说一下</h2><p>我在临睡觉前写这么一篇文章也是主要纪念一下自己今天收到offer信的激动啊，还有我最近在freecodecamp学习编程语言，喜欢的小伙伴也可以加入,github搜freecodecampcn就可以了。</p>\n<ul>\n<li>最后附上一张《缘之空》的穹妹照做福利，不知道会不会被block掉<br>献给绅士们<br><img src=\"http://op4e089f0.bkt.clouddn.com/1%20%282%29.jpg\" alt=\"\"></li>\n</ul>\n"},{"title":"给编程初学者的免费RESTful API测试接口","date":"2019-08-11T14:30:32.000Z","_content":"原文地址：https://github.com/zhaoweih/Free-RESTful-API  \n\n# 前言\n\n受https://jsonplaceholder.typicode.com 项目启发，想要做一个免费的Restful API接口帮助编程初学者用来测试自己的程式，因为我当时刚开始学编程的时候就对没有免费的Restful API帮助深感苦恼，其实这个项目好几个星期前就想做了，苦于工作时间还有杂七杂八的事情导致一直搁置，所以现在打算一点一点来，先出一个小的版本，让大家试验，如果有任何问题可以发到我邮箱zhaoweihao.dev@gmail.com或者提issues。\n\n# 域名\n\n亚洲[新加坡服务器]: https://sg.zhaoweihao.icu/api   \n例如请求连接是/zoos，完整请求连接应该是https://sg.zhaoweihao.icu/api/zoos\n\n\n# 食用方法\n\n## 1.GET方法\n### 1.1列出所有动物园\n请求连接：  \n`/zoos`\n\n可添加参数：  \n`?limit=10`：指定返回记录的数量  \n`?offset=10`：指定返回记录的开始位置。  \n`?page=2&per_page=100`：指定第几页，以及每页的记录数。  \n`?sortby=name&order=asc`：指定返回结果按照哪个属性排序，以及排序顺序。  \n\n所有参数可以都添加，例如：  \n`/zoos?page=2&per_page=2&limit=1&offset=1`\n\n返回数据参考：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"查询所有动物园数据成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d32d3be52c99d0521292a40\",\n            \"name\": \"Guangzhou zoos1\",\n            \"location\": \"Guangzhou1\"\n        },\n        {\n            \"_id\": \"5d32d5cfe7214e067497d33b\",\n            \"name\": \"ShenZhen zoos1\",\n            \"location\": \"ShenZhen1\"\n        },\n        {\n            \"_id\": \"5d35c7e34c7fd837087d8a01\",\n            \"name\": \"ShenZhen zoos2\",\n            \"location\": \"ShenZhen2\"\n        },\n        ...\n        {\n            \"_id\": \"5d35c8154c7fd837087d8a09\",\n            \"name\": \"ShenZhen zoos10\",\n            \"location\": \"ShenZhen10\"\n        }\n    ]\n}\n```\n\n### 1.2获取某个指定动物园的信息\n请求连接：  \n`/zoos/ID`\n\n请求成功返回例子：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"查询动物园成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d35c8154c7fd837087d8a09\",\n            \"name\": \"ShenZhen zoos10\",\n            \"location\": \"ShenZhen10\"\n        }\n    ]\n}\n```\n\n## 2.POST方法\n### 2.1新建一个动物园\n请求连接：  \n`/zoos`\n\nBody参数：  \nname 动物园名字，例如ShenZhen zoo  \nlocation 动物园位置, 例如ShenZhen\n\n请求成功返回例子：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"添加动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos\",\n        \"location\": \"ShenZhen\",\n        \"_id\": \"5d500833225f965c0406bedc\"\n    }\n}\n```\n## 3.PUT方法\n### 3.1更新某个指定动物园的信息（提供该动物园的全部信息）\n请求连接：  \n`/zoos/ID`\n\nBody参数：  \nname 动物园名字，例如ShenZhen zoo11  \nlocation 动物园位置, 例如ShenZhen11\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"更新动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos11\",\n        \"location\": \"ShenZhen11\"\n    }\n}\n```\n\n## 4.PATCH方法\n### 4.1更新某个指定动物园的信息（提供该动物园的部分信息）\n请求连接：  \n`/zoos/ID`\n\nBody参数(可选，无需全部提供)：  \nname 动物园名字，例如ShenZhen zoo12  \nlocation 动物园位置, 例如ShenZhen12\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"更新动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos12\"\n    }\n}\n```\n\n## 5.DELETE方法\n### 5.1删除某个动物园\n请求连接：  \n`/zoos/ID`\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"删除数据成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d500833225f965c0406bedc\",\n            \"name\": \"ShenZhen zoos12\",\n            \"location\": \"ShenZhen11\"\n        }\n    ]\n}\n```\n\n\n\n# 参考\n\nRestful API规范参考阮老师的文章：http://www.ruanyifeng.com/blog/2014/05/restful_api.html\n\n# 程式架构\n- Nginx\n- Nodejs\n- Express.js\n- MongoDB\n\n# 最后\n这个只是第一个小版本，目前提供了常见的请求方法测试，后面会逐渐增加更多的功能并且把源代码开源。请期待！\n\n\n# 联系\n📮邮箱: zhaoweihao.dev@gmail.com\n\n\n\n\n\n","source":"_posts/给编程初学者的免费RESTful API测试接口.md","raw":"---\ntitle: '给编程初学者的免费RESTful API测试接口'\ndate: 2019-08-11 22:30:32\ntags: [restful,api,免费,测试]\ncategories: 测试\n---\n原文地址：https://github.com/zhaoweih/Free-RESTful-API  \n\n# 前言\n\n受https://jsonplaceholder.typicode.com 项目启发，想要做一个免费的Restful API接口帮助编程初学者用来测试自己的程式，因为我当时刚开始学编程的时候就对没有免费的Restful API帮助深感苦恼，其实这个项目好几个星期前就想做了，苦于工作时间还有杂七杂八的事情导致一直搁置，所以现在打算一点一点来，先出一个小的版本，让大家试验，如果有任何问题可以发到我邮箱zhaoweihao.dev@gmail.com或者提issues。\n\n# 域名\n\n亚洲[新加坡服务器]: https://sg.zhaoweihao.icu/api   \n例如请求连接是/zoos，完整请求连接应该是https://sg.zhaoweihao.icu/api/zoos\n\n\n# 食用方法\n\n## 1.GET方法\n### 1.1列出所有动物园\n请求连接：  \n`/zoos`\n\n可添加参数：  \n`?limit=10`：指定返回记录的数量  \n`?offset=10`：指定返回记录的开始位置。  \n`?page=2&per_page=100`：指定第几页，以及每页的记录数。  \n`?sortby=name&order=asc`：指定返回结果按照哪个属性排序，以及排序顺序。  \n\n所有参数可以都添加，例如：  \n`/zoos?page=2&per_page=2&limit=1&offset=1`\n\n返回数据参考：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"查询所有动物园数据成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d32d3be52c99d0521292a40\",\n            \"name\": \"Guangzhou zoos1\",\n            \"location\": \"Guangzhou1\"\n        },\n        {\n            \"_id\": \"5d32d5cfe7214e067497d33b\",\n            \"name\": \"ShenZhen zoos1\",\n            \"location\": \"ShenZhen1\"\n        },\n        {\n            \"_id\": \"5d35c7e34c7fd837087d8a01\",\n            \"name\": \"ShenZhen zoos2\",\n            \"location\": \"ShenZhen2\"\n        },\n        ...\n        {\n            \"_id\": \"5d35c8154c7fd837087d8a09\",\n            \"name\": \"ShenZhen zoos10\",\n            \"location\": \"ShenZhen10\"\n        }\n    ]\n}\n```\n\n### 1.2获取某个指定动物园的信息\n请求连接：  \n`/zoos/ID`\n\n请求成功返回例子：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"查询动物园成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d35c8154c7fd837087d8a09\",\n            \"name\": \"ShenZhen zoos10\",\n            \"location\": \"ShenZhen10\"\n        }\n    ]\n}\n```\n\n## 2.POST方法\n### 2.1新建一个动物园\n请求连接：  \n`/zoos`\n\nBody参数：  \nname 动物园名字，例如ShenZhen zoo  \nlocation 动物园位置, 例如ShenZhen\n\n请求成功返回例子：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"添加动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos\",\n        \"location\": \"ShenZhen\",\n        \"_id\": \"5d500833225f965c0406bedc\"\n    }\n}\n```\n## 3.PUT方法\n### 3.1更新某个指定动物园的信息（提供该动物园的全部信息）\n请求连接：  \n`/zoos/ID`\n\nBody参数：  \nname 动物园名字，例如ShenZhen zoo11  \nlocation 动物园位置, 例如ShenZhen11\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"更新动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos11\",\n        \"location\": \"ShenZhen11\"\n    }\n}\n```\n\n## 4.PATCH方法\n### 4.1更新某个指定动物园的信息（提供该动物园的部分信息）\n请求连接：  \n`/zoos/ID`\n\nBody参数(可选，无需全部提供)：  \nname 动物园名字，例如ShenZhen zoo12  \nlocation 动物园位置, 例如ShenZhen12\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"更新动物园成功\",\n    \"data\": {\n        \"name\": \"ShenZhen zoos12\"\n    }\n}\n```\n\n## 5.DELETE方法\n### 5.1删除某个动物园\n请求连接：  \n`/zoos/ID`\n\n请求成功返回示例：\n```json\n{\n    \"code\": 200,\n    \"msg\": \"删除数据成功\",\n    \"data\": [\n        {\n            \"_id\": \"5d500833225f965c0406bedc\",\n            \"name\": \"ShenZhen zoos12\",\n            \"location\": \"ShenZhen11\"\n        }\n    ]\n}\n```\n\n\n\n# 参考\n\nRestful API规范参考阮老师的文章：http://www.ruanyifeng.com/blog/2014/05/restful_api.html\n\n# 程式架构\n- Nginx\n- Nodejs\n- Express.js\n- MongoDB\n\n# 最后\n这个只是第一个小版本，目前提供了常见的请求方法测试，后面会逐渐增加更多的功能并且把源代码开源。请期待！\n\n\n# 联系\n📮邮箱: zhaoweihao.dev@gmail.com\n\n\n\n\n\n","slug":"给编程初学者的免费RESTful API测试接口","published":1,"updated":"2019-08-11T14:46:37.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc69001ll0on5ly0e8bd","content":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Free-RESTful-API\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Free-RESTful-API</a>  </p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>受<a href=\"https://jsonplaceholder.typicode.com\" target=\"_blank\" rel=\"noopener\">https://jsonplaceholder.typicode.com</a> 项目启发，想要做一个免费的Restful API接口帮助编程初学者用来测试自己的程式，因为我当时刚开始学编程的时候就对没有免费的Restful API帮助深感苦恼，其实这个项目好几个星期前就想做了，苦于工作时间还有杂七杂八的事情导致一直搁置，所以现在打算一点一点来，先出一个小的版本，让大家试验，如果有任何问题可以发到我邮箱<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a>或者提issues。</p>\n<h1 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h1><p>亚洲[新加坡服务器]: <a href=\"https://sg.zhaoweihao.icu/api\" target=\"_blank\" rel=\"noopener\">https://sg.zhaoweihao.icu/api</a><br>例如请求连接是/zoos，完整请求连接应该是<a href=\"https://sg.zhaoweihao.icu/api/zoos\" target=\"_blank\" rel=\"noopener\">https://sg.zhaoweihao.icu/api/zoos</a></p>\n<h1 id=\"食用方法\"><a href=\"#食用方法\" class=\"headerlink\" title=\"食用方法\"></a>食用方法</h1><h2 id=\"1-GET方法\"><a href=\"#1-GET方法\" class=\"headerlink\" title=\"1.GET方法\"></a>1.GET方法</h2><h3 id=\"1-1列出所有动物园\"><a href=\"#1-1列出所有动物园\" class=\"headerlink\" title=\"1.1列出所有动物园\"></a>1.1列出所有动物园</h3><p>请求连接：<br><code>/zoos</code></p>\n<p>可添加参数：<br><code>?limit=10</code>：指定返回记录的数量<br><code>?offset=10</code>：指定返回记录的开始位置。<br><code>?page=2&amp;per_page=100</code>：指定第几页，以及每页的记录数。<br><code>?sortby=name&amp;order=asc</code>：指定返回结果按照哪个属性排序，以及排序顺序。  </p>\n<p>所有参数可以都添加，例如：<br><code>/zoos?page=2&amp;per_page=2&amp;limit=1&amp;offset=1</code></p>\n<p>返回数据参考：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"查询所有动物园数据成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d32d3be52c99d0521292a40\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Guangzhou zoos1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"Guangzhou1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d32d5cfe7214e067497d33b\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c7e34c7fd837087d8a01\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos2\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c8154c7fd837087d8a09\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos10\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen10\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2获取某个指定动物园的信息\"><a href=\"#1-2获取某个指定动物园的信息\" class=\"headerlink\" title=\"1.2获取某个指定动物园的信息\"></a>1.2获取某个指定动物园的信息</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>请求成功返回例子：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"查询动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c8154c7fd837087d8a09\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos10\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen10\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-POST方法\"><a href=\"#2-POST方法\" class=\"headerlink\" title=\"2.POST方法\"></a>2.POST方法</h2><h3 id=\"2-1新建一个动物园\"><a href=\"#2-1新建一个动物园\" class=\"headerlink\" title=\"2.1新建一个动物园\"></a>2.1新建一个动物园</h3><p>请求连接：<br><code>/zoos</code></p>\n<p>Body参数：<br>name 动物园名字，例如ShenZhen zoo<br>location 动物园位置, 例如ShenZhen</p>\n<p>请求成功返回例子：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"添加动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d500833225f965c0406bedc\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-PUT方法\"><a href=\"#3-PUT方法\" class=\"headerlink\" title=\"3.PUT方法\"></a>3.PUT方法</h2><h3 id=\"3-1更新某个指定动物园的信息（提供该动物园的全部信息）\"><a href=\"#3-1更新某个指定动物园的信息（提供该动物园的全部信息）\" class=\"headerlink\" title=\"3.1更新某个指定动物园的信息（提供该动物园的全部信息）\"></a>3.1更新某个指定动物园的信息（提供该动物园的全部信息）</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>Body参数：<br>name 动物园名字，例如ShenZhen zoo11<br>location 动物园位置, 例如ShenZhen11</p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"更新动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos11\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen11\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-PATCH方法\"><a href=\"#4-PATCH方法\" class=\"headerlink\" title=\"4.PATCH方法\"></a>4.PATCH方法</h2><h3 id=\"4-1更新某个指定动物园的信息（提供该动物园的部分信息）\"><a href=\"#4-1更新某个指定动物园的信息（提供该动物园的部分信息）\" class=\"headerlink\" title=\"4.1更新某个指定动物园的信息（提供该动物园的部分信息）\"></a>4.1更新某个指定动物园的信息（提供该动物园的部分信息）</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>Body参数(可选，无需全部提供)：<br>name 动物园名字，例如ShenZhen zoo12<br>location 动物园位置, 例如ShenZhen12</p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"更新动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos12\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-DELETE方法\"><a href=\"#5-DELETE方法\" class=\"headerlink\" title=\"5.DELETE方法\"></a>5.DELETE方法</h2><h3 id=\"5-1删除某个动物园\"><a href=\"#5-1删除某个动物园\" class=\"headerlink\" title=\"5.1删除某个动物园\"></a>5.1删除某个动物园</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"删除数据成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d500833225f965c0406bedc\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos12\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen11\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>Restful API规范参考阮老师的文章：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>\n<h1 id=\"程式架构\"><a href=\"#程式架构\" class=\"headerlink\" title=\"程式架构\"></a>程式架构</h1><ul>\n<li>Nginx</li>\n<li>Nodejs</li>\n<li>Express.js</li>\n<li>MongoDB</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这个只是第一个小版本，目前提供了常见的请求方法测试，后面会逐渐增加更多的功能并且把源代码开源。请期待！</p>\n<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p>📮邮箱: <a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>原文地址：<a href=\"https://github.com/zhaoweih/Free-RESTful-API\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/Free-RESTful-API</a>  </p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>受<a href=\"https://jsonplaceholder.typicode.com\" target=\"_blank\" rel=\"noopener\">https://jsonplaceholder.typicode.com</a> 项目启发，想要做一个免费的Restful API接口帮助编程初学者用来测试自己的程式，因为我当时刚开始学编程的时候就对没有免费的Restful API帮助深感苦恼，其实这个项目好几个星期前就想做了，苦于工作时间还有杂七杂八的事情导致一直搁置，所以现在打算一点一点来，先出一个小的版本，让大家试验，如果有任何问题可以发到我邮箱<a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a>或者提issues。</p>\n<h1 id=\"域名\"><a href=\"#域名\" class=\"headerlink\" title=\"域名\"></a>域名</h1><p>亚洲[新加坡服务器]: <a href=\"https://sg.zhaoweihao.icu/api\" target=\"_blank\" rel=\"noopener\">https://sg.zhaoweihao.icu/api</a><br>例如请求连接是/zoos，完整请求连接应该是<a href=\"https://sg.zhaoweihao.icu/api/zoos\" target=\"_blank\" rel=\"noopener\">https://sg.zhaoweihao.icu/api/zoos</a></p>\n<h1 id=\"食用方法\"><a href=\"#食用方法\" class=\"headerlink\" title=\"食用方法\"></a>食用方法</h1><h2 id=\"1-GET方法\"><a href=\"#1-GET方法\" class=\"headerlink\" title=\"1.GET方法\"></a>1.GET方法</h2><h3 id=\"1-1列出所有动物园\"><a href=\"#1-1列出所有动物园\" class=\"headerlink\" title=\"1.1列出所有动物园\"></a>1.1列出所有动物园</h3><p>请求连接：<br><code>/zoos</code></p>\n<p>可添加参数：<br><code>?limit=10</code>：指定返回记录的数量<br><code>?offset=10</code>：指定返回记录的开始位置。<br><code>?page=2&amp;per_page=100</code>：指定第几页，以及每页的记录数。<br><code>?sortby=name&amp;order=asc</code>：指定返回结果按照哪个属性排序，以及排序顺序。  </p>\n<p>所有参数可以都添加，例如：<br><code>/zoos?page=2&amp;per_page=2&amp;limit=1&amp;offset=1</code></p>\n<p>返回数据参考：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"查询所有动物园数据成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d32d3be52c99d0521292a40\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"Guangzhou zoos1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"Guangzhou1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d32d5cfe7214e067497d33b\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos1\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen1\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c7e34c7fd837087d8a01\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos2\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen2\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c8154c7fd837087d8a09\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos10\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen10\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2获取某个指定动物园的信息\"><a href=\"#1-2获取某个指定动物园的信息\" class=\"headerlink\" title=\"1.2获取某个指定动物园的信息\"></a>1.2获取某个指定动物园的信息</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>请求成功返回例子：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"查询动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d35c8154c7fd837087d8a09\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos10\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen10\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-POST方法\"><a href=\"#2-POST方法\" class=\"headerlink\" title=\"2.POST方法\"></a>2.POST方法</h2><h3 id=\"2-1新建一个动物园\"><a href=\"#2-1新建一个动物园\" class=\"headerlink\" title=\"2.1新建一个动物园\"></a>2.1新建一个动物园</h3><p>请求连接：<br><code>/zoos</code></p>\n<p>Body参数：<br>name 动物园名字，例如ShenZhen zoo<br>location 动物园位置, 例如ShenZhen</p>\n<p>请求成功返回例子：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"添加动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d500833225f965c0406bedc\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-PUT方法\"><a href=\"#3-PUT方法\" class=\"headerlink\" title=\"3.PUT方法\"></a>3.PUT方法</h2><h3 id=\"3-1更新某个指定动物园的信息（提供该动物园的全部信息）\"><a href=\"#3-1更新某个指定动物园的信息（提供该动物园的全部信息）\" class=\"headerlink\" title=\"3.1更新某个指定动物园的信息（提供该动物园的全部信息）\"></a>3.1更新某个指定动物园的信息（提供该动物园的全部信息）</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>Body参数：<br>name 动物园名字，例如ShenZhen zoo11<br>location 动物园位置, 例如ShenZhen11</p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"更新动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos11\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen11\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-PATCH方法\"><a href=\"#4-PATCH方法\" class=\"headerlink\" title=\"4.PATCH方法\"></a>4.PATCH方法</h2><h3 id=\"4-1更新某个指定动物园的信息（提供该动物园的部分信息）\"><a href=\"#4-1更新某个指定动物园的信息（提供该动物园的部分信息）\" class=\"headerlink\" title=\"4.1更新某个指定动物园的信息（提供该动物园的部分信息）\"></a>4.1更新某个指定动物园的信息（提供该动物园的部分信息）</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>Body参数(可选，无需全部提供)：<br>name 动物园名字，例如ShenZhen zoo12<br>location 动物园位置, 例如ShenZhen12</p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"更新动物园成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos12\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-DELETE方法\"><a href=\"#5-DELETE方法\" class=\"headerlink\" title=\"5.DELETE方法\"></a>5.DELETE方法</h2><h3 id=\"5-1删除某个动物园\"><a href=\"#5-1删除某个动物园\" class=\"headerlink\" title=\"5.1删除某个动物园\"></a>5.1删除某个动物园</h3><p>请求连接：<br><code>/zoos/ID</code></p>\n<p>请求成功返回示例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"code\"</span>: <span class=\"number\">200</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"msg\"</span>: <span class=\"string\">\"删除数据成功\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"data\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"_id\"</span>: <span class=\"string\">\"5d500833225f965c0406bedc\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ShenZhen zoos12\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"location\"</span>: <span class=\"string\">\"ShenZhen11\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p>Restful API规范参考阮老师的文章：<a href=\"http://www.ruanyifeng.com/blog/2014/05/restful_api.html\" target=\"_blank\" rel=\"noopener\">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p>\n<h1 id=\"程式架构\"><a href=\"#程式架构\" class=\"headerlink\" title=\"程式架构\"></a>程式架构</h1><ul>\n<li>Nginx</li>\n<li>Nodejs</li>\n<li>Express.js</li>\n<li>MongoDB</li>\n</ul>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>这个只是第一个小版本，目前提供了常见的请求方法测试，后面会逐渐增加更多的功能并且把源代码开源。请期待！</p>\n<h1 id=\"联系\"><a href=\"#联系\" class=\"headerlink\" title=\"联系\"></a>联系</h1><p>📮邮箱: <a href=\"mailto:zhaoweihao.dev@gmail.com\">zhaoweihao.dev@gmail.com</a></p>\n"},{"title":"记录一下自己微信小游戏跳一跳被清零","date":"2018-01-02T10:11:32.000Z","_content":"# 全过程\n不知道大家有没有玩过微信6.6.1版本新出的一个小游戏——跳一跳，我基本是29日当晚更新就开始玩了，玩的不亦乐乎啊，由于我是很早玩，基本称霸好友榜榜首一段时间，记得最高当时是250多。于是玩的累了的时候想着有没有脚本可以辅助着玩呢，立马上去github搜了下，果然有，一个大佬用python语言写了个脚本可以用来玩跳一跳\n\n项目地址在这里：https://github.com/wangshub/wechat_jump_game\n\n话说我当时clone这个项目时star数才200多，现在都快5K了，称霸weekly榜单几天了（不知道老外在weekly榜单看到这个有什么想法）。废话不多说，clone之后放进pycharm里面，因为我之前学过一点儿python，所以配置好了环境了，按照教程把依赖安装了（建议用国内pip镜像：https://www.cnblogs.com/microman/p/6107879.html ），发现还是不能运行，看了下是wechat_jump.py需要python 2.7，赶紧下载了python2.7，一切就绪，打开：\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E6%88%AA%E5%9B%BE20171230014110.png)\n\n当时项目还不完善，有点偏位，我自己调了下，然后每次都能跳中中心点（原来中心点最高+32分），最后玩到了2000+：\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E5%9B%BE%E7%89%8720171230114100.png)\n第二天中午发现被微信清零了，当时去项目issues里发现还没有清零的，很迷惑，微信怎么知道我用脚本了，一个小游戏做的这么精致啊，结果到今天我还是0，无论怎么玩，多高分都只是自己能看到。周一清零后也还是不能玩。\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/Screenshot_20171231-122921.png)\n\n\n## 奉劝大家：不要刷太高分，不然只能自娱自乐了\n\n\n","source":"_posts/记录一下自己微信小游戏跳一跳被清零.md","raw":"---\ntitle: '记录一下自己微信小游戏跳一跳被清零'\ndate: 2018-01-02 18:11:32\ntags: [Android,微信,小游戏,跳一跳]\ncategories: 日常\n---\n# 全过程\n不知道大家有没有玩过微信6.6.1版本新出的一个小游戏——跳一跳，我基本是29日当晚更新就开始玩了，玩的不亦乐乎啊，由于我是很早玩，基本称霸好友榜榜首一段时间，记得最高当时是250多。于是玩的累了的时候想着有没有脚本可以辅助着玩呢，立马上去github搜了下，果然有，一个大佬用python语言写了个脚本可以用来玩跳一跳\n\n项目地址在这里：https://github.com/wangshub/wechat_jump_game\n\n话说我当时clone这个项目时star数才200多，现在都快5K了，称霸weekly榜单几天了（不知道老外在weekly榜单看到这个有什么想法）。废话不多说，clone之后放进pycharm里面，因为我之前学过一点儿python，所以配置好了环境了，按照教程把依赖安装了（建议用国内pip镜像：https://www.cnblogs.com/microman/p/6107879.html ），发现还是不能运行，看了下是wechat_jump.py需要python 2.7，赶紧下载了python2.7，一切就绪，打开：\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E6%88%AA%E5%9B%BE20171230014110.png)\n\n当时项目还不完善，有点偏位，我自己调了下，然后每次都能跳中中心点（原来中心点最高+32分），最后玩到了2000+：\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E5%9B%BE%E7%89%8720171230114100.png)\n第二天中午发现被微信清零了，当时去项目issues里发现还没有清零的，很迷惑，微信怎么知道我用脚本了，一个小游戏做的这么精致啊，结果到今天我还是0，无论怎么玩，多高分都只是自己能看到。周一清零后也还是不能玩。\n![](http://op4e089f0.bkt.clouddn.com/blog/20180102/Screenshot_20171231-122921.png)\n\n\n## 奉劝大家：不要刷太高分，不然只能自娱自乐了\n\n\n","slug":"记录一下自己微信小游戏跳一跳被清零","published":1,"updated":"2019-01-21T15:52:07.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc6b001ol0on4wl47xfo","content":"<h1 id=\"全过程\"><a href=\"#全过程\" class=\"headerlink\" title=\"全过程\"></a>全过程</h1><p>不知道大家有没有玩过微信6.6.1版本新出的一个小游戏——跳一跳，我基本是29日当晚更新就开始玩了，玩的不亦乐乎啊，由于我是很早玩，基本称霸好友榜榜首一段时间，记得最高当时是250多。于是玩的累了的时候想着有没有脚本可以辅助着玩呢，立马上去github搜了下，果然有，一个大佬用python语言写了个脚本可以用来玩跳一跳</p>\n<p>项目地址在这里：<a href=\"https://github.com/wangshub/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">https://github.com/wangshub/wechat_jump_game</a></p>\n<p>话说我当时clone这个项目时star数才200多，现在都快5K了，称霸weekly榜单几天了（不知道老外在weekly榜单看到这个有什么想法）。废话不多说，clone之后放进pycharm里面，因为我之前学过一点儿python，所以配置好了环境了，按照教程把依赖安装了（建议用国内pip镜像：<a href=\"https://www.cnblogs.com/microman/p/6107879.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/microman/p/6107879.html</a> ），发现还是不能运行，看了下是wechat_jump.py需要python 2.7，赶紧下载了python2.7，一切就绪，打开：<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E6%88%AA%E5%9B%BE20171230014110.png\" alt=\"\"></p>\n<p>当时项目还不完善，有点偏位，我自己调了下，然后每次都能跳中中心点（原来中心点最高+32分），最后玩到了2000+：<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E5%9B%BE%E7%89%8720171230114100.png\" alt=\"\"><br>第二天中午发现被微信清零了，当时去项目issues里发现还没有清零的，很迷惑，微信怎么知道我用脚本了，一个小游戏做的这么精致啊，结果到今天我还是0，无论怎么玩，多高分都只是自己能看到。周一清零后也还是不能玩。<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/Screenshot_20171231-122921.png\" alt=\"\"></p>\n<h2 id=\"奉劝大家：不要刷太高分，不然只能自娱自乐了\"><a href=\"#奉劝大家：不要刷太高分，不然只能自娱自乐了\" class=\"headerlink\" title=\"奉劝大家：不要刷太高分，不然只能自娱自乐了\"></a>奉劝大家：不要刷太高分，不然只能自娱自乐了</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"全过程\"><a href=\"#全过程\" class=\"headerlink\" title=\"全过程\"></a>全过程</h1><p>不知道大家有没有玩过微信6.6.1版本新出的一个小游戏——跳一跳，我基本是29日当晚更新就开始玩了，玩的不亦乐乎啊，由于我是很早玩，基本称霸好友榜榜首一段时间，记得最高当时是250多。于是玩的累了的时候想着有没有脚本可以辅助着玩呢，立马上去github搜了下，果然有，一个大佬用python语言写了个脚本可以用来玩跳一跳</p>\n<p>项目地址在这里：<a href=\"https://github.com/wangshub/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">https://github.com/wangshub/wechat_jump_game</a></p>\n<p>话说我当时clone这个项目时star数才200多，现在都快5K了，称霸weekly榜单几天了（不知道老外在weekly榜单看到这个有什么想法）。废话不多说，clone之后放进pycharm里面，因为我之前学过一点儿python，所以配置好了环境了，按照教程把依赖安装了（建议用国内pip镜像：<a href=\"https://www.cnblogs.com/microman/p/6107879.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/microman/p/6107879.html</a> ），发现还是不能运行，看了下是wechat_jump.py需要python 2.7，赶紧下载了python2.7，一切就绪，打开：<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E6%88%AA%E5%9B%BE20171230014110.png\" alt=\"\"></p>\n<p>当时项目还不完善，有点偏位，我自己调了下，然后每次都能跳中中心点（原来中心点最高+32分），最后玩到了2000+：<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/TIM%E5%9B%BE%E7%89%8720171230114100.png\" alt=\"\"><br>第二天中午发现被微信清零了，当时去项目issues里发现还没有清零的，很迷惑，微信怎么知道我用脚本了，一个小游戏做的这么精致啊，结果到今天我还是0，无论怎么玩，多高分都只是自己能看到。周一清零后也还是不能玩。<br><img src=\"http://op4e089f0.bkt.clouddn.com/blog/20180102/Screenshot_20171231-122921.png\" alt=\"\"></p>\n<h2 id=\"奉劝大家：不要刷太高分，不然只能自娱自乐了\"><a href=\"#奉劝大家：不要刷太高分，不然只能自娱自乐了\" class=\"headerlink\" title=\"奉劝大家：不要刷太高分，不然只能自娱自乐了\"></a>奉劝大家：不要刷太高分，不然只能自娱自乐了</h2>"},{"title":"Android复习篇-四大组件之Activity","date":"2018-06-17T10:11:32.000Z","_content":"\n\n今天花点时间重新看了下郭大的《第一行代码第二版》中四大组件，复习了下四大组件的基础知识，顺便做做笔记\n\n## 四大组件之Activity\n活动其实最基础的就是生命周期（Life Cycle），一开始学习时感受不到生命周期的意义，后面做的项目越来越多的时候就体会到生命周期的意义了，\n也借这个篇幅说说Activity生命周期和最佳实践，说生命周期最好就是实践得真知了，具体什么时候什么方法被回调，最好亲身体验一遍。\n\n### 生命周期\n\n#### 完全遮挡\n\n1. 当第一个Activity第一次启动会依次执行 onCreate()、onStart()、onResume()。\n\n2. 启动第二个Activity时完全遮挡第一个，第一个会执行onPause()、onStop()。\n\n3. 按下Back键回到第一个，第一个会执行onRestart()、onStart()、onResume()。\n\n#### 未完全遮挡\n\n1. 第一个Activity启动后，弹出一个对话框，第一个会执行onPause()。\n\n2. 对话框消失后，第一个会执行onResume()。\n\n#### 退出\n\n1. 第一个Activity点击返回键退出程序，会执行onPause()、onStop()、onDestroy()。\n\n\n具体代码可看这里：https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest\n\n### 活动被回收前保存数据\nonSaveInstanceState()方法可以保证在活动被回收前一定会被调用\n```java\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n\tsuper.onSaveInstanceState(outState);\n\tString tempData = \"Something you just typed\";\n\toutState.putString(\"data_key\", tempData);\n}\n```\n\n修改MainActivity的onCreate()方法\n\n```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ...\n        if (savedInstanceState != null) {\n        \t// 获取Activity被回收前的数据\n        \tString tempData = savedInstanceState.getString(\"data_key\");\n\n        }\n    }\n```\n\n### 活动的启动模式\n\n#### standard模式\n\n```java\nIntent intent = new Intent(FirstActivity.this, FirstActivity.class);\nstartActivity(intent);\n```\n\nFirstActivity -> FirstActivity -> FirstActivity \n\n每次点击会创建新的FirstActivity实例。\n\n#### singleTop模式\n\n##### 处于栈顶\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n            android:name=\".FirstActivity\"\n            android:label=\"This is FirstActivity\"\n            android:launchMode=\"singleTop\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n```\n\nFirstActivity\n\n当FirstActivity处于栈顶，每次点击都只会有一个FirstActivity实例。\n\n##### 处于非栈顶\n\nFirstActivity.java\n\n```java\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class);\nstartActivity(intent);\n```\n\nSecondActivity.java\n\n```java\nIntent intent = new Intent(SecondActivity.this, FirstActivity.class);\nstartActivity(intent);\n```\n\n整个流程 FirstActivity -> SecondActivity -> FirstActivity。\n\n当FirstActivity不是处于栈顶，点击会创建一个新的实例。\n\n\n#### singleTask模式\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n           ...\n            android:launchMode=\"singleTask\">\n           ...\n        </activity>\n```\n\nFirstActivity -> SecondActivity \n\n当SecondActivity要启动FirstActivity会发现栈中存在FirstActivity实例，所以会导致SecondActivity出栈，FirstActivity重新回到栈顶\n\n#### singleInstance模式\n\n此时有FirstActivity 、 SecondActivity和ThirdActivity三个Activity。\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n            android:name=\".SecondActivity\"\n            android:launchMode=\"singleInstance\">\n           ...\n        </activity>\n```\n\nAcitivity启动时打印各个Activity的栈ID。\n\nFirstActivity -> SecondActivity -> ThirdActivity\n\nFirstActivity ID 和 ThirdActivity ID相同，而SecondActivity ID不同。\n\n这时候按返回键退出栈\n\nThirdActivity -> FirstActivity -> SecondActivity\n\n正常应该是第三个会回到第二个再回到第一个，这里是第三个到第一个，再到第二个。\n\n是因为第三个和第一个栈ID相同，第三个退出了第一个到栈顶，而第二个属于另外的栈，所以第一个推出后再到另外的栈第二个到栈顶，再按退出就会退出程序。\n\n\n-- 待更新(先睡觉了)\n","source":"_posts/Android复习篇-四大组件之Activity.md","raw":"---\ntitle: 'Android复习篇-四大组件之Activity'\ndate: 2018-06-17 18:11:32\ntags: [Android]\ncategories: Android\n---\n\n\n今天花点时间重新看了下郭大的《第一行代码第二版》中四大组件，复习了下四大组件的基础知识，顺便做做笔记\n\n## 四大组件之Activity\n活动其实最基础的就是生命周期（Life Cycle），一开始学习时感受不到生命周期的意义，后面做的项目越来越多的时候就体会到生命周期的意义了，\n也借这个篇幅说说Activity生命周期和最佳实践，说生命周期最好就是实践得真知了，具体什么时候什么方法被回调，最好亲身体验一遍。\n\n### 生命周期\n\n#### 完全遮挡\n\n1. 当第一个Activity第一次启动会依次执行 onCreate()、onStart()、onResume()。\n\n2. 启动第二个Activity时完全遮挡第一个，第一个会执行onPause()、onStop()。\n\n3. 按下Back键回到第一个，第一个会执行onRestart()、onStart()、onResume()。\n\n#### 未完全遮挡\n\n1. 第一个Activity启动后，弹出一个对话框，第一个会执行onPause()。\n\n2. 对话框消失后，第一个会执行onResume()。\n\n#### 退出\n\n1. 第一个Activity点击返回键退出程序，会执行onPause()、onStop()、onDestroy()。\n\n\n具体代码可看这里：https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest\n\n### 活动被回收前保存数据\nonSaveInstanceState()方法可以保证在活动被回收前一定会被调用\n```java\n@Override\nprotected void onSaveInstanceState(Bundle outState) {\n\tsuper.onSaveInstanceState(outState);\n\tString tempData = \"Something you just typed\";\n\toutState.putString(\"data_key\", tempData);\n}\n```\n\n修改MainActivity的onCreate()方法\n\n```java\n@Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        ...\n        if (savedInstanceState != null) {\n        \t// 获取Activity被回收前的数据\n        \tString tempData = savedInstanceState.getString(\"data_key\");\n\n        }\n    }\n```\n\n### 活动的启动模式\n\n#### standard模式\n\n```java\nIntent intent = new Intent(FirstActivity.this, FirstActivity.class);\nstartActivity(intent);\n```\n\nFirstActivity -> FirstActivity -> FirstActivity \n\n每次点击会创建新的FirstActivity实例。\n\n#### singleTop模式\n\n##### 处于栈顶\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n            android:name=\".FirstActivity\"\n            android:label=\"This is FirstActivity\"\n            android:launchMode=\"singleTop\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n```\n\nFirstActivity\n\n当FirstActivity处于栈顶，每次点击都只会有一个FirstActivity实例。\n\n##### 处于非栈顶\n\nFirstActivity.java\n\n```java\nIntent intent = new Intent(FirstActivity.this, SecondActivity.class);\nstartActivity(intent);\n```\n\nSecondActivity.java\n\n```java\nIntent intent = new Intent(SecondActivity.this, FirstActivity.class);\nstartActivity(intent);\n```\n\n整个流程 FirstActivity -> SecondActivity -> FirstActivity。\n\n当FirstActivity不是处于栈顶，点击会创建一个新的实例。\n\n\n#### singleTask模式\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n           ...\n            android:launchMode=\"singleTask\">\n           ...\n        </activity>\n```\n\nFirstActivity -> SecondActivity \n\n当SecondActivity要启动FirstActivity会发现栈中存在FirstActivity实例，所以会导致SecondActivity出栈，FirstActivity重新回到栈顶\n\n#### singleInstance模式\n\n此时有FirstActivity 、 SecondActivity和ThirdActivity三个Activity。\n\n修改AndroidManifest.xml\n\n```xml\n<activity\n            android:name=\".SecondActivity\"\n            android:launchMode=\"singleInstance\">\n           ...\n        </activity>\n```\n\nAcitivity启动时打印各个Activity的栈ID。\n\nFirstActivity -> SecondActivity -> ThirdActivity\n\nFirstActivity ID 和 ThirdActivity ID相同，而SecondActivity ID不同。\n\n这时候按返回键退出栈\n\nThirdActivity -> FirstActivity -> SecondActivity\n\n正常应该是第三个会回到第二个再回到第一个，这里是第三个到第一个，再到第二个。\n\n是因为第三个和第一个栈ID相同，第三个退出了第一个到栈顶，而第二个属于另外的栈，所以第一个推出后再到另外的栈第二个到栈顶，再按退出就会退出程序。\n\n\n-- 待更新(先睡觉了)\n","slug":"Android复习篇-四大组件之Activity","published":1,"updated":"2019-01-21T15:52:07.523Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck73eqc6c001ql0on58eq51gd","content":"<p>今天花点时间重新看了下郭大的《第一行代码第二版》中四大组件，复习了下四大组件的基础知识，顺便做做笔记</p>\n<h2 id=\"四大组件之Activity\"><a href=\"#四大组件之Activity\" class=\"headerlink\" title=\"四大组件之Activity\"></a>四大组件之Activity</h2><p>活动其实最基础的就是生命周期（Life Cycle），一开始学习时感受不到生命周期的意义，后面做的项目越来越多的时候就体会到生命周期的意义了，<br>也借这个篇幅说说Activity生命周期和最佳实践，说生命周期最好就是实践得真知了，具体什么时候什么方法被回调，最好亲身体验一遍。</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><h4 id=\"完全遮挡\"><a href=\"#完全遮挡\" class=\"headerlink\" title=\"完全遮挡\"></a>完全遮挡</h4><ol>\n<li><p>当第一个Activity第一次启动会依次执行 onCreate()、onStart()、onResume()。</p>\n</li>\n<li><p>启动第二个Activity时完全遮挡第一个，第一个会执行onPause()、onStop()。</p>\n</li>\n<li><p>按下Back键回到第一个，第一个会执行onRestart()、onStart()、onResume()。</p>\n</li>\n</ol>\n<h4 id=\"未完全遮挡\"><a href=\"#未完全遮挡\" class=\"headerlink\" title=\"未完全遮挡\"></a>未完全遮挡</h4><ol>\n<li><p>第一个Activity启动后，弹出一个对话框，第一个会执行onPause()。</p>\n</li>\n<li><p>对话框消失后，第一个会执行onResume()。</p>\n</li>\n</ol>\n<h4 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h4><ol>\n<li>第一个Activity点击返回键退出程序，会执行onPause()、onStop()、onDestroy()。</li>\n</ol>\n<p>具体代码可看这里：<a href=\"https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest</a></p>\n<h3 id=\"活动被回收前保存数据\"><a href=\"#活动被回收前保存数据\" class=\"headerlink\" title=\"活动被回收前保存数据\"></a>活动被回收前保存数据</h3><p>onSaveInstanceState()方法可以保证在活动被回收前一定会被调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">\tString tempData = <span class=\"string\">\"Something you just typed\"</span>;</span><br><span class=\"line\">\toutState.putString(<span class=\"string\">\"data_key\"</span>, tempData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改MainActivity的onCreate()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 获取Activity被回收前的数据</span></span><br><span class=\"line\">        \tString tempData = savedInstanceState.getString(<span class=\"string\">\"data_key\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h3><h4 id=\"standard模式\"><a href=\"#standard模式\" class=\"headerlink\" title=\"standard模式\"></a>standard模式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(FirstActivity.<span class=\"keyword\">this</span>, FirstActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity -&gt; FirstActivity -&gt; FirstActivity </p>\n<p>每次点击会创建新的FirstActivity实例。</p>\n<h4 id=\"singleTop模式\"><a href=\"#singleTop模式\" class=\"headerlink\" title=\"singleTop模式\"></a>singleTop模式</h4><h5 id=\"处于栈顶\"><a href=\"#处于栈顶\" class=\"headerlink\" title=\"处于栈顶\"></a>处于栈顶</h5><p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".FirstActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"This is FirstActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTop\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity</p>\n<p>当FirstActivity处于栈顶，每次点击都只会有一个FirstActivity实例。</p>\n<h5 id=\"处于非栈顶\"><a href=\"#处于非栈顶\" class=\"headerlink\" title=\"处于非栈顶\"></a>处于非栈顶</h5><p>FirstActivity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(FirstActivity.<span class=\"keyword\">this</span>, SecondActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>SecondActivity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(SecondActivity.<span class=\"keyword\">this</span>, FirstActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>整个流程 FirstActivity -&gt; SecondActivity -&gt; FirstActivity。</p>\n<p>当FirstActivity不是处于栈顶，点击会创建一个新的实例。</p>\n<h4 id=\"singleTask模式\"><a href=\"#singleTask模式\" class=\"headerlink\" title=\"singleTask模式\"></a>singleTask模式</h4><p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTask\"</span>&gt;</span></span><br><span class=\"line\">           ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity -&gt; SecondActivity </p>\n<p>当SecondActivity要启动FirstActivity会发现栈中存在FirstActivity实例，所以会导致SecondActivity出栈，FirstActivity重新回到栈顶</p>\n<h4 id=\"singleInstance模式\"><a href=\"#singleInstance模式\" class=\"headerlink\" title=\"singleInstance模式\"></a>singleInstance模式</h4><p>此时有FirstActivity 、 SecondActivity和ThirdActivity三个Activity。</p>\n<p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".SecondActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleInstance\"</span>&gt;</span></span><br><span class=\"line\">           ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Acitivity启动时打印各个Activity的栈ID。</p>\n<p>FirstActivity -&gt; SecondActivity -&gt; ThirdActivity</p>\n<p>FirstActivity ID 和 ThirdActivity ID相同，而SecondActivity ID不同。</p>\n<p>这时候按返回键退出栈</p>\n<p>ThirdActivity -&gt; FirstActivity -&gt; SecondActivity</p>\n<p>正常应该是第三个会回到第二个再回到第一个，这里是第三个到第一个，再到第二个。</p>\n<p>是因为第三个和第一个栈ID相同，第三个退出了第一个到栈顶，而第二个属于另外的栈，所以第一个推出后再到另外的栈第二个到栈顶，再按退出就会退出程序。</p>\n<p>– 待更新(先睡觉了)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天花点时间重新看了下郭大的《第一行代码第二版》中四大组件，复习了下四大组件的基础知识，顺便做做笔记</p>\n<h2 id=\"四大组件之Activity\"><a href=\"#四大组件之Activity\" class=\"headerlink\" title=\"四大组件之Activity\"></a>四大组件之Activity</h2><p>活动其实最基础的就是生命周期（Life Cycle），一开始学习时感受不到生命周期的意义，后面做的项目越来越多的时候就体会到生命周期的意义了，<br>也借这个篇幅说说Activity生命周期和最佳实践，说生命周期最好就是实践得真知了，具体什么时候什么方法被回调，最好亲身体验一遍。</p>\n<h3 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h3><h4 id=\"完全遮挡\"><a href=\"#完全遮挡\" class=\"headerlink\" title=\"完全遮挡\"></a>完全遮挡</h4><ol>\n<li><p>当第一个Activity第一次启动会依次执行 onCreate()、onStart()、onResume()。</p>\n</li>\n<li><p>启动第二个Activity时完全遮挡第一个，第一个会执行onPause()、onStop()。</p>\n</li>\n<li><p>按下Back键回到第一个，第一个会执行onRestart()、onStart()、onResume()。</p>\n</li>\n</ol>\n<h4 id=\"未完全遮挡\"><a href=\"#未完全遮挡\" class=\"headerlink\" title=\"未完全遮挡\"></a>未完全遮挡</h4><ol>\n<li><p>第一个Activity启动后，弹出一个对话框，第一个会执行onPause()。</p>\n</li>\n<li><p>对话框消失后，第一个会执行onResume()。</p>\n</li>\n</ol>\n<h4 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h4><ol>\n<li>第一个Activity点击返回键退出程序，会执行onPause()、onStop()、onDestroy()。</li>\n</ol>\n<p>具体代码可看这里：<a href=\"https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest\" target=\"_blank\" rel=\"noopener\">https://github.com/zhaoweih/booksource/tree/master/chapter2/ActivityLifeCycleTest</a></p>\n<h3 id=\"活动被回收前保存数据\"><a href=\"#活动被回收前保存数据\" class=\"headerlink\" title=\"活动被回收前保存数据\"></a>活动被回收前保存数据</h3><p>onSaveInstanceState()方法可以保证在活动被回收前一定会被调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onSaveInstanceState</span><span class=\"params\">(Bundle outState)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">super</span>.onSaveInstanceState(outState);</span><br><span class=\"line\">\tString tempData = <span class=\"string\">\"Something you just typed\"</span>;</span><br><span class=\"line\">\toutState.putString(<span class=\"string\">\"data_key\"</span>, tempData);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改MainActivity的onCreate()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (savedInstanceState != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        \t<span class=\"comment\">// 获取Activity被回收前的数据</span></span><br><span class=\"line\">        \tString tempData = savedInstanceState.getString(<span class=\"string\">\"data_key\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"活动的启动模式\"><a href=\"#活动的启动模式\" class=\"headerlink\" title=\"活动的启动模式\"></a>活动的启动模式</h3><h4 id=\"standard模式\"><a href=\"#standard模式\" class=\"headerlink\" title=\"standard模式\"></a>standard模式</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(FirstActivity.<span class=\"keyword\">this</span>, FirstActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity -&gt; FirstActivity -&gt; FirstActivity </p>\n<p>每次点击会创建新的FirstActivity实例。</p>\n<h4 id=\"singleTop模式\"><a href=\"#singleTop模式\" class=\"headerlink\" title=\"singleTop模式\"></a>singleTop模式</h4><h5 id=\"处于栈顶\"><a href=\"#处于栈顶\" class=\"headerlink\" title=\"处于栈顶\"></a>处于栈顶</h5><p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".FirstActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:label</span>=<span class=\"string\">\"This is FirstActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTop\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity</p>\n<p>当FirstActivity处于栈顶，每次点击都只会有一个FirstActivity实例。</p>\n<h5 id=\"处于非栈顶\"><a href=\"#处于非栈顶\" class=\"headerlink\" title=\"处于非栈顶\"></a>处于非栈顶</h5><p>FirstActivity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(FirstActivity.<span class=\"keyword\">this</span>, SecondActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>SecondActivity.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent(SecondActivity.<span class=\"keyword\">this</span>, FirstActivity<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure>\n\n<p>整个流程 FirstActivity -&gt; SecondActivity -&gt; FirstActivity。</p>\n<p>当FirstActivity不是处于栈顶，点击会创建一个新的实例。</p>\n<h4 id=\"singleTask模式\"><a href=\"#singleTask模式\" class=\"headerlink\" title=\"singleTask模式\"></a>singleTask模式</h4><p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">           <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleTask\"</span>&gt;</span></span><br><span class=\"line\">           ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>FirstActivity -&gt; SecondActivity </p>\n<p>当SecondActivity要启动FirstActivity会发现栈中存在FirstActivity实例，所以会导致SecondActivity出栈，FirstActivity重新回到栈顶</p>\n<h4 id=\"singleInstance模式\"><a href=\"#singleInstance模式\" class=\"headerlink\" title=\"singleInstance模式\"></a>singleInstance模式</h4><p>此时有FirstActivity 、 SecondActivity和ThirdActivity三个Activity。</p>\n<p>修改AndroidManifest.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:name</span>=<span class=\"string\">\".SecondActivity\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"singleInstance\"</span>&gt;</span></span><br><span class=\"line\">           ...</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>Acitivity启动时打印各个Activity的栈ID。</p>\n<p>FirstActivity -&gt; SecondActivity -&gt; ThirdActivity</p>\n<p>FirstActivity ID 和 ThirdActivity ID相同，而SecondActivity ID不同。</p>\n<p>这时候按返回键退出栈</p>\n<p>ThirdActivity -&gt; FirstActivity -&gt; SecondActivity</p>\n<p>正常应该是第三个会回到第二个再回到第一个，这里是第三个到第一个，再到第二个。</p>\n<p>是因为第三个和第一个栈ID相同，第三个退出了第一个到栈顶，而第二个属于另外的栈，所以第一个推出后再到另外的栈第二个到栈顶，再按退出就会退出程序。</p>\n<p>– 待更新(先睡觉了)</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck73eqc550000l0on76e27y83","category_id":"ck73eqc5d0004l0oncfglhpu9","_id":"ck73eqc5n000fl0on7nlu2sfi"},{"post_id":"ck73eqc5l000dl0on76ai4no7","category_id":"ck73eqc5d0004l0oncfglhpu9","_id":"ck73eqc5r000ll0on610gft4h"},{"post_id":"ck73eqc5b0002l0on1lvo86aj","category_id":"ck73eqc5k000bl0onf87dgkrz","_id":"ck73eqc5t000ql0onf163eky7"},{"post_id":"ck73eqc5m000el0onhnpyes1b","category_id":"ck73eqc5d0004l0oncfglhpu9","_id":"ck73eqc5v000tl0ondw640qhj"},{"post_id":"ck73eqc5p000il0on19fva8hc","category_id":"ck73eqc5s000nl0on12nb4w9m","_id":"ck73eqc600010l0ongv9kaock"},{"post_id":"ck73eqc5r000kl0on04is7uti","category_id":"ck73eqc5w000wl0ondxvd6vx8","_id":"ck73eqc630017l0on450v06mz"},{"post_id":"ck73eqc5t000pl0ona4py259d","category_id":"ck73eqc610011l0onfua9bjaf","_id":"ck73eqc66001dl0onhq6mdrz2"},{"post_id":"ck73eqc5u000sl0onf1rvctk9","category_id":"ck73eqc630018l0ondvfybg5x","_id":"ck73eqc69001kl0on7hrpgl46"},{"post_id":"ck73eqc68001il0ona65xh81c","category_id":"ck73eqc66001el0on6bsl1udl","_id":"ck73eqc6d001rl0onef4p7mnu"},{"post_id":"ck73eqc5v000vl0on1rogelej","category_id":"ck73eqc66001el0on6bsl1udl","_id":"ck73eqc6d001tl0onbaa01sdg"},{"post_id":"ck73eqc5y000zl0onheng28y3","category_id":"ck73eqc6a001ml0onh4032swt","_id":"ck73eqc6e001wl0on4usk8umv"},{"post_id":"ck73eqc6c001ql0on58eq51gd","category_id":"ck73eqc5d0004l0oncfglhpu9","_id":"ck73eqc6f001yl0on3xrb8x6n"},{"post_id":"ck73eqc610013l0onhz27hbpp","category_id":"ck73eqc6d001sl0ong2i97ua5","_id":"ck73eqc6f0021l0on7hzxayxc"},{"post_id":"ck73eqc64001al0on65wfha3h","category_id":"ck73eqc6a001ml0onh4032swt","_id":"ck73eqc6h0026l0on9cxp2s3q"},{"post_id":"ck73eqc65001bl0ondfw65a80","category_id":"ck73eqc6a001ml0onh4032swt","_id":"ck73eqc6h0029l0on23mbd5ui"},{"post_id":"ck73eqc69001ll0on5ly0e8bd","category_id":"ck73eqc6g0025l0oneq78bo5g","_id":"ck73eqc6i002dl0ong7dh4epo"},{"post_id":"ck73eqc6b001ol0on4wl47xfo","category_id":"ck73eqc6h002bl0on236429wt","_id":"ck73eqc6k002hl0on5knpe6dp"}],"PostTag":[{"post_id":"ck73eqc5l000dl0on76ai4no7","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc5o000hl0onbtu1hhse"},{"post_id":"ck73eqc550000l0on76e27y83","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc5q000jl0on5urqa1xd"},{"post_id":"ck73eqc550000l0on76e27y83","tag_id":"ck73eqc5k000cl0onh2sm4rdt","_id":"ck73eqc5t000ol0on7yfl5dfn"},{"post_id":"ck73eqc5m000el0onhnpyes1b","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc5u000rl0on066ifyqy"},{"post_id":"ck73eqc5b0002l0on1lvo86aj","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc610012l0on32zk526h"},{"post_id":"ck73eqc5b0002l0on1lvo86aj","tag_id":"ck73eqc5s000ml0ongs3r44vi","_id":"ck73eqc620014l0onee1k35pm"},{"post_id":"ck73eqc5b0002l0on1lvo86aj","tag_id":"ck73eqc5v000ul0onfxso60gy","_id":"ck73eqc640019l0on1wy24bjv"},{"post_id":"ck73eqc5f0006l0onc6liepm6","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc67001fl0onhd1eg7xb"},{"post_id":"ck73eqc5f0006l0onc6liepm6","tag_id":"ck73eqc620015l0oneeh1f1xq","_id":"ck73eqc68001hl0oncwi8d74w"},{"post_id":"ck73eqc5p000il0on19fva8hc","tag_id":"ck73eqc65001cl0onch6n9lcx","_id":"ck73eqc6a001nl0onhhroe13h"},{"post_id":"ck73eqc6c001ql0on58eq51gd","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc6e001ul0on5f1e145m"},{"post_id":"ck73eqc5r000kl0on04is7uti","tag_id":"ck73eqc68001jl0onb232fd99","_id":"ck73eqc6g0022l0on50p5d6kr"},{"post_id":"ck73eqc5r000kl0on04is7uti","tag_id":"ck73eqc6c001pl0on6mxag5hd","_id":"ck73eqc6g0023l0on10fogz7i"},{"post_id":"ck73eqc5r000kl0on04is7uti","tag_id":"ck73eqc6e001vl0onfc2s75gr","_id":"ck73eqc6h0027l0on1mhzaejq"},{"post_id":"ck73eqc5t000pl0ona4py259d","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc6h0028l0oncgsx4oqx"},{"post_id":"ck73eqc5t000pl0ona4py259d","tag_id":"ck73eqc6f001zl0on09i74fjj","_id":"ck73eqc6i002cl0on90bxhrc7"},{"post_id":"ck73eqc5u000sl0onf1rvctk9","tag_id":"ck73eqc6g0024l0ondho4guk6","_id":"ck73eqc6j002fl0one41th05t"},{"post_id":"ck73eqc5u000sl0onf1rvctk9","tag_id":"ck73eqc6h002al0onfqpngr8z","_id":"ck73eqc6j002gl0onbhf00zwc"},{"post_id":"ck73eqc5v000vl0on1rogelej","tag_id":"ck73eqc6i002el0on5sbvf5in","_id":"ck73eqc6k002jl0onaw6c5cs1"},{"post_id":"ck73eqc5y000zl0onheng28y3","tag_id":"ck73eqc6k002il0on68o7afob","_id":"ck73eqc6m002nl0on2ehkaugu"},{"post_id":"ck73eqc5y000zl0onheng28y3","tag_id":"ck73eqc6k002kl0on73bobu3f","_id":"ck73eqc6n002ol0on2lvnh74k"},{"post_id":"ck73eqc5y000zl0onheng28y3","tag_id":"ck73eqc6l002ll0ona5h79wal","_id":"ck73eqc6o002ql0on4zi46i8i"},{"post_id":"ck73eqc610013l0onhz27hbpp","tag_id":"ck73eqc6l002ml0on5pev9epv","_id":"ck73eqc6o002rl0on6r483adn"},{"post_id":"ck73eqc64001al0on65wfha3h","tag_id":"ck73eqc6k002il0on68o7afob","_id":"ck73eqc6p002vl0on4tkv1p1c"},{"post_id":"ck73eqc64001al0on65wfha3h","tag_id":"ck73eqc6k002kl0on73bobu3f","_id":"ck73eqc6p002wl0on1r0sbrt3"},{"post_id":"ck73eqc64001al0on65wfha3h","tag_id":"ck73eqc6l002ll0ona5h79wal","_id":"ck73eqc6q002yl0onackr9osy"},{"post_id":"ck73eqc65001bl0ondfw65a80","tag_id":"ck73eqc6k002il0on68o7afob","_id":"ck73eqc6q0030l0on6ftw2v6i"},{"post_id":"ck73eqc65001bl0ondfw65a80","tag_id":"ck73eqc6l002ll0ona5h79wal","_id":"ck73eqc6q0031l0on5r3x1cxq"},{"post_id":"ck73eqc67001gl0onbpw53d21","tag_id":"ck73eqc6q002zl0on53kxdgh5","_id":"ck73eqc6r0033l0on6br64lsz"},{"post_id":"ck73eqc68001il0ona65xh81c","tag_id":"ck73eqc6r0032l0ona43ce6sd","_id":"ck73eqc6s0036l0oncv5k831z"},{"post_id":"ck73eqc68001il0ona65xh81c","tag_id":"ck73eqc6r0034l0ona6qy88bp","_id":"ck73eqc6s0037l0onalgcew2f"},{"post_id":"ck73eqc69001ll0on5ly0e8bd","tag_id":"ck73eqc6r0035l0onhk9jgcex","_id":"ck73eqc6t003cl0on74nx2fjn"},{"post_id":"ck73eqc69001ll0on5ly0e8bd","tag_id":"ck73eqc6s0038l0on3l9u8gl2","_id":"ck73eqc6t003dl0ong9h8c0sv"},{"post_id":"ck73eqc69001ll0on5ly0e8bd","tag_id":"ck73eqc6s0039l0on5a43dx9v","_id":"ck73eqc6t003fl0on1w192uxa"},{"post_id":"ck73eqc69001ll0on5ly0e8bd","tag_id":"ck73eqc6s003al0ondgvlc1eh","_id":"ck73eqc6u003gl0on0sch9f6l"},{"post_id":"ck73eqc6b001ol0on4wl47xfo","tag_id":"ck73eqc5e0005l0on2wix2ts9","_id":"ck73eqc6u003il0oncjhn2lel"},{"post_id":"ck73eqc6b001ol0on4wl47xfo","tag_id":"ck73eqc6s003bl0onaraxhc8z","_id":"ck73eqc6u003jl0on7y3kgl5a"},{"post_id":"ck73eqc6b001ol0on4wl47xfo","tag_id":"ck73eqc6t003el0on66p0b8xi","_id":"ck73eqc6u003kl0on12i2gsxh"},{"post_id":"ck73eqc6b001ol0on4wl47xfo","tag_id":"ck73eqc6u003hl0oncd6tdf30","_id":"ck73eqc6u003ll0ona87s6hsf"}],"Tag":[{"name":"Android","_id":"ck73eqc5e0005l0on2wix2ts9"},{"name":"about-page","_id":"ck73eqc5k000cl0onh2sm4rdt"},{"name":"刷机","_id":"ck73eqc5s000ml0ongs3r44vi"},{"name":"第三方ROM","_id":"ck73eqc5v000ul0onfxso60gy"},{"name":"Matisse","_id":"ck73eqc620015l0oneeh1f1xq"},{"name":"Git","_id":"ck73eqc65001cl0onch6n9lcx"},{"name":"Hexo","_id":"ck73eqc68001jl0onb232fd99"},{"name":"Github","_id":"ck73eqc6c001pl0on6mxag5hd"},{"name":"博客","_id":"ck73eqc6e001vl0onfc2s75gr"},{"name":"GenyMotion","_id":"ck73eqc6f001zl0on09i74fjj"},{"name":"下载地址","_id":"ck73eqc6g0024l0ondho4guk6"},{"name":"LineageOS","_id":"ck73eqc6h002al0onfqpngr8z"},{"name":"google","_id":"ck73eqc6i002el0on5sbvf5in"},{"name":"shadowsocks","_id":"ck73eqc6k002il0on68o7afob"},{"name":"outline","_id":"ck73eqc6k002kl0on73bobu3f"},{"name":"翻墙","_id":"ck73eqc6l002ll0ona5h79wal"},{"name":"Kotlin","_id":"ck73eqc6l002ml0on5pev9epv"},{"name":"ssr服务器","_id":"ck73eqc6q002zl0on53kxdgh5"},{"name":"offer","_id":"ck73eqc6r0032l0ona43ce6sd"},{"name":"note","_id":"ck73eqc6r0034l0ona6qy88bp"},{"name":"restful","_id":"ck73eqc6r0035l0onhk9jgcex"},{"name":"api","_id":"ck73eqc6s0038l0on3l9u8gl2"},{"name":"免费","_id":"ck73eqc6s0039l0on5a43dx9v"},{"name":"测试","_id":"ck73eqc6s003al0ondgvlc1eh"},{"name":"微信","_id":"ck73eqc6s003bl0onaraxhc8z"},{"name":"小游戏","_id":"ck73eqc6t003el0on66p0b8xi"},{"name":"跳一跳","_id":"ck73eqc6u003hl0oncd6tdf30"}]}}